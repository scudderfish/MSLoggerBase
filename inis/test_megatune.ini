[MegaTune]
   MTversion = 2.25
;-------------------------------------------------------------------------------
; Bars settings have two values, the lower and upper limit for that bar.
;
; NOTE: Big change for 2.20 and later!  All temperature values in this file
; were historically in degrees F (v 2.16 and earlier).  They are now in user
; units, so whatever value you set in Units->temperature below are used.
; Search for "Celsius" and you'll find all the pertinent lines.
;
;-------------------------------------------------------------------------------
;
; Use colors24b (24-bit) if you have a modern video card with lots of color
; depth; use Brad's "colors08b.ini" if you have an 8-bit/256-color map.

#include "colors24b.ini"

;-------------------------------------------------------------------------------

[MegaTune]
   ; Only used for off-line editing, once you connect to MS, this is discarded.
   defaultVersion = 2.00 ; Controller code

   MTversion      = 2.25 ; MegaTune itself; needs to match exec version.

   ; These next two are optional, if they are present, then MT will use
   ; queryCommand to get the string from the controller and verify that it
   ; matches the signature.
   queryCommand   = "Q" ; B&G embedded code version 2.0/2.98x/3.00
   signature      = 20  ; Versions above return a single byte, 20T.

   ; Here's an example for the DT 1.02 embedded code...
   queryCommand   = "S"
   signature      = "Dual Table v.1.02"

;-------------------------------------------------------------------------------

[Units]
   temperature    = "F"   ; Either F (Fahrenheit) or C (Celsius) are valid.
   TPS            = "%"   ; Either "%" or "raw" are valid.
                          ; NOTE: "%" must be quoted in 2.20 and later.
;-------------------------------------------------------------------------------

[GaugeConfigurations]
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.
   ;
   ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld
   accelEnrichGauge  = accDecEnrich,  "Accel Enrich",       "%",      50,   150,     -1,    -1,  999,  999, 0, 0
   afrGauge          = afr,           "Air:Fuel Ratio",     "",       10,  19.4,     12,    13,   15,   16, 2, 2
   dutyCycle1Gauge   = dutyCycle1,    "Duty Cycle 1",       "%",       0,   100,     -1,    -1,   85,   90, 1, 1
   BGdc2Gauge        = dutyCycle1,    "Duty Cycle 2",       "%",       0,   100,     -1,    -1,   85,   90, 1, 1
   dutyCycle2Gauge   = dutyCycle2,    "Duty Cycle 2",       "%",       0,   100,     -1,    -1,   85,   90, 1, 1
   egoCorrGauge      = egoCorrection, "EGO Correction",     "%",      50,   150,     90,    99,  101,  110, 0, 0
   egoGauge          = egoVoltage,    "Exhaust Gas Oxygen", "volts",   0,   1.0,    0.2,   0.3,  0.6,  0.8, 2, 2
   mapGauge          = map,           "Engine MAP",         "kPa",     0,   255,      0,    20,  200,  245, 0, 0
   matGauge          = mat,           "Manifold Air Temp",  "%TEMP", -40,   215,      0,    30,  200,  210, 0, 0
   matGaugeC         = mat,           "Manifold Air Temp",  "%TEMP", -40,   110,    -15,     0,   95,  100, 0, 0
   pulseWidth1Gauge  = pulseWidth1,   "Pulse Width 1",      "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 1, 1
   BGpw2Gauge        = pulseWidth1,   "Pulse Width 2",      "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 1, 1
   pulseWidth2Gauge  = pulseWidth2,   "Pulse Width 2",      "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 1, 1
   tachometer        = rpm,           "Engine Speed",       "RPM",     0,  8000,    300,   600, 3000, 5000, 0, 0
   throttleGauge     = throttle,      "Throttle Position",  "%TPS",    0,   100,     -1,     1,   90,  100, 0, 0
   veBucketGauge     = veTuneValue,   "VE Bucket",          "%",       0,   120,     -1,    -1,  999,  999, 0, 0
   veGauge           = veCurr,        "VE Current",         "%",       0,   120,     -1,    -1,  999,  999, 0, 0
   warmupEnrichGauge = warmupEnrich,  "Warmup Enrichment",  "%",     100,   150,     -1,    -1,  101,  105, 0, 0

;-------------------------------------------------------------------------------

[FrontPage]
   egoLEDs = 0, 1.0, 0.5

   ; Gauges are numbered left to right, top to bottom.
   ;
   ;            1  2  3  4
   ;            5  6  7  8

   gauge1 = tachometer
   gauge2 = throttleGauge
   gauge3 = pulseWidth1Gauge
   gauge4 = dutyCycle1Gauge
   gauge5 = mapGauge
   gauge6 = matGaugeC ; Change this to matGaugeC when you use Celsius.

   gauge7 = BGpw2Gauge ; Use these two for backward compatibility with older releases of MT,
   gauge8 = BGdc2Gauge ; or do something useful with them now.

   gauge7 = pulseWidth2Gauge ; Use these two for DT, used to be automatic in 2.16 and
   gauge8 = dutyCycle2Gauge  ; earlier, but not any more...

  ; Remove the semicolon on the line below and see what happens...
  ;gauge8 = afrGauge ; Make sure you have an afr100.inc file.


;-------------------------------------------------------------------------------

[RunTime]
   batteryBar    =   6,   15
   coolantBar    = -40,  215 ; Change this to -40, 100 for Celsius.
   dutyCycleBar  =   0,  100
   egoBar        =   0,    1.0
   gammaEBar     =   0,  200
   mapBar        =   0,  255
   matBar        = -40,  215 ; Change this to -40, 100 for Celsius.
   pulseWidthBar =   0,   25.5
   rpmBar        =   0, 8000
   throttleBar   =   0,  100

   egoCorrBar    =   0,  200
   baroCorrBar   =   0,  200
   warmupCorrBar =   0,  200
   airdenCorrBar =   0,  200
   veCorrBar     =   0,  200
   accCorrBar    =   0,  100

;-------------------------------------------------------------------------------

[Tuning]
   egoLEDs         = 0.0, 1.0, 0.5 ; NB settings.
 ; egoLEDs         = 4.0, 1.0, 2.5 ; WB settings.
   ; If you reverse these range values as you see in the WB example,
   ; then the LED bar will work as you expect, high on the right,
   ; low on the left.

   ; Colors are now defined in the "colorsXXX.ini" file included above.

   spotDepth       =   2 ; 0 = no indicators, 1 = Z only, 2 = XYZ indicators.
   cursorDepth     =   2 ; Same as spot depth.
   gridHeight      = 1.0 ; Scale height of VE grid.
   gridOrient      = 250,   0, 340 ; Space 123 rotation of grid in degrees.

   ; The four radio buttons on the tuning screen select a "page" of six
   ; gauges.  The gauge numbering is the same as the front page, across
   ; then down.
   ;             1  2
   ;             3  4
   ;             5  6
   ;
   ; gaugeColumns allows you to hide or show gauges in column 2 (i.e.,
   ; gauges 2, 4 and 6).

   gaugeColumns = 2 ; Only 1 or 2 are valid.

   ;              Page 1            Page 2             Page 3            Page 4
   pageButtons  = "&EGO",           "&WUE",            "PW&1",           "PW&2" ; Labels for radio buttons at bottom of tuning dialog.
   gauge1       = tachometer,       tachometer,        tachometer,       tachometer
   gauge2       = mapGauge,         mapGauge,          mapGauge,         mapGauge
   gauge3       = egoGauge,         afrGauge,          egoGauge,         egoGauge
   gauge4       = egoCorrGauge,     warmupEnrichGauge, pulseWidth1Gauge, pulseWidth2Gauge
   gauge5       = veBucketGauge,    veBucketGauge,     veBucketGauge,    veBucketGauge
   gauge6       = accelEnrichGauge, accelEnrichGauge,  dutyCycle1Gauge,  dutyCycle2Gauge
   ;
   ; Notes on tuning screen gauges:
   ;
   ;   Gauge 2 previously switched automatically to be tpsGauge when alpha-n was
   ;   enabled, but you need to do it manually now.
   ;

;-------------------------------------------------------------------------------

[UserDefined]
   ; Only 20 dialogs total and 20 lines per dialog, anything past that
   ; is ignored.
   ;
   ; All the stuff here is order dependent, top ones appear first.
   ;
   ; dialog = "menu entry", "dialog title"
   ;    field = "field label", offset-in-constants, scale, translate, lo, hi, digits
   ;
   ; The scaling and translation values are used as follows:
   ;    msValue   = (userValue - translate) / scale
   ;    userValue = msValue * scale + translate
   ;
   ; I've got no good way to handle a few of these things yet.
   ;
   ; Temperatures are problematic as they aren't in an absolute system,
   ; so a simple scale and translate won't get you to Celsius from the
   ; internal offset-Fahrenheit.  The TPS stuff is also a problem,
   ; because we have to modify the ini file for each TPS installation
   ; and again whenever we move the TPS...  I don't even want to think
   ; about that frequency divider in the boost control values.
   ;

   dialog = "-" ; Separator above DT stuff
   dialog = "&DT Settings", "General Dual Table Settings",
   ;          "field label",                             ofs, scale,  tra,  lo,    hi, digits
      field = "Cranking RPM (RPM)",                      255, 100.0,  0.0, 100,  1000, 0
      field = "Absolute Rev Limiter (RPM)",              251, 100.0,  0.0, 100, 25500, 0
      field = "Launch Control Rev Limit (RPM)",          252, 100.0,  0.0, 100, 25500, 0
      field = "Shift Light"
      field = "Lower Threshold (RPM)",                   253, 100.0,  0.0, 100, 25500, 0
      field = "Upper Threshold (RPM)",                   254, 100.0,  0.0, 100, 25500, 0

   dialog =  "&Boost Control", "Boost Controller Parameters"
      field = "Freq Div, f in Hz = (10000/freqDiv)/256", 247
      field = "Controller Update (ms)",                  248
      field = "Proportional Gain (%)",                   249
      field = "Differential Gain (%)",                   250

   dialog = "&Idle Control", "Fielding 2-Wire Idle Control"
      field = "Fast Idle Temp (deg C)",                  121, 0.555,-72.0, -40,   102, 0 ; Celsius
;     field = "Slow Idle Temp (deg C)",                  124, 0.555,-72.0, -40,   102, 0 ; Celsius
;     field = "Fast Idle Temp (deg F)",                  121,  1.0, -40.0, -40,   215, 0 ; Fahrenheit
      field = "Slow Idle Temp (deg F)",                  124,  1.0, -40.0, -40,   215, 0 ; Fahrenheit
      field = "Fast Idle RPM (RPM)",                     125, 10.0,   0.0,  10,  2550, 0
      field = "Slow Idle RPM (RPM)",                     126, 10.0,   0.0,  10,  2550, 0
      field = "TPS Idle Threshold (%)",                  127,  2.01, 25.0,   0,   255, 0

   dialog = "Mike Test", "Mike Test"
      field = "O2 RPM Limit (RPM*100)", 124
      field = ""
      field = "MAP 02 LIMIT (ADC)", 125
      field = "(KPA-ADC 70-63 75-68 80-73 85-79 90-84)"
      field = ""
      field = "TPS O2 LIMIT", 126
      field = "(%-ADC 60-128 65-134 70-142 75-149 80-156 85-163 90-170)"

;-------------------------------------------------------------------------------

[OutputChannels]
   ; The number of bytes MegaTune should expect as a result
   ; of sending the "A" command to MegaSquirt is determined
   ; by the value of ochBlockSize, so be very careful when
   ; you change it.

   ochBlockSize     =  22

   ; No accommodation made for multi-byte vars, yet.  This is actually no big
   ; deal, since you can say "rpm = {rpmHi*256+rpmLo}", or something similar,
   ; to compute 16-bit quantities from 8-bit input values.  This is actually
   ; the best way to do things, as it does not require that MegaTune know
   ; anything about the endianess of the ECU words.

   secl             =  @(00) ; Actual byte offsets of the values as
   squirt           =  @(01) ; they are returned from MegaSquirt.
   engine           =  @(02)
   baroADC          =  @(03)
   mapADC           =  @(04)
   matADC           =  @(05)
   cltADC           =  @(06)
   tpsADC           =  @(07)
   batADC           =  @(08)
   egoADC           =  @(09)
   egoCorrection    =  @(10)
   airCorrection    =  @(11)
   warmupEnrich     =  @(12)
   rpm100           =  @(13)
   pw1              =  @(14)
   accelEnrich      =  @(15)
   baroCorrection   =  @(16)
   gammaEnrich      =  @(17)
   veCurr1          =  @(18)
   blank1           =  @(19) ; Raw inputs, as they come from MS.
   blank2           =  @(20)
   blank3           =  @(21)

   ; Dual Table mappings for those last three...
   pw2              =  @(19)
   veCurr2          =  @(20)
   idleDC           =  @(21)

   ; Computed output channels.  The first chunk with numeric values is
   ; automatic and should be left untouched.  Those with expressions may
   ; be modified to taste.
   ;
   ; You can use the names in the following list to define gauges, they
   ; are defined in code, so need not be redefined here.
;  cycleTime        = ??? ; Milliseconds per cycle at current rpm.
;  dutyCycle        = ??? ; Either of dc1 or dc2, depending on active page.
;  dutyCycle1       = ???
;  dutyCycle2       = ???
;  load             = ??? ; Could be map, tp% or tpsADC depending on alpha-n and user settings.
;  nSquirts1        = ???
;  nSquirts2        = ???
;  pulseWidth       = ??? ; Either pw1 or pw2, depending on active page when running DT.
;  pulseWidth1      = ??? ; Always bank1, B&G and DT.
;  pulseWidth2      = ??? ; Always bank2, DT, probably noise in B&G.
;  throttle         = ??? ; {tpsUnits == 1 ? TPSadc : table(TPSadc, "throttlefactor.inc")} ; Either tp% or tpsADC depending on Units->TPS at top of this file.
;  veCurr           = ??? ; Either of 1 or 2, depending on active page.
;  veTuneLodIdx     = ??? ; Zero-based index of load bin at the tuning point.
;  veTuneRpmIdx     = ??? ; Index of rpm bin.
;  veTuneValue      = ??? ; Value contained in VE[veTuneLodIdx, veTuneRpmIdx].

   accDecEnrich     = { accelEnrich + ((engine & 0b00100000) ? const(85) : 100) }
   afr              = { table(egoADC, "NBafr100.inc") / 100.0        }
   barometer        = { table(baroADC, "kpafactor.inc")              }
   batteryVoltage   = { batADC / 255.0 * 30.0                        } ; Current MS power supply voltage.
   coolant          = { tempCvt(table(cltADC, "thermfactor.inc")-40) } ; Coolant sensor temperature in user units.
   egoVoltage       = { egoADC / 255.0 * 5.0                         } ; EGO sensor voltage.
   map              = { table(mapADC, "kpafactor.inc")               } ; Manifold pressure in kPa.
   mat              = { tempCvt(table(matADC, "matfactor.inc")-40)   } ; Manifold temperature in user units.
   rpm              = { rpm100*100                                   } ; True RPM.

   tp = {  table(tpsADC, "throttlefactor.inc") }
   tr = { itable(tp,     "throttlefactor.inc") }

   ;----------------------------------------------------------------------------
   ;--  Here are some examples of how to access data in the constants.        --

   ve11             = {   const(0) }
   nCyl             = { ((const(116) & 0b11110000) >> 4) + 1 } ; 116 is Config11
   alphaN           = {  (const(118) & 0b00000100) >> 2      } ; 118 is Config13

   ;----------------------------------------------------------------------------
   ;--  Here's an example of how you can use iteration lag to compute         --
   ;--  derivatives.  Note that this particular case is very crude as the     --
   ;--  RPM numbers only have resolution to 100s.                             --
;  time0            = {time}
   time             = {timeNow}
;  deltaT           = {time-time0}
;  rpm0             = {rpm}
   rpm              = {rpm100*100} ; Careful here, this one is used for a gauge.
;  rpmDOT           = {(rpm0-rpm) / deltaT}

;  xxr              = {table(egoADC, "Cjuqer.inc")} ; File read error test
;  badRef           = {nonExistentVariableNameTest}
;  jive             = {blank2 * 4.5 * log(-1)} ; Run-time error test

; TODO, won't work yet...
;  tpsUnits         = 0='%' 1='r' ; User-input value from Units/TPS
;  DT               = 0 or 1
;  dtPage           = 0 or 1

;  rpmSpike = { fabs(rpm-rpm0) > 1000 } ; This one could be useful
                                        ; for datalog marks, too.

;  highLoad = { rpm >= 3500 && throttle >= 50 }
;  enable   = { rpm >= 2000 }

;-------------------------------------------------------------------------------

[Datalog]
 ; enableWrite = enable    ; Log entries are only written when the variable
                           ; "enable" is true, see it's definition above.

 ; markOnTrue  = highLoad  ; A datalog marker is written when "highLoad"
                           ; transitions from false to true.  The marker
                           ; looks like "MARK 001 highLoad" to distinguish
                           ; it from the manual markers.

   ; Default user-defined log emulates the standard full datalog.
   ; The entries are saved in the datalog file in the order in
   ; which they appear in the list below.
   ;
   ;   Channel - Case sensitive name of output channel to be logged.
   ;   Label   - String written to header line of log.  Be careful
   ;             about changing these, as programs like MSLVV and
   ;             MSTweak key off specific column names.
   ;   Type    - Data type of output, converted before writing.
   ;   Format  - C-style output format of data.
   ;
   ;       Channel          Label          Type   Format
   ;       --------------   ----------     -----   ------
   entry = time,            "Time",        float,  "%.3f"
   entry = secl,            "SecL",        int,    "%d"
   entry = rpm100,          "RPM",         int,    "%d"
   entry = map,             "MAP",         int,    "%d"
   entry = throttle,        "TP",          int,    "%d"
   entry = egoVoltage,      "O2",          float,  "%.3f"
   entry = mat,             "MAT",         float,  "%.1f"
   entry = coolant,         "CLT",         float,  "%.1f"
   entry = engine,          "Engine",      int,    "%#x"
   entry = egoCorrection,   "Gego",        int,    "%d"
   entry = airCorrection,   "Gair",        int,    "%d"
   entry = warmupEnrich,    "Gwarm",       int,    "%d"
   entry = baroCorrection,  "Gbaro",       int,    "%d"
   entry = gammaEnrich,     "Gammae",      int,    "%d"
   entry = accDecEnrich,    "TPSacc",      int,    "%d"
   entry = veCurr1,         "Gve",         int,    "%d"
   entry = pulseWidth1,     "PW",          float,  "%.1f"
   entry = veCurr2,         "Gve2",        int,    "%d"
   entry = pulseWidth2,     "PW2",         float,  "%.1f"
   entry = dutyCycle1,      "DutyCycle1",  float,  "%.1f"
   entry = dutyCycle2,      "DutyCycle2",  float,  "%.1f"
   entry = blank1,          "UserData1",   int,    "%d"
   entry = blank2,          "UserData2",   int,    "%d"
   entry = blank3,          "UserData3",   int,    "%d"

[GaugeConfigurations]
   tpGauge     = tp,      "tp",  "%TPS",    0,   255,     -1,    -1,   256,  256, 0, 0
   trGauge     = tr,      "tr",  "%TPS",    0,   255,     -1,    -1,   256,  256, 0, 0
[FrontPage]
  gauge7 = tpGauge
  gauge8 = trGauge
