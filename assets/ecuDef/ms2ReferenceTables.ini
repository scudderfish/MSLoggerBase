[ReferenceTables]

    tableWriteCommand 	= "t" ; 
    
    
    
    ; valid table Generator types:
    ; thermGenerator - as used for temp sensor calibration
    ; linearGenerator - as used for linear generic WB sensors
    ; Must have at least 1 solution, even it it is a reference to a generator.
    ; tableIdentifiers are expected to be numeric and in base 8 or 16
    
    referenceTable = std_ms2gentherm, "Calibrate Thermistor Tables..."
    	topicHelp = "http://www.megamanual.com/mt28.htm#oh"
        tableIdentifier	= 000, "Coolant Temperature Sensor", 001, "Air Temperature Sensor"
        ; tableLimits (optional) = intentifier, min, max, defaultVal 
        ; will set the default value if value is outside the min and max limits.
        tableLimits	= 001, -40, 350, 70
#if EXPANDED_CLT_TEMP
	tableLimits = 000, -40, 400, 350
#else
	tableLimits = 000, -40, 350, 180
#endif
	adcCount 	= 1024 	; length of the table
        bytesPerAdc 	= 2 	; using shorts
        scale		= 10 	; scale by 10 before sending to controller
        ;tableGenerator = Generator type, Label 
        tableGenerator  = thermGenerator, "Thermistor Mesurements"
        ; thermOption	= name, resistor bias, tempPoint1(°C), resPoint1, tempPoint2, resPoint2, tempPoint3, resPoint3
        thermOption 	= "GM", 	2490,    -40, 100700, 	30, 2238,     99, 177
        thermOption 	= "Chrysler 85 up", 	2490,    5.5,24500, 30.5, 8100,    88.3, 850
        thermOption 	= "Ford", 	2490,      0, 94000, 	50, 11000,    98, 2370
        thermOption 	= "Saab (Bosch)", 	2490,      0, 5800, 	80, 320,    100, 180
        thermOption 	= "Mazda", 	50000,   -40, 2022088, 	21, 68273,    99, 3715
	thermOption 	= "Mitsu", 	2490,    -40, 100490, 	30, 1875,    99, 125
	thermOption 	= "Toyota",	2490,    -40, 101890, 	30, 2268,    99, 156
	thermOption 	= "RX-7_CLT(S4 & S5)", 2490, -20, 16200, 20, 2500, 80, 300
	thermOption 	= "RX-7_MAT", 42200, 20, 41500, 50, 11850, 85, 3500
	thermOption     = "VW L-Jet Cylinder Head Temp Sensor II", 1100, -13.888, 11600, 53.888, 703, 95.555, 207
	thermOption 	= "RX-7_AFM(S5 in AFM)", 2490, -20, 16200, 20, 2500, 80, 300
	solution	= "ThermGenerator",          thermGenerator

; adc will be replaced with the possible egoADC values 0-1023 in the MSII case.
; using adc tables the values will be interpolated to fill all values.
; adc*5/1024 will turn the adc to volts for a 0-5V, 1024 adc count

    referenceTable = std_ms2geno2, "Calibrate AFR Table..."
    	topicHelp = "http://www.megamanual.com/mt28.htm#oa"
        tableIdentifier = 002, "AFR Table"
        adcCount 	= 1024 	; length of the table
        bytesPerAdc 	= 1 	; using bytes
        scale		= 10 ; scale by 10 before sending to controller
        ;tableGenerator	= Generator Type, 		Label, xUnits, yUnits,  xLow, xHi,  yLow, yHi ; lows and Hi's are just default values, they will be user editable
    	tableGenerator	= linearGenerator, "Custom Linear WB", "Volts","AFR",    1,   4,   9.7,  18.7
    	solutionsLabel	= "EGO Sensor"
    	;solution	= "Narrowband", 		{ adcValue > 92 ? 12.5 : 16.9 } ;
    	solution	= "Narrowband", 		{ table(adcValue*5/1023 , "nb.inc") } ;
	solution	= "AEM Linear AEM-30-42xx", 	{ 9.72 + (adcValue * 0.0096665) }
	; I totally don't trust this mess....
	;solution	= "AEM Non-Linear (Older)", 	{ 8.44350 + ((adcValue/4)    * (0.012541 + (adcValue/4)    * (0.000192111 + (adcValue/4)    * (-0.00000138363 + (adcValue/4)    * 0.00000000442977)))) }
	solution	= "Autometer 0V=10:1, 4V=16:1", { 10 + (adcValue * 0.0073313783) }
	solution	= "Daytona TwinTec",  		{ 10 + (adcValue    * 0.0097752) }
	solution	= "DIY-WB", 			{ table( adcValue/4, "WBlambda100MOT.inc")*14.7 / 100.0  }
	solution	= "DynoJet Wideband Commander", { adcValue    * 0.00784325 + 10 }
	solution	= "FJO WB",                     { table(adcValue*5/1023 , "fjoWB.inc" ) }
	solution	= "Innovate LC1 Default",       { 7.35 + (adcValue    * 0.01470186 )}
	solution	= "Innovate 0.0-5.0 10:1-20:1", { 10 + (adcValue    * 0.0097752)}
	solution	= "Innovate 1.0-2.0",           { adcValue * 0.049025}
	solution	= "LambdaBoy",                  { table(adcValue*5/1023 , "lambdaBoy.inc" ) }
	solution	= "NGK Powerdex",               { 9 + ( adcValue * 0.0068359375 ) }
	solution	= "TechEdge DIY Non-Linear",    { table(adcValue*5/1023 , "TechEdge_DIYwbo2.inc") }
	solution	= "TechEdge Linear",            { adcValue    * 0.0097752 + 9 }
	solution	= "Zeitronix",                  { table(adcValue*5/1023 , "zeitronix.inc") }

	solution	= "Custom Linear WB",          linearGenerator
    
