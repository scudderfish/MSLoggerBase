;-------------------------------------------------------------------------------
[MegaTune]
   MTversion    = 2.25 ; MegaTune itself; needs to match exec version.

   queryCommand = "S"                                ; data format
   signature    = "MS1/Extra format 029y3 *********" ; gets changed when data format/this file changes
   versionInfo  = "T"                                ; full text of this revision

;  last edited for version 029y2 and MT2.25 (release)
;-------------------------------------------------------------------------------

[Constants]
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   endianness      = big

#unset MEMPAGES     ; set to enable all 13 pages for full debugging
#set LOGPAGES     ; set to enable 11 pages for trigger/tooth logging

#if MEMPAGES
;only use the 13 page version if you are a code developer and want to see the contents of ram
;Be sure not to let Megatune do a Chunk write command because the firmware does not correctly
;support 256 byte page writes (even though it ignores all the bytes on those pages)
   nPages          = 13
   burnCommand     = "B"
   pageSize        = 189,       189,       189,       189,       189,       189,       189,       189,       189,       189,     189,	256,	256
   pageActivate    = "P\001",   "P\002",   "P\003",   "P\000",   "P\004",   "P\005",   "P\006",   "P\007",   "P\010",   "P\360", "P\361", "P\362", "P\363"
   pageReadCommand = "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",     "V",	"V",	"V"
   pageValueWrite  = "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "",      "",	"",	""
   pageChunkWrite  = "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "",      "",	"",	""
#elif LOGPAGES
   nPages          = 11
   burnCommand     = "B"
   pageSize        = 189,       189,       189,       189,       189,       189,       189,       189,       189,       189,     189
   pageActivate    = "P\001",   "P\002",   "P\003",   "P\000",   "P\004",   "P\005",   "P\006",   "P\007",   "P\010",   "P\360", "P\361"
   pageReadCommand = "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",     "V"
   pageValueWrite  = "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "",      ""
   pageChunkWrite  = "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "",      ""
#else
   nPages          = 9
   burnCommand     = "B"
   pageSize        = 189,       189,       189,       189,       189,       189,       189,       189,       189
   pageActivate    = "P\001",   "P\002",   "P\003",   "P\000",   "P\004",   "P\005",   "P\006",   "P\007",   "P\010"
   pageReadCommand = "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V",       "V"
   pageValueWrite  = "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v",   "W%o%v"
   pageChunkWrite  = "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v", "X%o%c%v"
#endif

; Pages 10 & 11 are special read only pages that can be used to view realtime logged data
; of inter-tooth or inter-trigger times. Primarily for code devel or checking your trigger
; wheel is giving normal pulses.
;At present you can only access this data by using the Table Editor and viewing the data directly
;Page 10 contains the time between each tooth in the generic (missing and/or 2nd trig) and Neon
;Page 11 contains the time between "triggers" and will work for all ignition types
;93 big endian 16bit numbers are returned. The 188th byte is the address of the _next_ byte to
;be written. The code logs continuously once the page is selected so you need to start from the
;next byte and wrap around to the beginning to get the data in the right order
;The 189th byte indicates the time units. 0 = microseconds, 1= 0.1ms units
;After you've selected the page, pause a little then hit Fetch, you'll get 93 new samples.
;Then somehow get them into a spreadsheet and plot a graph.
;i.e. if the data is (decimal) 52, 45, ....
; convert those two numbers -> (52*256) + 45
;page 12 = RAM bytes $0000 to $00FF ($0000 to $003f return zeros)
;page 13 = RAM bytes $0100 to $01FF

;comms settings - you may need to tweak these for USB serial
;e.g. put writeblocks off and add an interwrite delay
   pageActivationDelay = 50
   writeBlocks = on
   interWriteDelay = 5
;end USB settings

   ;  name       = bits,   type, offset, bits
   ;  name       = array,  type, offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type, offset,        units,     scale, translate,    lo,      hi, digits

   page = 1
      veBins1    = array,  U08,       0, [12x12], "%",       1.0,       0.0,   0.0,   255.0,      0
      rpmBins1   = array,  U08,     158, [  12], "RPM",    100.0,       0.0,   100,   25500,      0

 #if SPEED_DENSITY
    #if MPXH6300A
      mapBins1   = array,  U08,     170, [ 12],  "kPa",  1.213675,     1.53,  20.0,  304.0,     0
    #elif MPXH6400A
      mapBins1   = array,  U08,     170, [ 12],  "kPa",  1.6197783,   2.147,  20.0,  400.0,     0
    #else
      mapBins1   = array,  U08,     170, [  12], "kPa",     1.0,        0.0,   0.0,  255.0,      0
    #endif

 #elif AIR_FLOW_METER
      afmBins1   = array, U08,      170, [ 12], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

 #elif ALPHA_N
      tpsBins1   = array,  U08,     170, [  12], "TPS ADC",     1.0,      0.0,   0.0,   255.0,      0
 #endif


#if CELSIUS
      egoTemp1   = scalar, U08,     144,         "C",     0.555,       -72,   -40,   102.0,      0
#else
      egoTemp1   = scalar, U08,     144,         "F",       1.0,       -40,   -40,   215.0,      0
#endif
      egoCount1  = scalar, U08,     145,        "",          1.0,       0.0,   0.0,   255.0,      0
      egoDelta1  = scalar, U08,     146,        "%",         1.0,       0.0,   0.0,   255.0,      0
      egoLimit1  = scalar, U08,     147,        "%",         1.0,       0.0,   0.0,   255.0,      0
      reqFuel1   = scalar, U08,     148,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      divider1   = scalar, U08,     149,        "",          1.0,       0.0
      alternate1 = bits,   U08,     150, [0:0], "Simultaneous", "Alternating"
      injOpen1   = scalar, U08,     151,        "ms",        0.1,       0.0,   0.1,    25.5,      1
      injPwmP1   = scalar, U08,     153,        "%",         1.0,       0.0,   0.0,   100.0,      0
      injPwmT1   = scalar, U08,     154,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      battFac1   = scalar, U08,     155,        "ms/v",0.0166667,       0.0,   0.0,     1.0,      2
      rpmk1      = scalar, U16,     156,        "",          1.0,       0.0

      ; Config1
      mapType1   = bits,   U08,     182, [0:1], "115 kPa", "250 kPa", "300 kPa", "400 kPa"
      mapSensor1 = bits,   U08,     182, [0:0]
      twoStroke1 = bits,   U08,     182, [2:2], "Four-stroke", "Two-stroke"
;;      injType1   = bits,   U08,     182, [3:3], "Port", "Throttle Body"
      nCylinders1= bits,   U08,     182, [4:7+1]
      ; Config3
      cltType1   = bits,   U08,     183, [0:1], "GM", "Unknown1", "Unknown2", "Unknown3"
      matType1   = bits,   U08,     183, [2:3], "GM", "Unknown1", "Unknown2", "Unknown3"
      nInjectors1= bits,   U08,     183, [4:7+1]
      ; Config3
      engineType1= bits,   U08,     184, [0:0], "Even fire",     "Odd fire"
      egoType1   = bits,   U08,     184, [1:1], "Narrow band",   "Wide band"
      algorithm1 = bits,   U08,     184, [2:2], "Speed Density", "Alpha-N"
      baroCorr1  = bits,   U08,     184, [3:3], "Off",           "On"

      egoRPM1    = scalar, U08,     185,        "RPM",     100.0,       0.0,   100,   25500,      0
#if CELSIUS
      fastIdleT1 = scalar, U08,     186,        "C",      0.555,     -72.0,   -40,     102,      1
#else
      fastIdleT1 = scalar, U08,     186,        "F",        1.0,     -40.0,   -40,     215,      1
#endif
      egoSwitch1 = scalar, U08,     187,        "v",      0.0196,       0.0,   0.0,     5.0,      3
      egoIgnCount= bits,   U08,     188,  [0:0], "mSec",  "Ign Pulses*^"

   page = 2
      veBins2    = array,  U08,       0, [12x12], "%",       1.0,      0.0,   0.0,   255.0,      0
      rpmBins2   = array,  U08,     158, [  12], "RPM",    100.0,      0.0,   100,   25000,      0

#if SPEED_DENSITY
 #if MPXH6300A
      mapBins2   = array,  U08,     170, [ 12],  "kPa",  1.213675,  1.53,  20.0,  304.0,     0
 #elif MPXH6400A
      mapBins2   = array,  U08,     170, [ 12],  "kPa",  1.6197783,   2.147,  20.0,  400.0,     0
 #else
      mapBins2   = array,  U08,     170, [ 12], "kPa",     1.0,      0.0,   0.0,   255.0,      0
 #endif

 #elif AIR_FLOW_METER
      afmBins2   = array, U08,      170, [12], "Volts",    0.01961, 0.0,  0.0,  5.0, 2


 #elif ALPHA_N
      tpsBins2   = array,  U08,     170, [ 12], "TPS ADC",        1.0,      0.0,   0.0,   255.0,      0
 #endif


#if CELSIUS
      egoTemp2   = scalar, U08,     144,         "C",     0.555,       -72,   -40,   102.0,      0
#else
      egoTemp2   = scalar, U08,     144,         "F",       1.0,       -40,   -40,   215.0,      0
#endif

      egoDelta2  = scalar, U08,     146,        "%",         1.0,       0.0,   0.0,   255.0,      0
      egoLimit2  = scalar, U08,     147,        "%",         1.0,       0.0,   0.0,   255.0,      0
      reqFuel2   = scalar, U08,     148,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      divider2   = scalar, U08,     149,        "",          1.0,       0.0
      alternate2 = bits,   U08,     150, [0:0], "Simultaneous", "Alternating"
      injOpen2   = scalar, U08,     151,        "ms",        0.1,       0.0,   0.1,    25.5,      1
      injPwmP2   = scalar, U08,     153,        "%",         1.0,       0.0,   0.0,   100.0,      0
      injPwmT2   = scalar, U08,     154,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      battFac2   = scalar, U08,     155,        "ms/v",0.0166667,       0.0,   0.0,     1.0,      2
      rpmk2      = scalar, U16,     156,        "",          1.0,       0.0

      ; Config1
      mapType2   = bits,   U08,     182, [0:1], "115 kPa", "250 kPa", "300 kPa", "400 kPa"
      twoStroke2 = bits,   U08,     182, [2:2], "Four-stroke", "Two-stroke"
;;      injType2   = bits,   U08,     182, [3:3], "Port", "Throttle Body"
      nCylinders2= bits,   U08,     182, [4:7+1]
      ; Config3
      cltType2   = bits,   U08,     183, [0:1], "GM", "Unknown1", "Unknown2", "Unknown3"
      matType2   = bits,   U08,     183, [2:3], "GM", "Unknown1", "Unknown2", "Unknown3"
      nInjectors2= bits,   U08,     183, [4:7+1]
      ; Config3
      engineType2= bits,   U08,     184, [0:0], "Even fire",     "Odd fire"
      egoType2   = bits,   U08,     184, [1:1], "Narrow band",   "Wide band"
      algorithm2 = bits,   U08,     184, [2:2], "Speed Density", "Alpha-N"
      baroCorr2  = bits,   U08,     184, [3:3], "Off",           "On"

      primePulse2= scalar, U08,     185,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      egoRPM2    = scalar, U08,     185,        "RPM",     100.0,       0.0,   100,   25500,      0
#if CELSIUS
       fastIdleT2 = scalar, U08,     186,        "C",      0.555,     -72.0,   -40,     102,      1
#else
       fastIdleT2 = scalar, U08,     186,        "F",        1.0,     -40.0,   -40,     215,      1
#endif
      egoSwitch2 = scalar, U08,     187,        "v",      0.0196,       0.0,   0.0,     5.0,      3

;      taeColdM2  = scalar, U08,     188,        "%",         1.0,       0.0,   0.0,   250.0,      0
;      egoCount2  = scalar, U08,     190,        "",          1.0,       0.0,   0.0,   255.0,      0
; SECOND O2 SETTINGS
      TwoLambda    = bits, U08,     188,[0:0], "None*^(DT)", "Fitted (DT only)"

   page = 3
      advTable1  = array,  U08,       0,[12x12], "deg",   0.352,   -28.4,   -10.0,    80.0,      0
      rpmBins3   = array,  U08,     144,[   12], "RPM",   100.0,     0.0,   100,   25500,      0

#if SPEED_DENSITY
 #if MPXH6300A
      mapBins3   = array,  U08,     156, [ 12],  "kPa",  1.213675,  1.53,  20.0,  304.0,    0
 #elif MPXH6400A
      mapBins3   = array,  U08,     156, [ 12],  "kPa",  1.6197783,   2.147,  20.0,  400.0,     0
 #else
      mapBins3   = array,  U08,     156,[   12], "kPa",     1.0,     0.0,   0.0,   255.0,      0
 #endif
 #elif AIR_FLOW_METER
      afmBins3   = array, U08,      156, [12], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

 #elif ALPHA_N
      tpsBins3   = array,  U08,     156, [  12], "TPS ADC",        1.0,      0.0,   0.0,   255.0,      0
 #endif

      TrigAng    = scalar, U08,    168,      "Deg",        0.352,     0,  0, 90,  0
      FixAng     = scalar, U08,    169,      "Deg",        0.352, -28.4,  -10, 80,  0
      Trim       = scalar, S08,    170,      "Deg",        0.352,     0,  -45, 45,  0
      CrankAng   = scalar, U08,    171,      "Deg",        0.352, -28.4, -10, 80,  0
      IgHold     = scalar, U08,    172,      "",            1,        0,  0, 100, 0
      Trig_plus  = bits,   U08,    173,[0:1], "0", "+22.5", "INVALID", "+45"
      TrigCrank  = bits,   U08,    173,[2:2], "Trigger Return", "Time Based"
      IgInv      = bits,   U08,    173,[3:3], "No", "Yes"
      oddfire    = bits,   U08,    173,[4:4], "No", "Yes"
      IdleAdv    = scalar, U08,    174,      "Deg",        0.352,-28.4,  -10, 80,  0
      IdleAdvTPS = scalar, U08,    175,      "ADC",        1, 0, 0, 255, 0
      IdleAdvRPM = scalar, U08,    176,      "RPM",        100, 0, 0, 1200, 0
   #if CELSIUS
      IdleAdvCLT = scalar, U08,    177, "C",     0.555, -72, -40, 102, 1
   #else
      IdleAdvCLT = scalar, U08,    177, "F",     1,  -40,  -40,  215, 0
   #endif
      IdleDelayTime = scalar, U08, 178, "sec",     1,    0,    0,  5, 0
      StgCycles =     scalar, U08, 179, "cycles",  1,    0,    0,  255, 0
  #if MPXH6300A
       Stg2ndParmKPA   = scalar,  U08, 180, "KPa",  1.213675,  1.53, 0, 304.0, 0
       Stg2ndParmDlt = scalar,  U08, 181, "KPa",  1.213675,  1.53, 0, 304.0, 0
  #elif MPXH6400A
       Stg2ndParmKPA   = scalar,  U08, 180,  "KPa",   1.6197783,   2.147,  20.0,  400.0,  0
       Stg2ndParmDlt = scalar,  U08, 181, "KPa",    1.6197783,   2.147,  20.0, 400.0, 0
  #else
      Stg2ndParmKPA = scalar, U08,    180,   "kPa",    1, 0, 0, 255, 0
      Stg2ndParmDlt = scalar, U08, 181, "kPa", 1,0,0,255,0
  #endif
      spare3_182 = scalar, U08,    182,      "",           1, 0, 0, 255, 0
      spare3_183 = scalar, U08,    183,      "",           1, 0, 0, 255, 0
      spare3_184 = scalar, U08,    184,      "",           1, 0, 0, 255, 0

   page = 4
      msnsCyl       = bits,   U08,    0,  [0:0], "Off*", "MSnS^"
      neonCrank     = bits,   U08,    0,  [1:1], "Off*^", "Neon/420A"
      wheelon       = bits,   U08,    0,  [2:2], "Off*^", "Generic wheel"
      onetwo        = bits,   U08,    0,  [3:3], "-1", "-2"
      edis          = bits,   U08,    0,  [4:5], "Off*^", "EDIS", "INVALID", "dual EDIS"
      tfi           = bits,   U08,    0,  [6:6], "Off*^", "Ford TFI"
      hei7          = bits,   U08,    0,  [7:7], "Off*^", "GM 7pin HEI"

; used to capture all ignition modes, for menu selection
      ignmode       = scalar, U08,    0,  "", 1, 0, 0, 255,0

      fidleUse      = bits,   U08,    1,  [0:0], "Idle control*", "Spark output A"
      led17Use      = bits,   U08,    1,  [1:1], "Squirt*^", "Spark output A"
      led18Use      = bits,   U08,    1,  [2:3], "Warmup*^", "IRQ trigger", "Output4","Spark output C"
      led18_2Use    = bits,   U08,    1,  [3:3]
      led19Use      = bits,   U08,    1,  [4:4], "Acceleration*^", "Spark output B"
      x2use         = bits,   U08,    1,  [5:5], "Water inj", "Fan control"
;bit 6 is led18/fan control
      toy_dli       = bits,   U08,    1,  [7:7], "Normal*", "Toyota DLI muliplex"

;spark outputs E & F
      spkeop        = bits,   U08,  116,  [3:3], "Shiftlight", "Spark output E"
      spkfop        = bits,   U08,  116,  [4:4], "Knock input", "Spark output F"

      SoftRevLim    = scalar, U08,    2,  "rpm", 100.0,  0.0, 100, 25500, 0
      SoftLimRetard = scalar, U08,    3,  "deg", 0.352, -28.4, -10,   80,   0
      SoftLimMax    = scalar, U08,    4,  "s",   0.1,  0.0, 0.0,  25.5,   1
;      "MSnS Soft limit cool time (s)",      5,    0.1,  0.0, 0.0,  25.5  NOT USED
      HardRevLim    = scalar, U08,    6,  "rpm",  100,  0.0, 100, 25500,  0
      out1lim       = scalar, U08,    7,  "raw byte or deg F +40",    1,    0,   0,   255,  0
      out1src       = bits,   U08,    8,  [0:4], "Off*", "INVALID", "INVALID", "INVALID", "MAP", "MAT", "CLT", "TPS", "BATT", "EGO", "egocorr", "AirCorr", "WarmCorr", "RPM", "PW1", "TPSAccel", "BaroCorr", "GammaE","VECurr1", "PW2","VECurr2", "IdleDC","CTimeH", "CTimeL","SparkAngle", "AFRTarget","X7ADC", "X6ADC","CltIATAngle", "KnockAngle","EggoCorr2", "Traction Active"
      out2lim       = scalar, U08,    9,  "raw byte or deg F +40",    1,    0,   0,   255,  0
      out2src       = bits,   U08,    10,  [0:4], "Off*", "INVALID", "INVALID", "INVALID", "MAP", "MAT", "CLT", "TPS", "BATT", "EGO", "egocorr", "AirCorr", "WarmCorr", "RPM", "PW1", "TPSAccel", "BaroCorr", "GammaE","VECurr1", "PW2","VECurr2", "IdleDC","CTimeH", "CTimeL","SparkAngle", "AFRTarget","X7ADC", "X6ADC","CltIATAngle", "KnockAngle","EggoCorr2", "Traction Active"
      out1Hysis     = scalar, U08,    126,  "raw byte or deg F", 1, 0, 0, 255, 0
      out2Hysis     = scalar, U08,    127,  "raw byte or deg F", 1, 0, 0, 255, 0

      out3lim       = scalar, U08,    133,  "raw byte or deg F +40",    1,    0,   0,   255,  0
      out3src       = bits,   U08,    132,  [0:4], "Off*", "INVALID", "DECEL", "ACCEL", "MAP", "MAT", "CLT", "TPS", "BATT", "EGO", "egocorr", "AirCorr", "WarmCorr", "RPM", "PW1", "TPSAccel", "BaroCorr", "GammaE","VECurr1", "PW2","VECurr2", "IdleDC","CTimeH", "CTimeL","SparkAngle", "AFRTarget","X7ADC", "X6ADC","CltIATAngle", "KnockAngle","EggoCorr2", "Traction Active"
      out3Timer     = scalar, U08,    134,  "Sec",  0.1, 0, 0, 25.5,  1
      Out3_Out1     = bits,   U08,    116,[7:7], "Source", "output1+Source"

      out4lim       = scalar, U08,    139,  "raw byte or deg F +40",    1,    0,   0,   255,  0
      out4src       = bits,   U08,    138,  [0:4], "Off*", "INVALID", "DECEL", "ACCEL", "MAP", "MAT", "CLT","TPS", "BATT", "EGO", "egocorr", "AirCorr", "WarmCorr", "RPM", "PW1", "TPSAccel", "BaroCorr", "GammaE","VECurr1", "PW2","VECurr2", "IdleDC","CTimeH", "CTimeL","SparkAngle", "AFRTarget","X7ADC", "X6ADC","CltIATAngle", "KnockAngle","EggoCorr2", "Traction Active"
      out4FAN       = bits, U08,      1, [6:6], "Source", "Fan Control"

      wd_2trig      = bits,   U08,   11,  [0:0], "Off", "2nd trigger"

      whlsim        = bits,   U08,   11,  [2:2], "off",  "on"
      taeIgnCount   = bits,   U08,   11,  [3:3], "Sec*^", "Cycles"
      rotaryFDign   = bits,   U08,   11,  [4:4], "FC Trailing",  "FD Trailing"
      hybridAN      = bits,   U08,   11,  [5:5], "Off*^", "On"
      inj2cr        = bits,   U08,   11,  [6:6], "Off",  "On*^"

      boostUse      = bits,   U08,   12,  [0:0], "Output1*^", "Boost Control"
      shiftUse      = bits,   U08,   12,  [1:1], "Off*^", "On"
      launchUse     = bits,   U08,   12,  [2:2], "Off*^", "On"
        out3sparkd    = bits,   U08,   12,  [4:4], "Output3", "Spark output D"
        dwellduty50       = bits,   U08,   12,  [5:6], "75% duty cycle*^", "minimal for HEI4", "50% duty cycle", "INVALID"

      whlsimcnt     = scalar, U08,   13,   "",      1.0,     0.0,    1,   6,    0

      freqDiv       = bits,   U08,   14,  [0:2], "INVALID","39.0 Hz","19.5 Hz","13.0 Hz","9.8 Hz","7.8 Hz","6.5 Hz","5.6 Hz"
      bcUpdateRate  = scalar, U08,   15,   "ms",      1.0,     0.0,    10,   255,    0
      pGain         = scalar, U08,   16,    "%",      0.3922,     0.0,     0,   100,    1
      dGain         = scalar, U08,   17,    "%",      0.3922,     0.0,     0,   100,    1
      ShiftLower    = scalar, U08,   18,   "rpm",   100.0,     0.0,   100,  25500,   0
      ShiftUpper    = scalar, U08,   19,   "rpm",   100.0,     0.0,   100,  25500,   0
      LaunchLim     = scalar, U08,   20,   "rpm",   100.0,     0.0,   100,  25500,   0
      edismultirpm  = scalar, U08,   21,   "rpm",   100.0,     0.0,   100,   2500,   0
      BoostDir      = bits,   U08,   92,  [6:6], "Increase boost", "Decrease Boost"
      inj1g         = bits,   U08,    33,  [5:5], "off", "on*^"
      inj2t         = bits,   U08,    33,  [4:4], "1*^", "2 (DT)"
      inj2g         = bits,   U08,    33,  [6:6], "off", "on*^"
      trig2fall     = bits,   U08,    33,  [0:1], "rising", "falling (like IRQ)", "rising and falling", "INVALID"
      latency       = scalar, U08,    34, "us", 1, 0, 1, 255, 0

#if MPXH6300A
      KPaTarg10     = scalar, U08,   29,  "KPa",  1.213675,  1.53, 100, 304.0, 0
      KPaTarg40     = scalar, U08,   30,  "KPa",  1.213675,  1.53, 100, 304.0, 0
      KPaTarg60     = scalar, U08,   31,  "KPa",  1.213675,  1.53, 100, 304.0, 0
      KPaTarg100    = scalar, U08,   32,  "KPa",  1.213675,  1.53, 100, 304.0, 0
#elif MPXH6400A
      KPaTarg10     = scalar, U08,   29,  "KPa",   1.6197783,   2.147,  20.0,  400.0,     0
      KPaTarg40     = scalar, U08,   30,  "KPa",   1.6197783,   2.147,  20.0,  400.0,     0
      KPaTarg60     = scalar, U08,   31,  "KPa",   1.6197783,   2.147,  20.0,  400.0,     0
      KPaTarg100    = scalar, U08,   32,  "KPa",   1.6197783,   2.147,  20.0,  400.0,     0
#else
      KPaTarg10     = scalar, U08,   29,  "KPa",  1, 0,  100, 255, 0
      KPaTarg40     = scalar, U08,   30,  "KPa",  1, 0,  100, 255, 0
      KPaTarg60     = scalar, U08,   31,  "KPa",  1, 0,  100, 255, 0
      KPaTarg100    = scalar, U08,   32,  "KPa",  1, 0,  100, 255, 0
#endif

      TPSRPMTarg    = bits, U08,   92, [7:7],   "TPS", "RPM"
      TargetB1      = scalar, U08,   25,  "Raw Value", 1, 0, 0, 255, 0
      TargetB2      = scalar, U08,   26,  "Raw Value", 1, 0, 0, 255, 0
      TargetB3      = scalar, U08,   27,  "Raw Value", 1, 0, 0, 255, 0
      TargetB4      = scalar, U08,   28,  "Raw Value", 1, 0, 0, 255, 0

; Added for Enhanced stuff

; Target AFR 8 x 8 table
        AfrTar        = bits,   U08,    46,[7:7], "Off*^(DT)", "On"
        AfrTar2       = bits,   U08,    92,[1:1], "Off*^(DT)", "On"
#if MPXH6300A
        EgoLimKPa     = scalar, U08,    39, "KPa",  1.213675,  1.53, 0, 304.0, 0
#elif MPXH6400A
        EgoLimKPa     = scalar, U08,    39, "KPa",  1.6197783,   2.147,  20.0,  400.0,     0
#else
        EgoLimKPa     = scalar, U08,    39, "KPa",  1, 0, 0, 255, 0
#endif
        EgoLim2       = scalar, U08,    40, "+-",   1, 0, 0, 100, 0
        KpaTPSTar     = bits,   U08,    109,[4:4],  "Speed Density", "Alpha-N"
        TPSTar        = bits,   U08,    109,[5:5],  "Always", "Above TPS Setpoint"
        TPSAFRPoint   = scalar, U08,    121, "Raw ADC", 1, 0, 0, 255, 0

; More Launch Stuff
      LachTps          = scalar, U08,    41,       "Raw ADC",     1, 0, 0, 255, 0
      LachDeg          = scalar, U08,    42,       "Deg",         0.352, -28.4, -10, 45, 0
      LachRpm          = scalar, U08,    43,       "RPM",         100, 0, 0, 6000, 0
      VLaunch          = bits,   U08,    46,[1:1],  "Off", "On"
      LC_flatsel       = scalar, U08,   124,       "RPM",         100, 0, 0, 25500, 0
        LC_flatlim       = scalar, U08,   128,       "RPM",         100, 0, 3000, 6000, 0
        LC_f_slim        = scalar, U08,   140,       "RPM",         100, 0, 3000, 6000, 0
      LC_f_limangle    = scalar, U08,   141,       "Deg",         0.352, -28.4, -10, 45, 0
; Over Boost Protection

#if MPXH6300A
      OvrBKpa          = scalar, U08,    44,        "KPa",      1.213675,  1.53, 0, 304.0, 0
#elif MPXH6400A
       OvrBKpa          = scalar, U08,    44,        "KPa",  1.6197783,   2.147,  20.0,  400.0,  0
#elif KPa
      OvrBKpa          = scalar, U08,    44,        "KPa",       1, 0, 100, 255, 0
#else
      OvrBKpa          = scalar, U08,    44,        "PSI",     0.147, -100, -15, 23, 1
#endif


; Coolant / Iat Related Ignition
        CltAdv           = bits,   U08,     46,[2:2], "Off", "On"
   #if CELSIUS
        IgAdvDeg         = scalar, U08,     48,       "C",     0.555, 0, 0, 100, 1
        IgAdvTemp        = scalar, U08,     47,        "C",     0.555, -72, -40, 70, 1
        IgRetDeg         = scalar, U08,     50,       "C",     0.555, 0, 0, 102, 1
        IgRetTemp        = scalar, U08,     52,       "C",     0.555, -72, -40, 102, 1
   #else
        IgAdvDeg         = scalar, U08,     48,       "F",      1,   0,   0, 120, 1
        IgAdvTemp        = scalar, U08,     47,       "F",      1, -40, -10, 120, 1
        IgRetDeg         = scalar, U08,     50,       "F",      1,   0,   0, 120, 1
        IgRetTemp        = scalar, U08,     52,       "F",      1, -40, -10, 120, 1
   #endif

        MaxIatAdv        = scalar, U08,     49,       "Deg",    0.352,0,  0, 15, 1
   #if MPXH6300A
        IatAdvKpa        = scalar, U08,     51,       "KPa",    1.213675,  1.53, 0, 304.0, 0
   #elif MPXH6400A
        IatAdvKpa        = scalar, U08,     51,       "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #else
        IatAdvKpa        = scalar, U08,     51,       "KPa",    1, 0, 0, 255, 0
   #endif

;  KNOCK DETECTOR SETTINGS
        KnockOn          = bits,   U08,    46,[6:6], "Off","On"
        KnockRpm         = scalar, U08,    53,        "RPM",    100, 0, 0, 12000, 0

   #if MPXH6300A
        KnockKpa         = scalar, U08,    55,        "KPa",   1.213675,  1.53, 0, 304.0, 0
   #elif MPXH6400A
        KnockKpa         = scalar, U08,    55,        "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #else
        KnockKpa         = scalar, U08,    55,        "KPa",   1, 0, 0, 255, 0
   #endif

        KnockRpmL        = scalar, U08,    54,        "RPM",  100, 0, 0,  12000, 0
        KnockRet         = scalar, U08,    56,        "Deg",   0.352, 0, 0, 10, 0
        KnockSb          = scalar, U08,    57,        "Deg",   0.352, 0, 0, 10, 0
        KnockMax         = scalar, U08,    59,        "Deg",   0.352, 0, 1, 30, 0
        KnockAdv         = scalar, U08,    58,        "Deg",   0.352, 0, 0, 20, 0
        KnockTim         = scalar, U08,    60,        "Sec",   1, 0, 1, 10, 0

   #if MPXH6300A
        KnockBoost       = scalar, U08,   107,        "KPa",   1.213675,  1.53, 0, 304.0, 0
        BoostMaxKn       = scalar, U08,   108,        "KPa",   1.213675,  1.53, 0, 304.0, 0
   #elif MPXH6400A
        KnockBoost       = scalar, U08,   107,        "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
        BoostMaxKn       = scalar, U08,   108,        "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #elif KPa
        KnockBoost       = scalar, U08,   107,        "KPa",   1, 0, 0, 155, 0
        BoostMaxKn       = scalar, U08,   108,        "KPa",   1, 0, 0, 155, 0
   #else
        KnockBoost       = scalar, U08,   107,        "PSI",   0.147, 0, 0, 20, 0
        BoostMaxKn       = scalar, U08,   108,        "PSI",   0.147, 0, 0, 20, 0

   #endif

;  WATER INJECTION SETTINGS
      WaterInj            = bits,   U08,    46,[3:3], "Off*", "On"
      WaterIRpm           = scalar, U08,    63,       "RPM",   100, 0, 0, 12000, 0

   #if MPXH6300A
      StartWIKPa          = scalar, U08,    62,      "KPa",     1.213675,  1.53, 0, 304.0, 0
   #elif MPXH6400A
      StartWIKPa          = scalar, U08,    62,       "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #elif KPa
      StartWIKPa          = scalar, U08,    62,      "KPa",    1, 0, 0, 255, 0
   #else
      StartWIKPa          = scalar, U08,    62,      "PSI",    0.147, -100, 0, 20, 0
   #endif

   #if CELSIUS
      WaterIIat           = scalar, U08,    61,       "C",     0.555, -72, -40, 102, 1
   #else
      WaterIIat           = scalar, U08,    61,       "F",     1, -40, -10, 120, 1
   #endif
;  OPEN LOOP MODE
      OLoopEgo            = bits,   U08,    46,[0:0], "TPS", "KPa"

   #if MPXH6300A
      KPaOn               = scalar, U08,    64,      "KPa", 1.213675,  1.53, 0, 304.0, 0
   #elif MPXH6400A
       KPaOn               = scalar, U08,    64,       "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #else
      KPaOn               = scalar, U08,    64,      "KPa",  1, 0, 0,  255, 0
   #endif

      TpsOn               = scalar, U08,    65,      "Raw",  1, 0, 0, 255, 0
;  HARD CUT TYPE SETTINGS FOR REV LIMITER AND LAUNCH AND OVER BOOST
        HCutType         = bits,   U08,    46,[4:5], "INVALID", "Spark Cut Only", "Fuel Only", "Fuel & Spark"
        HCutSpark        = scalar, U08,    45,      "Sparks",    1,0, 0, 20, 0
        HCutLCType       = bits,   U08,    76,[0:1], "INVALID", "Spark Cut Only", "Fuel Only", "Fuel & Spark"
        HCutLCSpark      = scalar, U08,    77,      "Sparks",    1, 0, 0, 20, 0
        SparkCutBase     = scalar, U08,    78,      "Sparks",    1, -1, 5, 20, 0  ; -1 to Value
        OvrBCutType      = bits,   U08,    76,[4:5], "INVALID", "Spark Cut Only", "Fuel Only", "Fuel & Spark"
        SparkCutBNum     = scalar, U08,    84,      "Sparks", 1, 0, 0, 20, 0
;  Output Inverters

        InvOut1          = bits,   U08,    66,[1:1],  "Normal", "Inverted"
        InvOut2          = bits,   U08,    66,[2:2],  "Normal", "Inverted"
        Out1UpLim        = scalar, U08,    88,       "raw byte or deg F +40", 1, 0, 0, 255, 0
        Out2UpLim        = scalar, U08,    89,       "raw byte or deg F +40", 1, 0, 0, 255, 0
; EDIS multi-spark
        edismulti        = bits,   U08,    66,[3:3],  "Off*^", "On"

; Nitrous System
        NosRpm = scalar, U08, 23, "RPM",   100, 0, 1000, 25000, 0
        NosTps = scalar, U08, 67, "Raw",   1, 0, 0, 255, 0
   #if CELSIUS
        NosClt = scalar, U08, 22, "C",     0.555, -72, -40, 102, 1
   #else
        NosClt = scalar, U08, 22, "F",     1, -40, -10, 120, 1
   #endif
        NosAngle = scalar, U08, 68, "Deg",  0.352, 0, 0, 30, 0
        NosPWLo  = scalar, U08, 69, "mSec",  0.1, 0, 0, 25.5, 1
        NosPWHi  = scalar, U08, 70, "mSec",  0.1, 0, 0, 25.5, 1
        nitrousUse  = bits,   U08,   11,  [7:7], "Off*", "On"
        NosRpmMax = scalar, U08, 24, "RPM", 100, 0, 3000, 25000, 0
        DtNos =     bits,   U08, 66,[5:5], "Bank1", "Bank2"
        NosLagSystem = bits, U08, 76,[6:6], "Off", "On"
   #if MPXH6300A
        NosLowKpa = scalar, U08, 85, "KPa", 1.213675,  1.53, 0, 304.0, 0
        NosHiKpa = scalar, U08, 86, "KPa", 1.213675,  1.53, 0, 304.0, 0
  #elif MPXH6400A
       NosLowKpa = scalar, U08, 85,    "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
       NosHiKpa = scalar,  U08, 86,    "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #else
        NosLowKpa = scalar, U08, 85, "KPa", 1, 0, 0, 255
        NosHiKpa = scalar, U08, 86, "KPa", 1, 0, 0, 255
   #endif
;      n2ostage2    = bits,   U08,    ??where??, "Off", "Stage2 on"



;nitrous/launch
        N2Odel_launch    = scalar, U08,   157,       "s",         0.01, 0, 0, 2.55, 2
        N2Odel_flat      = scalar, U08,   158,       "s",         0.01, 0, 0, 2.55, 2
        N2Oholdon        = scalar, U08,   159,       "s",         0.01, 0, 0, 2.55, 2

;wheel decoder
        numteeth = scalar, U08, 90, "", 1, 0, 0, 255
        trig1    = scalar, U08, 25, "", 1, 0, 0, 255
        trig2    = scalar, U08, 26, "", 1, 0, 0, 255
        trig3    = scalar, U08, 27, "", 1, 0, 0, 255
        trig4    = scalar, U08, 28, "", 1, 0, 0, 255
        trig1ret = scalar, U08, 29, "", 1, 0, 0, 255
        trig2ret = scalar, U08, 30, "", 1, 0, 0, 255
        trig3ret = scalar, U08, 31, "", 1, 0, 0, 255
        trig4ret = scalar, U08, 32, "", 1, 0, 0, 255

        trig5    = scalar, U08, 145, "", 1, 0, 0, 255
        trig6    = scalar, U08, 146, "", 1, 0, 0, 255
        trig5ret = scalar, U08, 147, "", 1, 0, 0, 255
        trig6ret = scalar, U08, 148, "", 1, 0, 0, 255

        miss2nd  = bits, U08, 66,[0:0], "no missing", "missing teeth"
        dualdizzy = bits,    U08,  92, [4:4], "Normal", "Dual dizzy"

;  OVER RUN FUEL CUT SETTINGS
        OvrRunC          = bits,   U08,    66,[6:6],   "Off","On"
        OvrRunRpm        = scalar, U08,    71,        "RPM",     100, 0, 1000, 6000, 0

   #if CELSIUS
        OvrRunClt        = scalar, U08, 182,   "C",  0.555,  -72,  -40,  102, 0
   #else
        OvrRunClt        = scalar, U08, 182,   "F",  1,  -40,  -40,  215, 0
   #endif

   #if MPXH6300A
        OvrRunKpa         = scalar, U08,    72,        "KPa",    1.213675,  1.53, 0, 304.0, 0
   #elif MPXH6400A
         OvrRunKpa        = scalar, U08,    72,        "KPa",    1.6197783,   2.147,  20.0,  400.0,  0
   #else
        OvrRunKpa        = scalar, U08,    72,        "KPa",     1, 0, 0, 255, 0
   #endif
        OvrRunTps        = scalar, U08,    73,        "Raw ADC", 1, 0, 0, 255, 0
        OvrRunTimr       = scalar, U08,    130,       "Sec", 1, 0, 0, 255, 0


; Accel Dot Settings
      AccDecEnrich        = bits,   U08,    66,[7:7], "TPSdot*^(DT)", "MAPdot"
      KPaDotBoost         = bits,   U08,    66,[4:4], "Never",  "In Boost"
      DecayAccel          = bits,   U08,    116,[6:6], "None*^(DT)", "Decay"
      DecayAcPoint        = scalar, U08,    183, "mS", 0.1, 0, 0, 25.5, 1


; Electric Fan control (X2) - can't be used with water inj
   #if CELSIUS
        efanontemp  = scalar, U08, 74, "C",     0.555, -72, -40, 102, 1
        efanofftemp = scalar, U08, 75, "C",     0.555, -72, -40, 102, 1
   #else
        efanontemp  = scalar, U08, 74, "F",     1, -40, -40, 215, 1
        efanofftemp = scalar, U08, 75, "F",     1, -40, -40, 215, 1
   #endif
; STAGED INJECTION
       IStagedMode = bits,   U08, 76,[2:3],"Off*^","RPM-Based","MAP-Based","TPS-Based"
       ScaleFac    = scalar, U08, 79, "", 1.0,  0.0, 0, 255
       StgTrans    = scalar, U08, 80, "", 1.0,  0.0, 0, 255
       StgDelta    = scalar, U08, 81, "", 1.0,  0.0, 0, 255
       StagedMAP2nd = bits,  U08, 109,[6:6], "Off*^", "MAP-Based"
       StagedAnd    = bits,  U08, 109,[7:7], "One condition", "Both Conditions"
; BARO CORRECTION
#if MPXH6300A
       BarroHi     = scalar, U08, 82, "KPa", 1.213675,  1.53, 0, 304.0, 0
       BarroLow    = scalar, U08, 83, "KPa", 1.213675,  1.53, 0, 304.0, 0
 #elif MPXH6400A
       BarroHi     = scalar, U08, 82, "KPa",   1.6197783,   2.147,  20.0,  400.0,  0
       BarroLow    = scalar, U08, 83, "KPa",   1.6197783,   2.147,  20.0,  400.0,  0
#elif MPX4250
       BarroHi     = scalar, U08, 82, "KPa", 0.9837, 8, 10, 255
       BarroLow    = scalar, U08, 83, "KPa", 0.9837, 8, 10, 255
#else
       BarroHi     = scalar, U08, 82, "KPa", 0.433, 10, 10, 255
       BarroLow    = scalar, U08, 83, "KPa", 0.433, 10, 10, 255
#endif

      AlphBaroCor = bits,   U08,  184, [3:3],  "No", "Yes"
      AFMUse      = bits,   U08,  184, [5:5],  "No AFM *^", "AFM on X7"
      AirCorAFM   = bits,   U08,  184, [6:6],  "Use IAT", "Built into AFM"
      ConsBarCor  = bits,   U08,  184, [7:7],  "Not Fitted*^", "Extra MAP fitted to X7"

; Spark Table Selection
      STTable2On   = bits, U08, 76,[7:7], "Spark Table1^", "Spark Table2"
      ST2Delay     = scalar, U08, 87, "Sec", 0.1, 0, 0, 25,  1

; VE Table 3
      UseVE3       = bits, U08, 92,[0:0], "Dont switch*^(DT)", "Switch to Table3"
      VE3Delay     = scalar, U08, 93, "Sec", 0.1, 0, 0, 25, 1

; Traction Control
       TractionOn  = bits,    U08, 92,[5:5], "Off*^", "On"
       RPMThresh   = scalar,  U08, 98, "RPM/Sec",   1000, 0, 1000, 25000, 0
       RPM1S       = scalar,  U08, 94, "3000RPM/Sec or 5%Slip", 0.1, 0, 0, 20.0, 1
       RPM2S       = scalar,  U08, 95, "4000RPM/Sec or 15%Slip", 0.1, 0, 0, 20.0, 1
       RPM3S       = scalar,  U08, 96, "6000RPM/Sec or 30%Slip", 0.1, 0, 0, 20.0, 1
       RPM4S       = scalar,  U08, 97, "10000RPM/Sec or 70%Slip ", 0.1, 0, 0, 20.0, 1
       TractRet1   = scalar,  U08, 99, "3000RPM/Sec or 5%Slip",   0.352, 0, 0, 30, 0
       TractRet2   = scalar,  U08, 100, "4000RPM/Sec or 15%Slip",  0.352, 0, 0, 30, 0
       TractRet3   = scalar,  U08, 101, "6000RPM/Sec or 30%Slip",  0.352, 0, 0, 30, 0
       TractRet4   = scalar,  U08, 102, "10000RPM/Sec or 70%Slip",  0.352, 0, 0, 30, 0
       TractSC1    = scalar,  U08, 103, "3000RPM/Sec or 5%Slip",     1, 0, 0, 2, 0
       TractSC2    = scalar,  U08, 104, "4000RPM/Sec or 15%Slip",     1, 0, 0, 2, 0
       TractSC3    = scalar,  U08, 105, "6000RPM/Sec or 30%Slip",     1, 0, 0, 2, 0
       TractSC4    = scalar,  U08, 106, "10000RPM/Sec or 70%Slip",     1, 0, 0, 2, 0
       TractNOS    = bits,    U08, 109, [0:0], "No", "Yes"
       TractCyc1   = scalar,  U08, 112, "3000RPM/Sec or 5%Slip",  1, 0, 1, 255, 0
       TractCyc2   = scalar,  U08, 113, "4000RPM/Sec or 15%Slip",  1, 0, 1, 255, 0
               TractCyc3   = scalar,  U08, 114, "6000RPM/Sec or 30%Slip",  1, 0, 1, 255, 0
       TractCyc4   = scalar,  U08, 115, "10000RPM/Sec or 70%Slip",  1, 0, 1, 255, 0
       TractCySec  = bits,    U08, 109,[2:2], "RPM stable for 0.1S", "Cycle count only"
       TractScale  = scalar,  U08, 119, "%",             0.39216, 0, 0, 100, 0
       TractSlip   = scalar,  U08, 120, "%",             0.39216, 0, 0, 100, 0
       TractVSSMax = scalar,  U08, 118, "V",             0.0196, 0, 0, 5, 2
       TractVSSMin = scalar,  U08, 117, "V",             0.0196, 0, 0, 5, 2
       TractMode   = bits,    U08, 109, [3:3], "RPM Based", "Vehicle Speed Sensors"
       TractSlipH  = scalar,  U08, 123, "%",             0.39216, 0, 0, 100, 0

;Advanced options for testing
       falsetrig_dis = bits,    U08,  92, [2:2], "Enabled*", "Disabled"
       wheel_old   = bits,    U08,  92, [3:3], "025 style", "024s9 style"

;Dwell control
;running dwell variable railed to 8 - who needs more than 8ms?
;mindischarge railed to 1.5ms. ought to be max 1ms I guess? Normal value say 0.1ms
         dwellcont       = bits,    U08, 109, [1:1], "Fixed duty*^", "Dwell control"
         dwellcrank  = scalar,  U08, 110, "ms",  0.1, 0, 0, 25, 1
         dwellrun    = scalar,  U08, 111, "ms",  0.1, 0, 0, 8, 1
       mindischg   = scalar,  U08, 143, "ms",  0.1, 0, 0, 1.5, 1

;pwm idle stuff was in here

         tachconf    = bits,  U08, 144,[0:2], "OFF","X2 (JS0)","X3 (JS1)","X4 (JS2)","X5 (JS3)","Output3","Pin10","INVALID"
         tachconfdiv = bits,  U08, 144,[7:7], "Normal", "Half speed"

  #if MPXH6300A
       bc_max_diff = scalar,  U08, 125, "kPa", 1.213675,    1.53,     0, 304.0, 0
       DecelKPa    = scalar,  U08, 129, "kPa", 1.213675,    1.53,     0, 304.0, 0
       Pambient    = scalar,  U08, 185, "kPa", 1.213675,    1.53,     0, 304.0, 0
  #elif MPXH6400A
       bc_max_diff = scalar,  U08, 125, "kPa", 1.6197783,   2.147, 20.0, 400.0, 0
       DecelKPa    = scalar,  U08, 129, "kPa", 1.6197783,   2.147, 20.0, 400.0, 0
       Pambient    = scalar,  U08, 185, "kPa", 1.6197783,   2.147, 20.0, 400.0, 0
  #else
       bc_max_diff = scalar,  U08, 125, "kPa", 1.0,           0.0,  0.0, 255.0, 0
       DecelKPa    = scalar,  U08, 129, "kPa", 1.0,           0.0,  0.0, 255.0, 0
       Pambient    = scalar,  U08, 185, "kPa", 1.0,           0.0,  0.0, 255.0, 0
  #endif

       DecelBoost = bits,    U08, 92, [7:7], "Never*^",  "Above KPa Setpoint"

; More Boost Controller Stuff
#if CELSIUS
       IATBoostSt = scalar, U08, 135,  "C",     0.555, -72, -40, 100, 1
       IATBoost   = scalar, U08, 136,  "C",     0.555, 0, 0, 102, 1
       TPSBooIAT  = scalar, U08, 137,  "Raw ADC", 1, 0, 0, 255, 0
#else
        IATBoostSt = scalar, U08, 135,  "F",     1, -40, -10, 120, 1
        IATBoost = scalar, U08, 136,  "F",      1,   0,   0, 120, 1
        TPSBooIAT  = scalar, U08, 137,  "Raw ADC", 1, 0, 0, 255, 0
#endif
        BooTbl2Use = bits, U08, 116,  [2:2], "Dont Switch*^", "Targets 2"

; MAPdot and ACCEL WIZARD STUFF

        mapThresh4 = scalar, U08, 91, "kPa/s",  10,  0,  0,  2550, 0
        taeRates4  = array,  U08,  161,[    4], "Volt/s",       0.1960784,       0.0,   0.0,    25.5,      1
        maeRates4  = array,  U08,  165,[    4], "kPa/s",       10,       0.0,   0.0,    2550,      0
        maeBins4   = array,  U08,  169,[    4], "ms",       0.1,       0.0,   0.0,    25.5,      1
        taeBins4   = array,  U08,     173,[    4], "ms",       0.1,       0.0,   0.0,    25.5,      1
      taeColdA4  = scalar, U08,     177,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      tpsThresh4 = scalar, U08,     178,         "v/s",  0.1953125,       0.0,   0.2,    49.8,      3
      taeTime4   = scalar, U08,     179,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      tdePct4    = scalar, U08,     180,         "%",        1.0,       0.0,   0.0,   255.0,      0
      taeColdM4  = scalar, U08,     181,        "%",         1.0,       0.0,   0.0,   250.0,      0
      mapProportion4 = bits,   U08,    66,[7:7], "TPSdot*^(DT)", "MAPdot"

      AccelMapASE = bits,   U08,  184, [2:2],   "Normal*^", "Off during ASE"
      RPMBAsedAE   = bits, U08,     184,[4:4], "Normal AE*^", "RPM Based"
;???curve table
      RPMAE1   = scalar, U08, 152, "RPM", 100, 0, 100, 25500,  0   ; RPM based AE stuff
      RPMAE2   = scalar, U08, 151, "RPM", 100, 0, 100, 25500,  0
      RPMAE3   = scalar, U08, 150, "RPM", 100, 0, 100, 25500,  0
      RPMAE4   = scalar, U08, 149, "RPM", 100, 0, 100, 25500,  0

      RPMmS1   = scalar, U08, 153, "mS", 0.1, 0, 0, 25.5, 1
      RPMmS2   = scalar, U08, 154, "mS", 0.1, 0, 0, 25.5, 1
      RPMmS3   = scalar, U08, 155, "mS", 0.1, 0, 0, 25.5, 1
      RPMmS4   = scalar, U08, 156, "mS", 0.1, 0, 0, 25.5, 1

   page = 5
      advTable2  = array,  U08,       0,[12x12], "deg",   0.352,   -28.4,   -10.0,    80.0,      0
      rpmBins4   = array,  U08,     144,[   12], "RPM",   100.0,     0.0,   100,   25500,      0

#if SPEED_DENSITY
 #if MPXH6300A
      mapBins4   = array,  U08,     156, [ 12],  "kPa",  1.213675,  1.53,  20.0,  304.0,  0
 #elif MPXH6400A
      mapBins4   = array,  U08,     156, [ 12],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
      mapBins4   = array,  U08,     156, [ 12], "kPa",     1.0,     0.0,   0.0,   255.0,      0
 #endif
 #elif AIR_FLOW_METER
      afmBins4   = array, U08,      156, [12], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

   #elif ALPHA_N
      tpsBins4   = array,  U08,     156, [ 12], "TPS",        1.0,      0.0,   0.0,   255.0,      0
   #endif




   page = 6
      veBins3    = array,  U08,       0, [12x12], "%",       1.0,      0.0,   0.0,   255.0,      0
      rpmBins5   = array,  U08,     144, [  12], "RPM",   100.0,      0.0,   100,   25500,      0

#if SPEED_DENSITY
 #if MPXH6300A
      mapBins5   = array,  U08,     156, [ 12],  "kPa", 1.213675,  1.53,  20.0,  304.0,    0
 #elif MPXH6400A
      mapBins5   = array,  U08,     156, [ 12],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
      mapBins5   = array,  U08,     156, [ 12], "kPa",     1.0,      0.0,   0.0,   255.0,      0
 #endif
 #elif AIR_FLOW_METER
      afmBins5   = array, U08,      156, [12], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

 #elif ALPHA_N
      tpsBins5   = array,  U08,     156, [ 12], "TPS",        1.0,      0.0,   0.0,   255.0,      0
 #endif

      ASETable1   = scalar, U08, 168,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable2   = scalar, U08, 169,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable3   = scalar, U08, 170,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable4   = scalar, U08, 171,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable5   = scalar, U08, 172,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable6   = scalar, U08, 173,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable7   = scalar, U08, 174,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable8   = scalar, U08, 175,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable9   = scalar, U08, 176,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETable10  = scalar, U08, 177,        "%",  1.0, 0.0, 0.0, 255, 0
      ASETime     = scalar, U08, 178,        "",   1.0, 0.0, 0.0, 255, 0
      aseIgnCount = bits,   U08, 179, [0:0], "Cycles*^", "Sec"
      ASEFixDe    = bits,   U08, 179, [1:1], "Decay *^", "Fixed then Decay"
      ASEFixTim   = scalar, U08, 180,        "",   1.0, 0.0, 0.0, 255, 0

#if CELSIUS
       ASEFixTemp   = scalar, U08,    181,  "C",     0.555, -72, -40, 100, 1
#else
       ASEFixTemp   = scalar, U08,    181,  "F",     1, -40, -10, 120, 1
#endif
       VEFixASE    = bits, U08,     179, [2:2], "Normal MAP *^", "Fixed MAP"

 #if MPXH6300A
       VEFixValue  = scalar, U08,     182,   "kPa",  1.213675,  1.53,  20.0,  304.0,  0
 #elif MPXH6400A
       VEFixValue  = scalar, U08,     182,   "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
       VEFixValue  = scalar, U08,     182,   "kpa",      0.965,      9,    0.0,     255.0,     0
 #endif


   page = 7     ; TARGET AFR table 1 BINS FOR VE 1 (First find which sensor used)

#if NARROW_BAND_EGO
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif WB_1_0_LINEAR
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif WB_UNKNOWN
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif AEM_LINEAR
      afrBins1   = array,  U08,      0,  [8x8],  "AFR",        0.03867, 251.0,    0.0,     19.57,   2
#elif AEM_NON_LINEAR
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif DIYWB_NON_LINEAR
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif DYNOJET_LINEAR
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0314,      0,    0.0,     5.0,     2
#elif TECHEDGE_LINEAR
       afrBins1   = array,  U08,     0,  [8x8],  "AFR",       0.0392,       229.0,    9.0,    19.0,     1
#elif INNOVATE_1_2_LINEAR
       afrBins1   = array,  U08,     0,  [8x8],  "AFR",       0.1961,       0,    10.0,   20.0,     1
#elif INNOVATE_0_5_LINEAR
       afrBins1   = array,  U08,     0,  [8x8],  "AFR",       0.0392,      255.0,    10.0,   20.0,     1
#elif INNOVATE_LC1_DEFAULT
       afrBins1   = array,  U08,     0,  [8x8],  "AFR",       0.057647,    127.5,    10.0,   20.0,     1
#elif ZEITRONIX_NON_LINEAR
      afrBins1   = array,  U08,      0,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#else
; Should never get here but just incase put message on screen
  #error "No O2 sensor configuration selected; Youll need to fix the settings.ini.\n\nMegaTune terminating."
  #exit ; Terminate MT
#endif

      rpmBins6   = array,  U08,    64,[  8], "RPM",    100.0,     0.0,   100,   25500,      0

#if SPEED_DENSITY
 #if MPXH6300A
      mapBins6   = array,  U08,     72, [ 8],  "kPa",  1.213675,  1.53,  20.0,  304.0,     0
 #elif MPXH6400A
     mapBins6   = array,  U08,     72,  [ 8],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
      mapBins6   = array,  U08,    72,  [ 8], "kPa",      1.0,     0.0,   0.0,   255.0,      0
 #endif
 #elif AIR_FLOW_METER
      afmBins6   = array, U08,      72, [8], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

   #elif ALPHA_N
      tpsBins6   = array,  U08,     72, [ 8], "TPS",        1.0,      0.0,   0.0,   255.0,      0
   #endif

               ; TARGET AFR table 2 BINS FOR VE 3 (First find which sensor used)
#if NARROW_BAND_EGO
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif WB_1_0_LINEAR
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif WB_UNKNOWN
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif AEM_LINEAR
      afrBins2   = array,  U08,      0,  [8x8],  "AFR",        0.03867,  251.0,    0.0,     19.57,   2
#elif AEM_NON_LINEAR
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif DIYWB_NON_LINEAR
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#elif DYNOJET_LINEAR
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0314,      0,    0.0,     5.0,     2
#elif TECHEDGE_LINEAR
       afrBins2   = array,  U08,     80,  [8x8],  "AFR",       0.0392,       229.0,    9.0,    19.0,     1
#elif INNOVATE_1_2_LINEAR
       afrBins2   = array,  U08,     80,  [8x8],  "AFR",       0.1961,       0,    10.0,   20.0,     1
#elif INNOVATE_0_5_LINEAR
       afrBins2   = array,  U08,     80,  [8x8],  "AFR",       0.0392,      255.0,    10.0,   20.0,     1
#elif INNOVATE_LC1_DEFAULT
       afrBins2   = array,  U08,     80,  [8x8],  "AFR",       0.057647,    127.5,    10.0,   20.0,     1
#elif ZEITRONIX_NON_LINEAR
      afrBins2   = array,  U08,      80,  [8x8],  "Volts",      0.0196,      0,    0.0,     5.0,     2
#else
   ; Should never get here but just incase put message on screen
   #error "No O2 sensor configuration selected; You need to fix the settings.ini.\n\nMegaTune terminating."
   #exit ; Terminate MT
#endif
      rpmBins7   = array,  U08,     144,[   8], "RPM",    100.0,     0.0,   100,   25500,      0

#if SPEED_DENSITY
 #if MPXH6300A
      mapBins7   = array,  U08,     152, [ 8],  "kPa",  1.213675,  1.53,  20.0,  304.0,  0
 #elif MPXH6400A
       mapBins7  = array,  U08,     152, [ 8],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
      mapBins7   = array,  U08,     152, [ 8], "kPa",      1.0,     0.0,   0.0,   255.0,      0
 #endif
 #elif AIR_FLOW_METER
      afmBins7   = array, U08,      152, [8], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

   #elif ALPHA_N
      tpsBins7   = array,  U08,     152, [ 8], "TPS",        1.0,      0.0,   0.0,   255.0,      0
   #endif

;nitrous stage 2
; Nitrous System
        Nos2Rpm   = scalar, U08, 160, "RPM",   100, 0, 1000, 25000, 0
        Nos2RpmMax= scalar, U08, 161, "RPM", 100, 0, 3000, 25000, 0
        Nos2delay = scalar, U08, 162, "s", 0.01, 0, 0, 2.55,2
        Nos2Angle = scalar, U08, 163, "Deg",  0.352, 0, 0, 30, 0
        Nos2PWLo  = scalar, U08, 164, "mSec",  0.1, 0, 0, 25.5, 1
        Nos2PWHi  = scalar, U08, 165, "mSec",  0.1, 0, 0, 25.5, 1

;oddfire wheel decoder
;outaoffs = bits,   U08, 166, [0:2], "0", "+22.5", "+45", "+67.5", "+90", "+112.5", "+135", "+157.5"
outaoffs = bits,   U08, 166, [0:2], "0", "INVALID", "+45", "INVALID", "+90", "INVALID", "INVALID", "INVALID"
outaoffv = scalar, U08, 167, "deg", 0.352,   0,   0,    45,      1

outboffs = bits,   U08, 168, [0:2], "0", "INVALID", "+45", "INVALID", "+90", "INVALID", "INVALID", "INVALID"
outboffv = scalar, U08, 169, "deg", 0.352,   0,   0,    45,      1

outcoffs = bits,   U08, 170, [0:2], "0", "INVALID", "+45", "INVALID", "+90", "INVALID", "INVALID", "INVALID"
outcoffv = scalar, U08, 171, "deg", 0.352,   0,   0,    45,      1

outdoffs = bits,   U08, 172, [0:2], "0", "INVALID", "+45", "INVALID", "+90", "INVALID", "INVALID", "INVALID"
outdoffv = scalar, U08, 173, "deg", 0.352,   0,   0,    45,      1

outeoffs = bits,   U08, 174, [0:2], "0", "INVALID", "+45", "INVALID", "+90", "INVALID", "INVALID", "INVALID"
outeoffv = scalar, U08, 175, "deg", 0.352,   0,   0,    45,      1

outfoffs = bits,   U08, 176, [0:2], "0", "INVALID", "+45", "INVALID", "+90", "INVALID", "INVALID", "INVALID"
outfoffv = scalar, U08, 177, "deg", 0.352,   0,   0,    45,      1

 page = 8      ; boost controller targets
      ;target kpa

 #if MPXH6300A
      bcBins1   = array,  U08,        0, [ 6x6],  "kPa",  1.213675,  1.53,  20.0,  304.0,  0
      bcBins3   = array,  U08,        96, [ 6x6],  "kPa",  1.213675,  1.53,  20.0,  304.0,  0
 #elif MPXH6400A
      bcBins1   = array,    U08,     0, [ 6x6],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
      bcBins3   = array,    U08,     96, [ 6x6],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
      bcBins1     = array,  U08,      0,  [6x6],  "kpa",      1,      0,    0.0,     255.0,     0
      bcBins3     = array,  U08,      96,  [6x6],  "kpa",      1,      0,    0.0,     255.0,     0
 #endif

      bcrpmBins1  = array,  U08,      36,[ 6], "RPM",    100.0,     0.0,   100,   25500,      0
      bctpsBins1  = array,  U08,      42,[ 6], "tps%",     0.392,     0.0,   0.0,   100.0,      0
      ;default duty cycle
      bcBins2     = array,  U08,      48,  [6x6],  "duty",    0.392,      0,    0.0,    100.0,     0
      bcrpmBins2  = array,  U08,      84,[ 6], "RPM",    100.0,     0.0,   100,   25500,      0
      bctpsBins2  = array,  U08,      90,[ 6], "tps%",      0.392,     0.0,   0.0,   100.0,      0
      bcrpmBins3  = array,  U08,      132,[ 6], "RPM",    100.0,     0.0,   100,   25500,      0
      bctpsBins3  = array,  U08,      138,[ 6], "tps%",     0.392,     0.0,   0.0,   100.0,      0


page = 9   ; idle control and other bits ripped out of lower pages for more space
       idle_dc_lo  = scalar,  U08, 000, "dc", 1, 0, 0, 255, 0
       idleperiod  = scalar,  U08, 001, "x 0.01sec",  1, 0, 0, 255, 0
       idlecrankdc      = scalar,  U08, 002, "dc", 1, 0, 0, 255, 0              ;kg
       idledelayclock   = scalar,  U08, 003, "x 0.01sec", 1, 0, 0, 255, 0       ;kg
       idledashdc  = scalar,  U08, 004, "dc", 1, 0, 0, 255, 0
       idlemindc   = scalar,  U08, 005, "dc", 1, 0, 0, 255, 0
       idle_dc_hi  = scalar,  U08, 006, "dc", 1, 0, 0, 255, 0
       ictlrpm1         = scalar,  U08, 007, "lo RPM", 10, 0, 0, 2500, 0        ;kg
       ictlrpm2         = scalar,  U08, 008, "hi RPM", 10, 0, 0, 2500, 0        ;kg
       Ideadbnd         = scalar,  U08, 009, "+/- RPM", 10, 0, 0, 2500, 0       ;kg
       Idashdelay       = scalar,  U08, 010, "x 0.01sec", 1, 0, 0, 255, 0       ;kg
       idlefreq    = scalar,  U08, 011, "10000/x = Frequency", 1, 0, 0, 255, 0
       idlestartclk     = scalar,  U08, 012, "x 0.01sec", 1, 0, 0, 255, 0       ;kg
       idlePeriod2 = scalar,  U08, 013, "x 0.01sec",  1, 0, 0, 255, 0
       irestorerpm = scalar,  U08, 014, "RPM", 10, 0, 100, 6000, 0
       idleclosedc  = scalar,  U08, 015, "dc", 1, 0, 0, 255, 0
       pwmIdle     = bits,    U08, 016,[0:0], "B&G On-Off*^", "PWM"
       pwmidlewhen = bits,    U08, 016,[1:2], "INVALID", "Warmup only", "Closed loop only", "INVALID"
       IATCor    = bits, U08,      016,[3:3], "Normal Correction*^", "Corrected"
       IATCorTy  = bits, U08,      016,[4:4],  "Coolant Corrected", "IAT Corrected"

   #if CELSIUS
      fastIdleTemp = scalar, U08,   17,        "C",       0.555,   -72.0,    -40,     102
      slowIdleTemp = scalar, U08,   18,        "C",       0.555,   -72.0,    -40,     102
   #else
      fastIdleTemp = scalar, U08,   17,        "F",         1.0,   -40.0,    -40,     215
      slowIdleTemp = scalar, U08,   18,        "F",         1.0,   -40.0,    -40,     215
   #endif
      fastIdleRPM  = scalar, U08,   19,        "RPM",       10.0,     0.0,     10,    2550
      slowIdleRPM  = scalar, U08,   20,        "RPM",       10.0,     0.0,     10,    2550
      ; For TPS from ADC, use scale=100/(max-min) and tra=-min
      ;  100/(225-26) = 0.502, -26, might just be best to leave it in ADC...
;      idleThresh   = scalar, U08,   21,        "%",        0.502,   -26.0,    0.0,     255
      idleThresh   = scalar, U08,   21,        "ADC",        1, 0, 0, 255, 0

;???curve
      wueBins9    = array,  U08,     22,[   10], "%",        1.0,       0.0,   0.0,   255.0,      0

;???curve
      CrankPWT1   = scalar,   U08,    32,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT2   = scalar,   U08,    33,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT3   = scalar,   U08,    34,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT4   = scalar,   U08,    35,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT5   = scalar,   U08,    36,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT6   = scalar,   U08,    37,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT7   = scalar,   U08,    38,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT8   = scalar,   U08,    39,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT9   = scalar,   U08,    40,  "mS",    0.1,  1,  0,   25.5, 1
      CrankPWT10  = scalar,   U08,    41,  "mS",    0.1,  1,  0,   25.5, 1

; Priming SETTINGS
      AlwaysPrime  = bits, U08, 42,[0:0], "Prime Pulse>0*^", "Always"
      PrimeLate    = bits, U08, 42,[1:2], "Power Up*^", "INVALID", "Twice","After 2 Secs"
      PrimeTBox    = bits, U08, 42,[3:3], "Priming Table", "Standard Prime"
; CLT vs MAT for cranking pulse width
        crankpwip  = bits,   U08,  42,  [4:5], "INVALID", "CLT only*^", "MAT only", "CLT,MAT average"
      ExFuelCrank = bits,  U08,  42,  [6:6], "Off", "On"

      CrankRPM      = scalar, U08,   43,  "rpm", 100.0,  0.0, 100, 1000, 0
      tpsflood    = scalar,  U08,   44, "raw", 1.0,     0.0,   0.0,   255.0,      0
      PrimePulse  = scalar,  U08,   45, "mS",  0.1,     0.0,   0.0,   25.5,   1
      ExtraFMult  = scalar,  U08,   46, "%",   1.0,   0.0,  0.0,  255, 0

; Coolant related correction table for air density
       IATCorS  = array , U08,     47, [7], "%", 1.0, 0.0, 50, 150, 0
; Coolant related correction table for air density
;       IATCor1  = scalar, U08,     47, "%", 1.0, 0.0, 0.0, 255, 0
;       IATCor2  = scalar, U08,     48, "%", 1.0, 0.0, 0.0, 255, 0
;       IATCor3  = scalar, U08,     49, "%", 1.0, 0.0, 0.0, 255, 0
;       IATCor4  = scalar, U08,     50, "%", 1.0, 0.0, 0.0, 255, 0
;       IATCor5  = scalar, U08,     51, "%", 1.0, 0.0, 0.0, 255, 0
;       IATCor6  = scalar, U08,     52 "%", 1.0, 0.0, 0.0, 255, 0
;       IATCor7  = scalar, U08,     53, "%", 1.0, 0.0, 0.0, 255, 0

       RPMRedLo  = scalar, U08, 54, "RPM", 100, 0.0, 0.0, 25500, 0
       RPMRedHi  = scalar, U08, 55, "RPM", 100, 0.0, 0.0, 25500, 0

#if CELSIUS
       IATCTemp   = array , U08,     56, [7], "C", 0.555, -72, -72, 102, 0
#else
       IATCTemp   = array , U08,     56, [7], "F", 1.0, -40.0, -40, 215, 0
#endif
;#if CELSIUS
;       IATCTemp1  = scalar, U08,     56, "C", 0.555, -72, -40, 102, 1
;       IATCTemp2  = scalar, U08,     57, "C", 0.555, -72, -40, 102, 1
;       IATCTemp3  = scalar, U08,     58, "C", 0.555, -72, -40, 102, 1
;       IATCTemp4  = scalar, U08,     59, "C", 0.555, -72, -40, 102, 1
;       IATCTemp5  = scalar, U08,     60, "C", 0.555, -72, -40, 102, 1
;       IATCTemp6  = scalar, U08,     61, "C", 0.555, -72, -40, 102, 1
;       IATCTemp7  = scalar, U08,     62, "C", 0.555, -72, -40, 102, 1
;#else
;       IATCTemp1  = scalar, U08,     56, "F", 1.0, -40.0, -40.0, 215, 1
;       IATCTemp2  = scalar, U08,     57, "F", 1.0, -40.0, -40.0, 215, 1
;       IATCTemp3  = scalar, U08,     58, "F", 1.0, -40.0, -40.0, 215, 1
;       IATCTemp4  = scalar, U08,     59, "F", 1.0, -40.0, -40.0, 215, 1
;       IATCTemp5  = scalar, U08,     60, "F", 1.0, -40.0, -40.0, 215, 1
;       IATCTemp6  = scalar, U08,     61, "F", 1.0, -40.0, -40.0, 215, 1
;       IATCTemp7  = scalar, U08,     62, "F", 1.0, -40.0, -40.0, 215, 1
;#endif

      splitTable   = array,  U08,      63, [6x6],  "deg", 0.352,   -28.4,    -10.0,   80.0,     0
      splitrpmBins = array, U08,      99,  [ 6], "RPM",    100.0,     0.0,   100,   25500,      0
#if SPEED_DENSITY
 #if MPXH6300A
      splitkpaBins = array, U08,     105, [ 6],  "kPa",  1.213675,  1.53,  20.0,  304.0,  0
 #elif MPXH6400A
      splitkpaBins = array, U08,     105, [ 6],  "kPa",   1.6197783,   2.147,  20.0,  400.0,  0
 #else
      splitkpaBins = array, U08,      105,  [6],  "kpa",      1,      0,    0.0,     255.0,     0
 #endif
 #elif AIR_FLOW_METER
      splitafmBins   = array, U08,      105, [6], "AFM Volts",    0.01961, 0.0,  0.0,  5.0, 2

#elif ALPHA_N
      splittpsBins   = array,  U08,   105, [ 6], "TPS",        1.0,      0.0,   0.0,   255.0,      0
#endif

      rotary2       = bits,   U08,   111,  [0:0], "Off",  "On"
        fixedsplit        = scalar,   U08,      112,  "deg", 0.352,   -28.4,    -10.0,   30.0,  0

; uncomment the following if you want to be able to save logged trigger or teeth into an MSQ
; file for onward processing. Normally best to leave commented.
;Didn't seem to work as-is with b730
;page = 10
;??;      blob10 = array, U08, 0, [189]
;      toothlog = array, U16, 0, [93]
;      toothpos = scalar, U08, 186, "", 1,0,0,255
;      toothscale = scalar, U08, 187,"", 1,0,0,255
;page = 11
;      triggerlog = array, U16, 0, [93]
;      triggerpos = scalar, U08, 186, "", 1,0,0,255
;      triggerscale = scalar, U08, 187,"", 1,0,0,255
;-------------------------------------------------------------------------------


[CurveEditor]
   curve = clt_IATCorrC, "Coolant corrected Air Density, see Settings", 9
      topicHelp = airdenHelp
      columnLabel = "Temp", "Offset"
      xBins       = IATCTemp, coolant
      yBins       = IATCorS
      gauge       = cltGauge      ; ***** change this to matGauge if you use IAT
#if CELSIUS
      xAxis       = -40, 100, 15
#else
      xAxis       = -40, 220, 14
#endif
      yAxis       = 50,  150, 11

[TableEditor]
   ;       table_id,    map3d_id,    "title",      page
   table = veTable1Tbl, veTable1Map, "VE Table 1", 1
          ;   constant, variable
      xBins = rpmBins1, rpm
#if SPEED_DENSITY
      yBins = mapBins1, map

#elif AIR_FLOW_METER
      yBins = afmBins1, MAFVolts
#elif ALPHA_N
        yBins = tpsBins1, tpsADC
#endif
      zBins = veBins1
      gridHeight  = 1.0
      upDownLabel = "(RICHER)", "(LEANER)"

   table = veTable2Tbl, veTable2Map, "VE Table 2 (DT)", 2
      xBins = rpmBins2, rpm
#if SPEED_DENSITY
      yBins = mapBins2, map
#elif AIR_FLOW_METER
      yBins = afmBins2, MAFVolts

#elif ALPHA_N
        yBins = tpsBins2, tpsADC
#endif
      zBins = veBins2
      gridHeight  = 1.0
      upDownLabel = "(RICHER)", "(LEANER)"

   table = sparkTbl,    sparkMap,    "Ignition Advance Main Table", 3
      xBins = rpmBins3, rpm
#if SPEED_DENSITY
      yBins = mapBins3, map
 #elif AIR_FLOW_METER
      yBins = afmBins3, MAFVolts
#elif ALPHA_N
        yBins = tpsBins3, tpsADC
#endif
      zBins = advTable1
      gridHeight  = 3.0
      upDownLabel = "ADVANCED", "RETARDED"

   table = sparkTbl2, sparkMap2,     "Ignition Advance Table 2. See Spark Table selection", 5
      xBins = rpmBins4, rpm
#if SPEED_DENSITY
      yBins = mapBins4, map
#elif AIR_FLOW_METER
      yBins = afmBins4, MAFVolts
#elif ALPHA_N
        yBins = tpsBins4, tpsADC
#endif
      zBins = advTable2
      gridHeight  = 3.0
      upDownLabel = "RETARDED", "ADVANCED"

   table = veTable3Tbl, veTable3Map, "VE Table 3. See Fuel Table Selection", 6
      xBins = rpmBins5, rpm
#if SPEED_DENSITY
      yBins = mapBins5, map
#elif AIR_FLOW_METER
      yBins = afmBins5, MAFVolts
#elif ALPHA_N
        yBins = tpsBins5, tpsADC
#endif
      zBins = veBins3
      gridHeight  = 1.0
      upDownLabel = "(RICHER)", "(LEANER)"

#if NARROW_BAND_EGO
   table = afrTable1Tbl, afrTable1Map, "AFR Targets for VE Table 1 (Volts)", 7
      xBins = rpmBins6, rpm
#if SPEED_DENSITY
      yBins = mapBins6, map
#elif AIR_FLOW_METER
      yBins = afmBins6, MAFVolts
#elif ALPHA_N
        yBins = tpsBins6, tpsADC
#endif
      zBins = afrBins1
   table = afrTable2Tbl, afrTable2Map, "AFR Targets for VE Table 3 (Volts)", 7
      xBins = rpmBins7, rpm
#if SPEED_DENSITY
      yBins = mapBins7, map
#elif AIR_FLOW_METER
      yBins = afmBins7, MAFVolts
#elif ALPHA_N
        yBins = tpsBins7, tpsADC
#endif
      zBins = afrBins2
#elif WB_UNKNOWN
   table = afrTable1Tbl, afrTable1Map, "AFR Targets for VE Table 1 (Volts)", 7
      xBins = rpmBins6, rpm
#if SPEED_DENSITY
      yBins = mapBins6, map
#elif AIR_FLOW_METER
      yBins = afmBins6, MAFVolts
#elif ALPHA_N
        yBins = tpsBins6, tpsADC
#endif
      zBins = afrBins1
   table = afrTable2Tbl, afrTable2Map, "AFR Targets for VE Table 3 (Volts)", 7
      xBins = rpmBins7, rpm
#if SPEED_DENSITY
      yBins = mapBins7, map
#elif AIR_FLOW_METER
      yBins = afmBins7, MAFVolts
#elif ALPHA_N
        yBins = tpsBins7, tpsADC
#endif
      zBins = afrBins2

#elif DIYWB_NON_LINEAR
   table = afrTable1Tbl, afrTable1Map, "AFR Targets for VE Table 1 (Volts)", 7
      xBins = rpmBins6, rpm
#if SPEED_DENSITY
      yBins = mapBins6, map
#elif AIR_FLOW_METER
      yBins = afmBins6, MAFVolts
#elif ALPHA_N
        yBins = tpsBins6, tpsADC
#endif
      zBins = afrBins1
   table = afrTable2Tbl, afrTable2Map, "AFR Targets for VE Table 3 (Volts)", 7
      xBins = rpmBins7, rpm
#if SPEED_DENSITY
      yBins = mapBins7, map
#elif AIR_FLOW_METER
      yBins = afmBins7, MAFVolts
#elif ALPHA_N
        yBins = tpsBins7, tpsADC
#endif
      zBins = afrBins2


#else
   table = afrTable1Tbl, afrTable1Map, "AFR Targets for VE Table 1 (AFR)", 7
      xBins = rpmBins6, rpm
#if SPEED_DENSITY
      yBins = mapBins6, map
#elif AIR_FLOW_METER
      yBins = afmBins6, MAFVolts
#elif ALPHA_N
        yBins = tpsBins6, tpsADC
#endif
      zBins = afrBins1
   table = afrTable2Tbl, afrTable2Map, "AFR Targets for VE Table 3 (AFR)", 7
      xBins = rpmBins7, rpm
#if SPEED_DENSITY
      yBins = mapBins7, map
#elif AIR_FLOW_METER
      yBins = afmBins7, MAFVolts
#elif ALPHA_N
        yBins = tpsBins7, tpsADC
#endif
      zBins = afrBins2
#endif

   table = boostTbl1, boostMap1, "Boost kpa target 1", 8
          ;   constant, variable
      xBins = bcrpmBins1, rpm
      yBins = bctpsBins1, throttle
      zBins = bcBins1

   table = boostTbl2, boostMap2, "Boost duty target", 8
      xBins = bcrpmBins2, rpm
      yBins = bctpsBins2, throttle
      zBins = bcBins2

   table = boostTbl3, boostMap3, "Boost kpa target 2", 8
      xBins = bcrpmBins3, rpm
      yBins = bctpsBins3, throttle
      zBins = bcBins3

   table = splitTbl,    splitMap,    "Rotary split Table - see settings", 9
      xBins = splitrpmBins, rpm
#if SPEED_DENSITY
      yBins = splitkpaBins, map
#elif AIR_FLOW_METER
      yBins = splitafmBins, MAFVolts
#elif ALPHA_N
        yBins = splittpsBins, tpsADC
#endif
      zBins = splitTable
      gridHeight  = 3.0
      upDownLabel = "RETARDED", "ADVANCED"

;-------------------------------------------------------------------------------


[RunTime]
   barHysteresis = 2.5 ; Seconds
#if CELSIUS
   coolantBar    = -40,  100
   matBar        = -40,  100
#else
   coolantBar    = -40,  215
   matBar        = -40,  215
#endif


   batteryBar    =   6,   15
   dutyCycleBar  =   0,  100
#if NARROW_BAND_EGO
   egoBar        =   0,    1.0
#else
   egoBar        =   0,    5.0
#endif
   gammaEBar     =   0,  200
   mapBar        =   0,  255
   pulseWidthBar =   0,   25.5
   rpmBar        =   0, 8000
   throttleBar   =   0,  100

   egoCorrBar    =   0,  200
   baroCorrBar   =   0,  200
   warmupCorrBar =   0,  200
   airdenCorrBar =   0,  200
   veCorrBar     =   0,  200
   accCorrBar    =   0,  100

;-------------------------------------------------------------------------------


[OutputChannels]
   deadValue        = { 0 } ; Convenient unchanging value.

   ochGetCommand    = "R"   ; was "a" and before that "A"
   ochBlockSize     = 39    ; was 38

   secl             = scalar, U08,  0, "sec",    1.000, 0.000
   squirt           = scalar, U08,  1, "bits",   1.000, 0.000
   engine           = scalar, U08,  2, "bits",   1.000, 0.000
   baroADC          = scalar, U08,  3, "ADC",    1.000, 0.000
   mapADC           = scalar, U08,  4, "ADC",    1.000, 0.000
   matADC           = scalar, U08,  5, "ADC",    1.000, 0.000
   cltADC           = scalar, U08,  6, "ADC",    1.000, 0.000
   tpsADC           = scalar, U08,  7, "ADC",    1.000, 0.000
   batADC           = scalar, U08,  8, "ADC",    1.000, 0.000
   egoADC           = scalar, U08,  9, "ADC",    1.000, 0.000
   egoCorrection    = scalar, U08, 10, "%",      1.000, 0.000
   airCorrection    = scalar, U08, 11, "%",      1.000, 0.000
   warmupEnrich     = scalar, U08, 12, "%",      1.000, 0.000
   rpm100           = scalar, U08, 13, "r100",   1.000, 0.000
   pulseWidth1      = scalar, U08, 14, "ms",     0.100, 0.000
   accelEnrich      = scalar, U08, 15, "mS",      1.000, 0.000
   baroCorrection   = scalar, U08, 16, "%",      1.000, 0.000
   gammaEnrich      = scalar, U08, 17, "%",      1.000, 0.000
   veCurr1          = scalar, U08, 18, "%",      1.000, 0.000
   pulseWidth2      = scalar, U08, 19, "ms",     0.100, 0.000
   veCurr2          = scalar, U08, 20, "%",      1.000, 0.000
   idleDC           = scalar, U08, 21, "%",      1.000, 0.000
   iTime            = scalar, U16, 22, "s",      1.000, 0.000
   advance          = scalar, U08, 24, "deg",    1.000, 0.000
   afrtarget        = scalar, U08, 25, "ADC",    1.000, 0.000
   fuelADC          =  scalar, U08, 26, "ADC",    1.000, 0.000  ; ADC from X7 (second O2 or fuel pressure)
   egtADC           =  scalar, U08, 27, "ADC",    1.000, 0.000
   CltIatAngle      =  scalar, U08, 28, "deg",    1.000, 0.000
   KnockAngle       =  scalar, U08, 29, "deg",    1.000, 0.000
   egoCorrection2   =  scalar, U08, 30, "%",    1.000, 0.000  ; Second O2 sensor correction
   porta            = scalar, U08, 31, "", 1.000, 0 ; porta raw value
   portb            = scalar, U08, 32, "", 1.000, 0 ; portb raw value
   portc            = scalar, U08, 33, "", 1.000, 0 ; portc raw value
   portd            = scalar, U08, 34, "", 1.000, 0 ; portd raw value
   stackL           = scalar, U08, 35, "", 1.000, 0 ; low byte of stack
   tpsLast          = scalar, U08, 36, "", 1.000, 0 ; TPS last for Accel Wizard
   iTimeX           = scalar, U08, 37, "s",      1.000, 0.000
   bcDC             = scalar, U08, 38, "%", 0.3922, 0.000

   accDecEnrich     = { (engine & 0b00100000) ? 100 : ((pulseWidth1-injOpen1) / (pulseWidth1-(accelEnrich / 10)-injOpen1) * 100) }, "%" ; In percent, centered on 100% meaning no correction.
   batteryVoltage   = { batADC / 255.0 * 30.0                        } ; Current MS power supply voltage.
   coolant          = { tempCvt(table(cltADC, "thermfactor.inc")-40) } ; Coolant sensor temperature in user units.
   egoVoltage       = { egoADC / 255.0 * 5.0                         } ; EGO sensor voltage.
   ego2Voltage      = { fuelADC / 255.0 * 5.0                        } ; EGO sensor voltage 2.
   mat              = { tempCvt(table(matADC, "matfactor.inc")-40)   } ; Manifold temperature in user units.
   rpm              = { rpm100*100                                    } ; True RPM.
   time             = { timeNow                                      } ; "timeNow" is a parameterless built-in function.
#if CELSIUS
   egttemp          = { egtADC * 3.90625 }                              ; Setup for converting 0-5V = 0 - 1000C
#else
   egttemp          = { egtADC * 7.15625 }                             ; Setup for converting 0-5V = 0 - 1832F
#endif

; Added for second O2 sensor
#if NARROW_BAND_EGO
   afr2             = { table(fuelADC, "NBafr100.inc") / 100.0       }
   lambda2          = { afr2    / 14.7                               }
#elif ZEITRONIX_NON_LINEAR
   lambda2           = { table(fuelADC, "WBafr100Zeit.inc") / 100.0  }
   afr2              = { lambda * 14.7                               }
#elif INNOVATE_LC1_DEFAULT
   lambda2          = { fuelADC/255.0 + 0.5                          }
   afr2             = { lambda * 14.7                                }
#else
   lambda2          = { table(fuelADC, "WBlambda100MOT.inc") / 100.0 }
   afr2             = { lambda2 * 14.7                               }
#endif

#include "lambdaSensors.ini"

#if MPXH6300A
;   barometer        = { table(baroADC, "kpafactor4250.inc")          }
   barometer           = { (baroADC + 1.53) * 1.213675 }
   map                 = { (mapADC + 1.53) * 1.213675 }

#elif MPXH6400A
;   barometer        = { table(baroADC, "kpafactor4250.inc")          }
   barometer           = { (baroADC + 2.147) * 1.6197783 }
   map                 = { (mapADC + 2.147) * 1.6197783 }

#elif MPX4250
   barometer        = { table(baroADC, "kpafactor4250.inc")          }
   map              = { table(mapADC,  "kpafactor4250.inc")          } ; Manifold pressure in kPa.

#else
   barometer        = { table(baroADC, "kpafactor4115.inc")          }
   map              = { table(mapADC,  "kpafactor4115.inc")          }
#endif

   throttle         = { table(tpsADC,  "throttlefactor.inc")         }
   advSpark         = { (advance * 0.352)-10                         }
; Enhanced Stuff
   KnockAng         = { (KnockAngle * 90 / 256) }
   KnockDeg         = { -KnockAng  }
   CltIatAng        = { CltIatAngle * 90 / 256 }
   CltIatDeg        = { CltIatAng < 45? CltIatAng: -90 + CltIatAng } ; Coolant Iat added Angle
   fuelvolt         = { fuelADC < 1 ? 0.0 : fuelADC * (5/255) - 0.5 }
   fuelpress        = { fuelADC < 1 ? 0.0 : fuelvolt / 0.04 +1 }
   altDiv1          = { alternate1 ? 2 : 1                           }
   altDiv2          = { alternate2 ? 2 : 1                           }
   cycleTime1       = { rpm < 100 ? 0 : 60000.0 / rpm * (2.0-twoStroke1)             }
   nSquirts1        = { nCylinders1/divider1                         }
   dutyCycle1       = { rpm < 100 ? 0 : 100.0*nSquirts1/altDiv1*pulseWidth1/cycleTime1 }
   cycleTime2       = { rpm < 100 ? 0 : 60000.0 / rpm * (2.0-twoStroke2)             }
   nSquirts2        = { nCylinders2/divider2        }
   dutyCycle2       = { rpm < 100 ? 0 : 100.0*nSquirts2/altDiv2*pulseWidth2/cycleTime2 }

;  User defined Opening Time for Real Duty Cycle, enter your opening time and select gauge RealDuty1 or 2
   Open_Time1       = {1.0}
   Open_Time2       = {1.0}
   InjectorRating1  = {100} ;Nom Injector flow rating Injector 1
   InjectorRating2  = {100} ;Nom Injector flow rating Injector 2
   dutyCy1Real      = { rpm < 100 ? 0 : InjectorRating1*nSquirts1/altDiv1*(pulseWidth1-Open_Time1)/cycleTime1 }
   dutyCy2Real      = { rpm < 100 ? 0 : InjectorRating2*nSquirts2/altDiv2*(pulseWidth2-Open_Time2)/cycleTime2 }

; These next two are needed to make the runtime dialog look good.
   veCurr           = { veCurr1     }
   pulseWidth       = { pulseWidth1 }

  ;  G FORCE DISPLAY  Alter Values for XOffset and YOffset to get the G at zero when stationary
  ;                   this is to compensate for any tilting the chip has at rest.

    YOffset         = { 182 }
    XOffset         = { 187 }

    YForce          = { egtADC > YOffset + 1 ? (egtADC  - YOffset) * 0.04464 : egtADC < YOffset - 1 ? (egtADC  - YOffset) * 0.04464 : 0 }  ; 1G = 312mV * 1.41 gain from amp = 440mV
    XForce          = { fuelADC > XOffset + 1 ? (fuelADC  - XOffset) * 0.04464 : fuelADC < XOffset - 1 ? (fuelADC  - XOffset) * 0.04464 : 0  }  ; 1G = 312mV * 1.41 gain from amp = 440mV

  ; Test use only
   test             = { mapDOT }
   test2            = { egtADC }

   iTimefull    = { (iTimeX*65536)+ iTime }
   RpmHitmp     = { iTimefull > 0 ? (60000000 *(2.0-twoStroke1)) / (iTimefull * nCylinders1) : 0 }
   ; get rid of the 1 or 2 rpm display that seems to worry some users
   RpmHiRes     = { RpmHitmp > 20 ? RpmHitmp : 0 }

  ; Vacuum and Boost Gauges
   vacuum = { (barometer-map)*0.2953007 } ; Calculate vacuum in in-Hg.
   boost  = { map < barometer ? 0.0 : (map-barometer)*0.1450377 } ; Calculate boost in PSIG.
   boostVac = { map < barometer ? -vacuum : (map-barometer)*0.1450377 }

  ; Speedo Gauge, when VSS connected to X6 and X7
;****************************************************************************
;  CHANGE THESE TO SUIT YOUR CAR TO GET MPG, MPH, ETC. THIS WILL ONLY WORK WITH A SUITABLE
;  VEHICLE SPEED SENSOR CONNECTED TO MSnS-EXTRA CODE.

   Speed = { 70 }    ; Change this to your actual speed @ 2.5V from VSS circuit
   fuelCC = { 2168 } ; Enter the total flow for all your injectors here in cc/Min

;****************************************************************************
   squirtmul = { divider1 < 2 ? 2 : divider1 < 3 ? 1 : divider1 < 5 ? 0.5 : divider1 < 9 ? 0.25 : divider1 < 17 ? 0.125 : 1 }
   squirts   = { alternate1 > 0 ? rpm100 / 0.6 * squirtmul : rpm100 * 2 * squirtmul / 0.6                                  } ; How many squirts per Sec
   OpenWidth = { injOpen1 * 0.1 }                                            ; Pulse width for injector opening time
   CCpHr     = { pulseWidth < 1 ? 1 : (fuelCC/60) * ((pulseWidth - OpenWidth)/1000) * squirts * 3600                                      } ; cc / hr
   mphTemp   = { fuelADC < 1 ? 0 : (fuelADC * Speed) /127.5               }  ; MPH
   mph       = { mphTemp < 1 ? 0 : mphTemp                                }  ; Ensure we get 0 mph
   USgph     = {  CCpHr / 3785                                            }  ; US Gallons / Hr
   USmpg     = { fuelADC < 1 ? 0 : mph < 1 ? 0 : mph / USgph              }  ; US Miles / Gallon
   gph       = {  CCpHr / 4546                                            }  ; Real Gallons / Hr
   mpg       = { fuelADC < 1 ? 0 : mph < 1 ? 0 : mph / gph                }  ; Real Miles / Gallon

;*****************************************************************************
;  CHANGE THESE VALUES TO FIND THE APPROXIMATE BHP FOR YOUR ENGINE.
;  CALCULATIONS WERE PROVIDED BY ERIC. THESE WILL ONLY WORK IF A SUITABLE VEHICLE SPEED
;  SENSOR IS CONNECTED TO THE MSnS-EXTRA CODE. This is unfinished!

   Cd     = { 0.33 }    ; Change this to your vehicle's Coefficient of Drag (0.25-1.0 for road vehicles)
   Mass   = { 1050 }    ; Change this to your vehicle's weight in KGs.
   Crr    = { 18 }      ; Change this to your vehicle's internal drive train loss. (8% for Nascar,
                    ; diamond-like coating on gears to 25% for road car with automatic transmission)
   Radius = { 16.15 }  ; Change this to your vehicle's driven wheel radius in inch's
   GrTms  = { 0.88 }   ; Ratio of the gear you want to test BHP in.
   DiffRa = { 3.31 }    ; Differential ratio


   floodclear = { tpsADC > 200 ? 1 : 0 }  ; For flood clear indicator on main screen

      tpsDOTTY              = { mapProportion4 ? 0 : (tpsADC - tpsLast) * 0.19 }   ; * 0.019 / 0.1 to convert it to V from ADC and to 1Sec from 0.1Sec
      mapDOTTY              = { mapProportion4 ? (mapADC - tpsLast) / 0.1 : 0 }   ; Divide by 0.1 to convert from 0.1Sec to 1Sec

      tpsDOT                = { tpsDOTTY < 0 ? 0 : tpsDOTTY } ; Only display positive or it gets confusing to read
      mapDOT                = { mapDOTTY < 0 ? 0 : mapDOTTY } ; Only display positive or it gets confusing to read

      Timeroll               =  { portc & 0b00000100 }
      waterIlog              =  { porta & 0b00010000 }

      MAFVolts               = { fuelADC * 0.0196078 }
      
      nosActive1        = { (portd & 0b00000010) ? 0 : 1 } ; "NOS/Tables On",   

;-------------------------------------------------------------------------------

[Datalog]
   ; Full datalog.
   ;
   ; Default user-defined log emulates the full datalog.
   ;
   ; The entries are saved in the datalog file in the order in
   ; which they appear in the list below.
   ;
   ;   Channel - Case sensitive name of output channel to be logged.
   ;   Label   - String written to header line of log.  Be careful
   ;             about changing these, as programs like MSLVV and
   ;             MSTweak key off specific column names.
   ;   Type    - Data type of output, converted before writing.
   ;   Format  - C-style output format of data.
   ;
   ;       Channel          Label          Type    Format
   ;       --------------   ----------     -----   ------
;change the next line to #set if you still want to use the older logviewer
#unset MSLVV_COMPATIBLE

#if MSLVV_COMPATIBLE
   entry = time,            "Time",        float,  "%.3f"
   entry = secl,            "SecL",        int,    "%d"
   entry = rpm100,          "RPM",         int,    "%d"
   entry = map,             "MAP",         int,    "%d"
   entry = throttle,        "TP",          int,    "%d"
   entry = egoVoltage,      "O2",          float,  "%.3f"
   entry = mat,             "MAT",         float,  "%.1f"
   entry = coolant,         "CLT",         float,  "%.1f"
   entry = engine,          "Engine",      int,    "%d"
   entry = egoCorrection,   "Gego",        int,    "%d"
   entry = airCorrection,   "Gair",        int,    "%d"
   entry = warmupEnrich,    "Gwarm",       int,    "%d"
   entry = baroCorrection,  "Gbaro",       int,    "%d"
   entry = gammaEnrich,     "Gammae",      int,    "%d"
   entry = accDecEnrich,    "TPSacc",      int,    "%d"
   entry = veCurr1,         "Gve",         int,    "%d"
   entry = pulseWidth1,     "PW",          float,  "%.1f"

   entry = veCurr2,         "Gve2",        int,    "%d"
   entry = pulseWidth2,     "PW2",         float,  "%.1f"

   entry = dutyCycle1,      "DutyCycle1",  float,  "%.1f"
   entry = dutyCycle2,      "DutyCycle2",  float,  "%.1f"

   ; Last three are for MSLVV compatibility, but we dont use these, we use the
   ; three underneath.
   entry = pulseWidth2,     "UserData1",   int,    "%d"
   entry = veCurr2,         "UserData2",   int,    "%d"
   entry = idleDC,          "UserData3",   int,    "%d"
#else

; if using the newer log viewer we have no such limits on fields - so do lots
   entry = time,            "Time",        float,  "%.3f"
   entry = secl,            "SecL",        int,    "%d"
   entry = rpm100,          "RPM/100",     int,    "%d"
   entry = map,             "MAP",         int,    "%d"
   entry = throttle,        "TP",          int,    "%d"
   entry = egoVoltage,      "O2",          float,  "%.3f"
   entry = mat,             "MAT",         float,  "%.1f"
   entry = coolant,         "CLT",         float,  "%.1f"
   entry = engine,          "Engine",      int,    "%d"
   entry = egoCorrection,   "Gego",        int,    "%d"
   entry = airCorrection,   "Gair",        int,    "%d"
   entry = warmupEnrich,    "Gwarm",       int,    "%d"
   entry = baroCorrection,  "Gbaro",       int,    "%d"
   entry = gammaEnrich,     "Gammae",      int,    "%d"
   entry = accDecEnrich,    "TPSacc",      int,    "%d"
   entry = veCurr1,         "Gve",         int,    "%d"
   entry = pulseWidth1,     "PW",          float,  "%.1f"

   entry = veCurr2,         "Gve2",        int,    "%d"
   entry = pulseWidth2,     "PW2",         float,  "%.1f"

   entry = dutyCycle1,      "DutyCycle1",  float,  "%.1f"
   entry = dutyCycle2,      "DutyCycle2",  float,  "%.1f"

   entry = idleDC,          "idleDC",      int,    "%d"

   entry = bcDC,            "BCDuty3",     int,    "%d"

   entry = advSpark,        "Spark Angle", float,    "%.1f"
   entry = egttemp,         "EGT",         int,    "%d"
   entry = fuelpress,       "Fuel Press",  int,    "%d"
   entry = KnockDeg,        "Knock",       int,    "%d"
   entry = RpmHiRes,        "RPM",         int,    "%d"
   entry = barometer,       "barometer",   int,    "%d"
   entry = porta,	          "porta",       int,    "%d"
   entry = portb,	          "portb",       int,    "%d"
   entry = portc,	          "portc",       int,    "%d"
   entry = portd,	          "portd",       int,    "%d"
   entry = nosActive1,      "NOS On",      int,    "%d"
   entry = batteryVoltage,  "batt V",      float,    "%.1f"

 ;  entry = XForce,           "X GForce",     float,  "%.2f"   ; X on X7
 ;  entry = YForce,           "Y GForce",     float,  "%.2f"   ; Y on X6
 ;  entry = MAFVolts,         "MAF Volts",    float,  "%.2f"   ; MAF on X7

 ; TEST ONLY - DONT USE
 ;  entry = iTime,            "iTime",        int,    "%d"
 ;  entry = iTimeX,           "iTimeX",       int,    "%d"
 ;  entry = iTimefull,        "iTimeFull",    int,    "%d"
#endif
