;-------------------------------------------------------------------------------

[MegaTune]
   MTversion      = 3.00 ; MegaTune itself; needs to match exec version.

   queryCommand   = "S"
   signature      = "Dual Table v.1.02"

;-------------------------------------------------------------------------------

[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ; I've got no good way to handle a few of these things yet.
   ;
   ; Temperatures are fine, check out the Fielding IAC example (fastIdleTemp).
   ;
   ; The TPS stuff is a problem, because we have to modify the ini file for
   ; each TPS installation and again whenever we move the TPS...  I figured
   ; out a moderately palatable solution to presenting the frequency
   ; divider in the boost control values, turn it into a bit field and then
   ; enumerate the resulting frequencies.
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is layed
   ; out like.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ; If you specify a label as "INVALID" (all upper case), then it will
   ; not be displayed in the combo box, so you can leave out values that
   ; make no sense.
   ;
   ;----------------------------------------------------------------------------

   endianness          = big
   pageActivationDelay = 0   ; Delay after page activate command in ms.
   nPages              = 2
   burnCommand         = "B"
   pageSize            = 128,     128
   pageActivate        = "P\x00", "P\x01"
   pageReadCommand     = "V",     "V"
   pageValueWrite      = "W%o%v", "W%o%v"
   pageChunkWrite      = "",      "" ; No chunk write for DT.

   page = 1
   ;  name       = bits,   type, offset, bits
   ;  name       = array,  type, offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type, offset,        units,     scale, translate,    lo,      hi, digits
      veTable1   = array,  U08,       0, [8x8], "%",          1.0,      0.0,   0.0,   255.0,      0
      crankCold1 = scalar, U08,      64,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      crankHot1  = scalar, U08,      65,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      asePct1    = scalar, U08,      66,         "%",        1.0,       0.0,   0.0,   255.0,      0
      aseCount1  = scalar, U08,      67,         "",         1.0,       0.0,   0.0,   254.0,      0
      wueBins1   = array,  U08,      68, [  10], "%",        1.0,       0.0,   0.0,   255.0,      0
      taeBins1   = array,  U08,      78, [   4], "ms",       0.1,       0.0,   0.0,    25.5,      1
      taeColdA1  = scalar, U08,      82,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      tpsThresh1 = scalar, U08,      83,         "v/s",0.1953125,       0.0,   0.2,    49.8,      3
      taeTime1   = scalar, U08,      84,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      tdePct1    = scalar, U08,      85,         "%",        1.0,       0.0,   0.0,   255.0,      0
#if CELSIUS
      egoTemp1   = scalar, U08,      86,         "°C",     0.555,       -72,   -40,   102.0,      0
#else
      egoTemp1   = scalar, U08,      86,         "°F",       1.0,       -40,   -40,   215.0,      0
#endif
      egoCount1  = scalar, U08,      87,        "",          1.0,       0.0,   0.0,   255.0,      0
      egoDelta1  = scalar, U08,      88,        "%",         1.0,       0.0,   0.0,   255.0,      0
      egoLimit1  = scalar, U08,      89,        "%",         1.0,       0.0,   0.0,   255.0,      0
      reqFuel1   = scalar, U08,      90,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      divider1   = scalar, U08,      91,        "",          1.0,       0.0
;     alternate1 = bits,   U08,      92, [0:0], "Simultaneous", "Alternating"
      dualTable  = bits,   U08,      92, [0:0], "Simultaneous Emulation", "Dual Table"
      injUse1    = bits,   U08,      92, [1:2], "Off", "Table 1", "Table 2", "INVALID"
      injUse2    = bits,   U08,      92, [3:4], "Off", "Table 1", "Table 2", "INVALID"
      injGE1     = bits,   U08,      92, [5:5], "Off", "On"
      injGE2     = bits,   U08,      92, [6:6], "Off", "On"
      injOpen1   = scalar, U08,      93,        "ms",        0.1,       0.0,   0.1,    25.5,      1
      injPwmP1   = scalar, U08,      95,        "%",         1.0,       0.0,   0.0,   100.0,      0
      injPwmT1   = scalar, U08,      96,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      battFac1   = scalar, U08,      97,        "ms/v",0.0166667,       0.0,   0.0,     1.0,      2
      rpmk1      = scalar, U16,      98,        "",          1.0,       0.0
      rpmBins1   = array,  U08,     100, [  8], "RPM",      100.0,      0.0, 100.0, 25500.0,      0
   #if SPEED_DENSITY
      mapBins1   = array,  U08,     108, [  8], "kPa",        1.0,      0.0,   0.0,   255.0,      0
   #elif ALPHA_N
      tpsBins1   = array,  U08,     108, [  8], "TPS",        1.0,      0.0,   0.0,   255.0,      0
   #elif AIR_FLOW_METER
      #error "MSnS does not support MAF"
      #exit
   #endif
      ; Config1
      mapType1   = bits,   U08,     116, [0:1], "115 kPa", "250 kPa", "INVALID", "INVALID"
      twoStroke1 = bits,   U08,     116, [2:2], "Four-stroke", "Two-stroke"
      injType1   = bits,   U08,     116, [3:3], "Port", "Throttle Body"
      nCylinders1= bits,   U08,     116, [4:7+1]
      ; Config3
      cltType1   = bits,   U08,     117, [0:1], "GM", "Unknown1", "Unknown2", "Unknown3"
      matType1   = bits,   U08,     117, [2:3], "GM", "Unknown1", "Unknown2", "Unknown3"
      nInjectors1= bits,   U08,     117, [4:7+1]
      ; Config3
      engineType1= bits,   U08,     118, [0:0], "Even fire",     "Odd fire"
      egoType1   = bits,   U08,     118, [1:1], "Narrow band",   "Wide band"
      algorithm1 = bits,   U08,     118, [2:2], "Speed Density", "Alpha-N"
      baroCorr1  = bits,   U08,     118, [3:3], "Off",           "On"
      pwmIdle    = bits,   U08,     118, [4:4], "B&G On-Off", "Fielding PWM"

      primePulse1= scalar, U08,     119,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      egoRPM1    = scalar, U08,     120,        "RPM",     100.0,       0.0,   100,   25500,      0
#if CELSIUS
      fastIdleT1 = scalar, U08,     121,        "°C",      0.555,     -72.0,   -40,     102,      1
#else
      fastIdleT1 = scalar, U08,     121,        "°F",      1.0,       -40.0,   -40,     215,      0
#endif
      egoSwitch1 = scalar, U08,     122,        "v",      0.0196,       0.0,   0.0,     5.0,      3
      taeColdM1  = scalar, U08,     123,        "%",         1.0,       0.0,   0.0,   250.0,      0

   #if CELSIUS
      fastIdleTemp = scalar, U08,   121,        "°C",       0.555,   -72.0,    -40,     102, 1
      slowIdleTemp = scalar, U08,   124,        "°C",       0.555,   -72.0,    -40,     102, 1
   #else
      fastIdleTemp = scalar, U08,   121,        "°F",         1.0,   -40.0,    -40,     215
      slowIdleTemp = scalar, U08,   124,        "°F",         1.0,   -40.0,    -40,     215
   #endif
      fastIdleRPM  = scalar, U08,   125,        "RPM",       10.0,     0.0,     10,    2550
      slowIdleRPM  = scalar, U08,   126,        "RPM",       10.0,     0.0,     10,    2550

      ; For TPS from ADC, use scale=100/(max-min) and tra=-min
      ;  100/(225-26) = 0.502, -26, might just be best to leave it in ADC...
      idleThresh   = scalar, U08,   127,        "%",        0.502,   -26.0,    0.0,     255

   page = 2
   ;  name       = bits,   type, offset, bits
   ;  name       = array,  type, offset, shape, units,     scale, translate,    lo,      hi, digits
   ;  name       = scalar, type, offset,        units,     scale, translate,    lo,      hi, digits
      veTable2   = array,  U08,       0, [8x8], "%",          1.0,      0.0,   0.0,   255.0,      0
      crankCold2 = scalar, U08,      64,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      crankHot2  = scalar, U08,      65,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      asePct2    = scalar, U08,      66,         "%",        1.0,       0.0,   0.0,   255.0,      0
      aseCount2  = scalar, U08,      67,         "",         1.0,       0.0,   0.0,   254.0,      0
      wueBins2   = array,  U08,      68, [  10], "%",        1.0,       0.0,   0.0,   255.0,      0
      taeBins2   = array,  U08,      78, [   4], "ms",       0.1,       0.0,   0.0,    25.5,      1
      taeColdA2  = scalar, U08,      82,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      tpsThresh2 = scalar, U08,      83,         "v/s",0.1953125,       0.0,   0.2,    49.8,      3
      taeTime2   = scalar, U08,      84,         "ms",       0.1,       0.0,   0.0,    25.5,      1
      tdePct2    = scalar, U08,      85,         "%",        1.0,       0.0,   0.0,   255.0,      0
#if CELSIUS
;     egoTemp2   = scalar, U08,      86,         "°C",     0.555,       -72,   -40,   102.0,      0
#else
;     egoTemp2   = scalar, U08,      86,         "°F",       1.0,       -40,   -40,   215.0,      0
#endif
;     egoCount2  = scalar, U08,      87,        "",          1.0,       0.0,   0.0,   255.0,      0
;     egoDelta2  = scalar, U08,      88,        "%",         1.0,       0.0,   0.0,   255.0,      0
;     egoLimit2  = scalar, U08,      89,        "%",         1.0,       0.0,   0.0,   255.0,      0
      reqFuel2   = scalar, U08,      90,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      divider2   = scalar, U08,      91,        "",          1.0,       0.0
;     alternate2 = bits,   U08,      92, [0:0], "Simultaneous", "Alternating"
      injOpen2   = scalar, U08,      93,        "ms",        0.1,       0.0,   0.1,    25.5,      1
      injPwmP2   = scalar, U08,      95,        "%",         1.0,       0.0,   0.0,   100.0,      0
      injPwmT2   = scalar, U08,      96,        "ms",        0.1,       0.0,   0.0,    25.5,      1
      battFac2   = scalar, U08,      97,        "ms/v",0.0166667,       0.0,   0.0,     1.0,      2
      rpmk2      = scalar, U16,      98,        "",          1.0,       0.0
      rpmBins2   = array,  U08,     100, [  8], "RPM",      100.0,      0.0, 100.0, 25500.0,      0
   #if SPEED_DENSITY
      mapBins2   = array,  U08,     108, [  8], "kPa",        1.0,      0.0,   0.0,   255.0,      0
   #else
      tpsBins2   = array,  U08,     108, [  8], "TPS",        1.0,      0.0,   0.0,   255.0,      0
   #endif
      ; Config1
      mapType2   = bits,   U08,     116, [0:1], "115 kPa", "250 kPa", "INVALID", "INVALID"
      twoStroke2 = bits,   U08,     116, [2:2], "Four-stroke", "Two-stroke"
      injType2   = bits,   U08,     116, [3:3], "Port", "Throttle Body"
      nCylinders2= bits,   U08,     116, [4:7+1]
      ; Config3
      cltType2   = bits,   U08,     117, [0:1], "GM", "Unknown1", "Unknown2", "Unknown3"
      matType2   = bits,   U08,     117, [2:3], "GM", "Unknown1", "Unknown2", "Unknown3"
      nInjectors2= bits,   U08,     117, [4:7+1]
      ; Config3
      engineType2= bits,   U08,     118, [0:0], "Even fire",     "Odd fire"
;     egoType2   = bits,   U08,     118, [1:1], "Narrow band",   "Wide band"
      algorithm2 = bits,   U08,     118, [2:2], "Speed Density", "Alpha-N"
      baroCorr2  = bits,   U08,     118, [3:3], "Off",           "On"

      freqDiv       = bits,   U08,  119, [0:2], "INVALID", "39.0 Hz", "19.5 Hz", "13.0 Hz", "9.8 Hz", "7.8 Hz", "6.5 Hz", "5.6 Hz"
      bcUpdateRate  = scalar, U08,  120,        "ms",          1.0,     0.0,    10,   255,        0
      pGain         = scalar, U08,  121,        "%",           1.0,     0.0,     0,   255,        0
      dGain         = scalar, U08,  122,        "%",           1.0,     0.0,     0,   255,        0
      revLimiter    = scalar, U08,  123,        "RPM",       100.0,     0.0,   100, 25500,        0
      launchLimit   = scalar, U08,  124,        "RPM",       100.0,     0.0,   100, 25500,        0
      shiftLoThresh = scalar, U08,  125,        "RPM",       100.0,     0.0,   100, 25500,        0
      shiftHiThresh = scalar, U08,  126,        "RPM",       100.0,     0.0,   100, 25500,        0
      crankingRPM   = scalar, U08,  127,        "RPM",       100.0,     0.0,   100,  1000,        0

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ; 
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ; 
   ;----------------------------------------------------------------------------

   menu = "&General"
      subMenu = dtUse,           "&Dual Table Use"
      subMenu = dtSettings,      "DT &Settings"
      subMenu = boostControl,    "&Boost Control"
      subMenu = idleControl,     "&Idle Control"

   menu = "Page &1", { injUse1 == 1 || injUse2 == 1 }
      subMenu = std_constants,   "&Constants",   1
      subMenu = std_enrichments, "&Enrichments", 1
      subMenu = veTable1Tbl,     "&VE Table"

   menu = "Page &2", { injUse1 == 2 || injUse2 == 2 }
      subMenu = std_constants,   "&Constants",   2
      subMenu = std_enrichments, "&Enrichments", 2
      subMenu = veTable2Tbl,     "&VE Table"

   menu = "&Tuning"
      subMenu = std_realtime,    "&Realtime Display"
      subMenu = std_warmup,      "&Warmup Wizard"
      subMenu = std_separator
      subMenu = veTable1Map,     "VE Table &1"
      subMenu = veTable2Map,     "VE Table &2"

;-------------------------------------------------------------------------------

[UserDefined]

   ;----------------------------------------------------------------------------
   ; User Defined Dialog Boxes
   ; -------------------------
   ; You may have a maximum of 20 lines per dialog, anything past that is
   ; ignored.  There is no practical limit on the number of dialogs.
   ;
   ; Format
   ; ------
   ; WAS dialog = "menu entry", "dialog title", constants-page
   ; NOW dialog = id,           "dialog title", constants-page
   ;    field = "field label", constants-reference
   ;
   ;----------------------------------------------------------------------------

   dialog = dtUse, "Dual Table Use", 1
      field = "Mode", dualTable
      field = "Injector 1 Usage", injUse1
      field = "Injector 1 Gamma E", injGE1
      field = "Injector 2 Usage", injUse2
      field = "Injector 2 Gamma E", injGE2

   dialog = dtSettings, "General Settings", 2
   ;          "field label",              constant
      field = "Cranking RPM",             crankingRPM
      field = "Absolute Rev Limiter",     revLimiter
      field = "Launch Control Rev Limit", launchLimit
      field = "Shift Light"
      field = "Lower Threshold",          shiftLoThresh
      field = "Upper Threshold",          shiftHiThresh

   dialog =  boostControl, "Boost Controller Parameters", 2
      field = "Solenoid PWM Rate",        freqDiv
      field = "Controller Update",        bcUpdateRate
      field = "Proportional Gain",        pGain
      field = "Differential Gain",        dGain

   dialog = idleControl, "Fielding 2-Wire Idle Control", 1
      field = "Algorithm",                pwmIdle
      field = "Throttle Threshold",       idleThresh
      field = "Fast Idle Temp",           fastIdleTemp
      field = "Slow Idle Temp",           slowIdleTemp
      field = "Fast Idle RPM",            fastIdleRPM
      field = "Slow Idle RPM",            slowIdleRPM

;-------------------------------------------------------------------------------

[TableEditor]
   ;       table_id,    map3d_id,    "title",      page
   table = veTable1Tbl, veTable1Map, "VE Table 1", 1
            ; constant, variable
      xBins       = rpmBins1, rpm
   #if SPEED_DENSITY
      yBins       = mapBins1, map
   #else
      yBins       = tpsBins1, tpsADC
   #endif
      zBins       = veTable1
      gridHeight  = 1.0
      gridOrient  = 250,   0, 340 ; Space 123 rotation of grid in degrees.
      upDownLabel = "(RICHER)", "(LEANER)"

   table = veTable2Tbl, veTable2Map, "VE Table 2", 2
      xBins       = rpmBins2, rpm
   #if SPEED_DENSITY
      yBins       = mapBins1, map
   #else
      yBins       = tpsBins1, tpsADC
   #endif
      zBins       = veTable2
      gridHeight  = 1.0
      gridOrient  = 250,   0, 340 ; Space 123 rotation of grid in degrees.
      upDownLabel = "(RICHER)", "(LEANER)"

;-------------------------------------------------------------------------------

[GaugeConfigurations]

   ;-------------------------------------------------------------------------------
   ;  Notes on some of the gauges.
   ;
   ;  The accelEnrichGauge is now a composite of both acceleration enrichment
   ;  and deceleration enleanment numbers.  See the definition of the variable
   ;  accDecEnrich in the OutputChannels section.
   ;
   ;  David Hooke contributed the lambda gauge and associated transfer
   ;  function files.
   ;
   ;  The lambda gauge is the best way (my opinion) to report data from a
   ;  wide band EGO gauge, it standardizes the output irrespective of fuel
   ;  or mix of fuels, so you needn't do any brainwork to know if your 75%
   ;  gasoline and 25% methanol is rich at 10:1 or not.
   ;
   ;  Use the file WBlambda100AVR.inc, if using a standard ADC (e.g., AVR cpu).
   ;  Use the file WBlambda100MOT.inc, if using a biased ADC (e.g., MOT cpu).
   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.
   ;-------------------------------------------------------------------------------

   ;Name               Var            Title                 Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld
   baroADCGauge      = baroADC,       "Barometer ADC",      "",        0,   255,     -1,    -1,  256,  256, 0, 0
   mapADCGauge       = mapADC,        "MAP ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   matADCGauge       = matADC,        "MAT ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   cltADCGauge       = cltADC,        "CLT ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   tpsADCGauge       = tpsADC,        "TPS ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0
   batADCGauge       = batADC,        "BAT ADC",            "",        0,   255,     -1,    -1,  256,  256, 0, 0

   #if NARROW_BAND_EGO
      egoGauge       = egoVoltage,    "Exhaust Gas Oxygen", "volts",   0,   1.0,    0.2,   0.3,  0.6,  0.8, 2, 2
   #else
      egoGauge       = egoVoltage,    "Exhaust Gas Oxygen", "volts", 0.5,   4.5,    0.0,   0.0,  5.0,  5.0, 2, 2
   #endif
   lambdaGauge       = lambda,        "Lambda",             "",      0.5,   1.5,    0.5,   0.7,    2,  1.1, 2, 2

   accelEnrichGauge  = accDecEnrich,  "Accel Enrich",       "%",      50,   150,     -1,    -1,  999,  999, 0, 0
   afrGauge          = afr,           "Air:Fuel Ratio",     "",       10,  19.4,     12,    13,   15,   16, 2, 2
   clockGauge        = secl,          "Clock",              "Seconds", 0,   255,     10,    10,  245,  245, 0, 0
   deadGauge         = deadValue,     "---",                "",        0,     1,     -1,    -1,    2,    2, 0, 0
   dutyCycle1Gauge   = dutyCycle1,    "Duty Cycle 1",       "%",       0,   100,     -1,    -1,   85,   90, 1, 1
   dutyCycle2Gauge   = dutyCycle2,    "Duty Cycle 2",       "%",       0,   100,     -1,    -1,   85,   90, 1, 1
   egoCorrGauge      = egoCorrection, "EGO Correction",     "%",      50,   150,     90,    99,  101,  110, 0, 0

   gammaEnrichGauge  = gammaEnrich,   "Gamma Enrichment",   "%",      50,   150,     -1,    -1,  151,  151, 0, 0
   mapGauge          = map,           "Engine MAP",         "kPa",     0,   255,      0,    20,  200,  245, 0, 0
   pulseWidth1Gauge  = pulseWidth1,   "Pulse Width 1",      "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 1, 1
   pulseWidth2Gauge  = pulseWidth2,   "Pulse Width 2",      "mSec",    0,  25.5,    1.0,   1.2,   20,   25, 1, 1
   tachometer        = rpm,           "Engine Speed",       "RPM",     0,  8000,    300,   600, 3000, 5000, 0, 0
   throttleGauge     = throttle,      "Throttle Position",  "%TPS",    0,   100,     -1,     1,   90,  100, 0, 0
   veBucketGauge     = veTuneValue,   "VE Value",           "%",       0,   120,     -1,    -1,  999,  999, 0, 0
   ve1Gauge          = veCurr1,       "VE Current - 1",     "%",       0,   120,     -1,    -1,  999,  999, 0, 0
   ve2Gauge          = veCurr2,       "VE Current - 2",     "%",       0,   120,     -1,    -1,  999,  999, 0, 0
   voltMeter         = batteryVoltage,"Battery Voltage",    "volts",   7,    21,      8,     9,   15,   16, 2, 2
   warmupEnrichGauge = warmupEnrich,  "Warmup Enrichment",  "%",     100,   150,     -1,    -1,  101,  105, 0, 0

#if CELSIUS
   cltGauge          = coolant,       "Coolant Temp",       "%TEMP", -40,   120,    -15,     0,   95,  105, 0, 0
   matGauge          = mat,           "Manifold Air Temp",  "%TEMP", -40,   110,    -15,     0,   95,  100, 0, 0
#else
   cltGauge          = coolant,       "Coolant Temp",       "%TEMP", -40,   250,      0,    30,  200,  220, 0, 0
   matGauge          = mat,           "Manifold Air Temp",  "%TEMP", -40,   215,      0,    30,  200,  210, 0, 0
#endif

;-------------------------------------------------------------------------------

[FrontPage]
#if NARROW_BAND_EGO
   egoLEDs         = 0.0, 1.0, 0.5 ; NB settings.
#else
   ; If you reverse these range values as you see below, then the LED
   ; bar will work as you expect, high on the right, low on the left.
   egoLEDs         = 4.0, 1.0, 2.5 ; WB settings.
#endif

   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8

   gauge1 = tachometer
#if SPEED_DENSITY
   gauge2 = throttleGauge
#else
   gauge2 = tpsADCGauge
#endif
   gauge3 = pulseWidth1Gauge
   gauge4 = dutyCycle1Gauge
   gauge5 = mapGauge
   gauge6 = matGauge
   gauge7 = pulseWidth2Gauge
   gauge8 = dutyCycle2Gauge

;-------------------------------------------------------------------------------

[RunTime]
   barHysteresis = 2.5 ; Seconds
#if CELSIUS
   coolantBar    = -40,  100
   matBar        = -40,  100
#else
   coolantBar    = -40,  215
   matBar        = -40,  215
#endif

   batteryBar    =   6,   15
   dutyCycleBar  =   0,  100
#if NARROW_BAND_EGO
   egoBar        =   0,    1.0
#else
   egoBar        =   0,    5.0
#endif
   gammaEBar     =   0,  200
   mapBar        =   0,  255
   pulseWidthBar =   0,   25.5
   rpmBar        =   0, 8000
   throttleBar   =   0,  100

   egoCorrBar    =   0,  200
   baroCorrBar   =   0,  200
   warmupCorrBar =   0,  200
   airdenCorrBar =   0,  200
   veCorrBar     =   0,  200
   accCorrBar    =   0,  100

;-------------------------------------------------------------------------------

[Tuning]
#if NARROW_BAND_EGO
   egoLEDs         = 0.0, 1.0, 0.5 ; NB settings.
#else
   ; If you reverse these range values as you see below, then the LED
   ; bar will work as you expect, high on the right, low on the left.
   egoLEDs         = 4.0, 1.0, 2.5 ; WB settings.
#endif

   font            = "Courier", 14
   spotDepth       =   2 ; 0 = no indicators, 1 = Z only, 2 = XYZ indicators.
   cursorDepth     =   2 ; Same as spot depth.

   ; The four radio buttons on the tuning screen select a "page" of six
   ; gauges.  The gauge numbering is the same as the front page, across
   ; then down.
   ;             1  2
   ;             3  4
   ;             5  6
   ;
   ; gaugeColumns allows you to hide or show gauges in column 2 (i.e.,
   ; gauges 2, 4 and 6).

   gaugeColumns = 2 ; Only 1 or 2 are valid.

   ;              Page 1            Page 2             Page 3            Page 4
   pageButtons  = "&EGO",           "&WUE",            "PW&1",           "PW&2"
   gauge1       = tachometer,       tachometer,        tachometer,       tachometer
   gauge2       = mapGauge,         mapGauge,          mapGauge,         mapGauge
   gauge3       = egoGauge,         egoGauge,          egoGauge,         egoGauge
   gauge4       = egoCorrGauge,     warmupEnrichGauge, pulseWidth1Gauge, pulseWidth2Gauge
   gauge5       = veBucketGauge,    veBucketGauge,     veBucketGauge,    veBucketGauge
   gauge6       = accelEnrichGauge, accelEnrichGauge,  dutyCycle1Gauge,  dutyCycle2Gauge

;-------------------------------------------------------------------------------

[OutputChannels]

   ;----------------------------------------------------------------------------
   ; The number of bytes MegaTune should expect as a result
   ; of sending the "A" command to MegaSquirt is determined
   ; by the value of ochBlockSize, so be very careful when
   ; you change it.
   ;----------------------------------------------------------------------------

   deadValue        = { 0 } ; Convenient unchanging value.

   ochBlockSize     =  22

   secl             = scalar, U08,  0, "sec",    1.000, 0.000
   squirt           = scalar, U08,  1, "bits",   1.000, 0.000
   engine           = scalar, U08,  2, "bits",   1.000, 0.000
   baroADC          = scalar, U08,  3, "ADC",    1.000, 0.000
   mapADC           = scalar, U08,  4, "ADC",    1.000, 0.000
   matADC           = scalar, U08,  5, "ADC",    1.000, 0.000
   cltADC           = scalar, U08,  6, "ADC",    1.000, 0.000
   tpsADC           = scalar, U08,  7, "ADC",    1.000, 0.000
   batADC           = scalar, U08,  8, "ADC",    1.000, 0.000
   egoADC           = scalar, U08,  9, "ADC",    1.000, 0.000
   egoCorrection    = scalar, U08, 10, "%",      1.000, 0.000
   airCorrection    = scalar, U08, 11, "%",      1.000, 0.000
   warmupEnrich     = scalar, U08, 12, "%",      1.000, 0.000
   rpm100           = scalar, U08, 13, "r100",   1.000, 0.000
   pulseWidth1      = scalar, U08, 14, "ms",     0.100, 0.000
   accelEnrich      = scalar, U08, 15, "%",      1.000, 0.000
   baroCorrection   = scalar, U08, 16, "%",      1.000, 0.000
   gammaEnrich      = scalar, U08, 17, "%",      1.000, 0.000
   veCurr1          = scalar, U08, 18, "%",      1.000, 0.000
   pulseWidth2      = scalar, U08, 19, "ms",     0.100, 0.000
   veCurr2          = scalar, U08, 20, "%",      1.000, 0.000
   idleDC           = scalar, U08, 21, "DC",     1.000, 0.000

   ; Computed output channels.  See "megatuneExamples.ini" for all the
   ; pre-defined variables, search for "???" and you'll see them.

   accDecEnrich     = { accelEnrich + ((engine & 0b00100000) ? tdePct1 : 100) }
   batteryVoltage   = { batADC / 255.0 * 30.0                        } ; Current MS power supply voltage.
   coolant          = { tempCvt(table(cltADC, "thermfactor.inc")-40) } ; Coolant sensor temperature in user units.
   egoVoltage       = { egoADC / 255.0 * 5.0                         } ; EGO sensor voltage.
   mat              = { tempCvt(table(matADC, "matfactor.inc")-40)   } ; Manifold temperature in user units.
   rpm              = { rpm100*100                                   } ; True RPM.
   time             = { timeNow                                      } ; "timeNow" is a parameterless built-in function.

   afrtarget = { 0 }
#include "lambdaSensors.ini"

#if MPX4250
   barometer        = { table(baroADC, "kpafactor4250.inc")          }
   map              = { table(mapADC,  "kpafactor4250.inc")          } ; Manifold pressure in kPa.
#else
   barometer        = { table(baroADC, "kpafactor4115.inc")          }
   map              = { table(mapADC,  "kpafactor4115.inc")          }
#endif
   throttle         = { table(tpsADC,  "throttlefactor.inc")         }

   cycleTime1       = { 60000.0 / rpm * (2.0-twoStroke1)             }
   nSquirts1        = { nCylinders1/divider1                         }
   dutyCycle1       = { 100.0*nSquirts1/pulseWidth1/cycleTime1       }

   cycleTime2       = { 60000.0 / rpm * (2.0-twoStroke2)             }
   nSquirts2        = { nCylinders2/divider2                         }
   dutyCycle2       = { 100.0*nSquirts2/pulseWidth2/cycleTime2       }

   ; These next two are needed to make the runtime dialog look good.
   veCurr           = { veCurr1     }
   pulseWidth       = { pulseWidth1 }

;-------------------------------------------------------------------------------

[Datalog]

   ;----------------------------------------------------------------------------
   ; Full datalog.
   ;
   ; Default user-defined log emulates the full datalog.
   ;
   ; The entries are saved in the datalog file in the order in
   ; which they appear in the list below.
   ;
   ;   Channel - Case sensitive name of output channel to be logged.
   ;   Label   - String written to header line of log.  Be careful
   ;             about changing these, as programs like MSLVV and
   ;             MSTweak key off specific column names.
   ;   Type    - Data type of output, converted before writing.
   ;   Format  - C-style output format of data.
   ;----------------------------------------------------------------------------

   ;       Channel          Label          Type    Format
   ;       --------------   ----------     -----   ------
   entry = time,            "Time",        float,  "%.3f"
   entry = secl,            "SecL",        int,    "%d"
   entry = rpm100,          "RPM",         int,    "%d"
   entry = map,             "MAP",         int,    "%d"
   entry = throttle,        "TP",          int,    "%d"
   entry = egoVoltage,      "O2",          float,  "%.3f"
   entry = mat,             "MAT",         float,  "%.1f"
   entry = coolant,         "CLT",         float,  "%.1f"
   entry = engine,          "Engine",      int,    "%d"
   entry = egoCorrection,   "Gego",        int,    "%d"
   entry = airCorrection,   "Gair",        int,    "%d"
   entry = warmupEnrich,    "Gwarm",       int,    "%d"
   entry = baroCorrection,  "Gbaro",       int,    "%d"
   entry = gammaEnrich,     "Gammae",      int,    "%d"
   entry = accDecEnrich,    "TPSacc",      int,    "%d"
   entry = veCurr1,         "Gve",         int,    "%d"
   entry = pulseWidth1,     "PW",          float,  "%.1f"
   entry = veCurr2,         "Gve2",        int,    "%d"
   entry = pulseWidth2,     "PW2",         float,  "%.1f"
   entry = dutyCycle1,      "DutyCycle1",  float,  "%.1f"
   entry = dutyCycle2,      "DutyCycle2",  float,  "%.1f"
   ; Last three are for MSLVV compatibility.
   entry = pulseWidth2,     "UserData1",   int,    "%d"
   entry = veCurr2,         "UserData2",   int,    "%d"
   entry = idleDC,          "UserData3",   int,    "%d"

;-------------------------------------------------------------------------------
