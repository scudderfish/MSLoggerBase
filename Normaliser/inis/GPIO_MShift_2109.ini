#alert "This INI is for test purposes only. Neither it nor the code are fully tested, and they should be not used in a vehicle."

; add a semi-colon (;) in front of the alert to disable it

; INI date: 3:41 pm, July13/11"

;------------------------------------------------------------------------------
; Units - "unset" to change to metric units in MegaTune (to match values returned from MShift when metric units are chosen)
#  set NOT_METRIC

;------------------------------------------------------------------------------
#unset CAN_COMMANDS
[MegaTune]
   MTversion      = 2.25 ; MegaTune itself; needs to match exec version.

#if CAN_COMMANDS
   queryCommand   = "r\x01\x0f\x00\x00\x00\x14"  ; 13 bytes from table 15. Verify against signature.
#else
   queryCommand   = "Q"  ; Verify against signature.
#endif
   versionInfo    = "S"  ; Put this in the title bar.
   signature      = "MShift 2.109       " ; MegaShift sends a null at 20th byte.
                   ; 123456789.123456789.

;-------------------------------------------------------------------------------

[Constants]

   ;----------------------------------------------------------------------------
   ; Constants Definition
   ; --------------------
   ;
   ; Scalar Values
   ; -------------
   ; The scaling and translation values are used as follows:
   ;    msValue   = userValue / scale - translate
   ;    userValue = (msValue + translate) * scale
   ;
   ;
   ; Array Values
   ; ------------
   ; Arrays are specified just like scalars, except that they have a "shape"
   ; entry in the fourth parameter.  The shape allows you to define lists or
   ; tables, for example [8] defines a list with eight values and [2x4] defines
   ; a table with eight values (two rows and four columns).  Tables may be
   ; stored in either "X-" or "Y-order."  X-order means that memory is laid
   ; out as follows.
   ;
   ;     [x1,y1] [x2,y1]...[xn,y1] [x1,y2]...
   ;
   ; Y-order would be
   ;
   ;     [x1,y1] [x1,y2]...[x1,yn] [x2,y1]...
   ;
   ; To use the TableEditor, you must define two lists and a table, and
   ; the lengths of the lists must correspond to the shape of the table.
   ;
   ; Bit Fields
   ; ----------
   ; Bits are numbered 0-7, the rightmost being bit zero.  The basic
   ; data word that stores bit fields must be unsigned.
   ;
   ; You need NOT supply the correct number of labels matching the
   ; number of bits you've specified (one bit requires 2 values, two
   ; bits requires 4 values and so on).  If you neglect to supply enough
   ; labels, they will be synthesized using the sequence "1", "2" and so
   ; on based upon their position in the sequence (the cltType and matType
   ; will end up with identical lists).
   ;
   ;----------------------------------------------------------------------------

   pageActivationDelay = 250 ; Milliseconds delay after burn command.
   blockReadTimeout    = 180 ; Milliseconds total timeout for reading page.

; The commands sent to the GPIO are formatted "command\CAN_ID\table_ID"
;    %2i is the id/table number - 2 bytes
;    %2o is the table offset - 2 bytes
;    %2c is the number of bytes to be read/written
;    %v is the byte to be written

   endianness          = big
   nPages              = 2
   pageSize            = 633,            30
   pageIdentifier      = "\x01\x04",     "\x01\x05"
   burnCommand         = "b%2i",         "b%2i"
   pageReadCommand     = "r%2i%2o%2c",   "r%2i%2o%2c"
   pageValueWrite      = "w%2i%2o%2c%v", "w%2i%2o%2c%v"
   pageChunkWrite      = "w%2i%2o%2c%v", "w%2i%2o%2c%v"
   
; Example: from TS comm log
;Time: 0:33.314: SENT, 7 bytes
; x72 x01 x07 x00 x38 x00 x08
; 'r',  can_id=1, table=7 (outpc), offset 38h (56 decimal), send 8 bytes


;   C Type                 Bits              Range                     MegaTune INI Designation
;   ------                 ----              -----                     ------------------------

; - char (=signed char)     8            -128 to 127                S08 (one byte offset each)
; - unsigned char           8               0 to 255                  U08

; ...............................................................................................

; - int  (=signed int)     16          -32768 to 32767             S16 (two byte offset each)
;   (= short)

; - unsigned int           16               0 to 65535                  U16
;   (=unsigned short int)

; ................................................................................................

; - long  (=signed long)   32            -2³¹ to 2³¹ - 1            S32 (four byte offset each)
;   (=long int)     

; - unsigned long          32               0 to 2³² - 1                U32
;   (=unsigned long int)

; ................................................................................................

; note that variables are signed unless designated otherwise

#if CAN_COMMANDS
   blockingFactor = 64
#endif

; For the most part, the parameters below have the same names as in the source code. 
; This isn't required (since it is the actual memory addressses that are used), 
; but it does help when trying to undertand the source code.

   page = 1
 ; **************************************** inpram *************************************************
 ;name             = class,  type, offset,         shape,    units,       scale,  translate,     lo,     hi,   decimal digits
  InputCaptureEdge = bits,    U08,     0,          [0:0], "Rising Edge", "Falling Edge"
#if NOT_METRIC
  vss_table        = array,   U16,     1,      [   12  ],    "mph",     1.00000,    0.00000,      0,    255,        0    ; vehicle speed tables
#else
  vss_table        = array,   U16,     1,      [   12  ],    "kph",     1.00000,    0.00000,      0,    255,        0    ; vehicle speed tables
#endif
  LOAD_table       = array,   S16,    25,      [   12  ],    "kpa",     1.00000,    0.00000,      0,    255,        0    ; load bins (x1)
#if NOT_METRIC
  temp_table       = array,   S16,    49,      [   10  ],   "degF",     0.10000,    0.00000,    -40,    255,        0    ; deg x 10 (C or F)
#else
  temp_table       = array,   S16,    49,      [   10  ],   "degC",     0.10000,    0.00000,    -40,    255,        0    ; deg x 10 (C or F)
#endif
  gear_table       = array,   U16,    69,      [    9  ],     ":1",     0.00100,    0.00000,      0,      7,        3    ; gear ratio array [9] * 1000
  gearR            = scalar,  U16,    69,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; reverse gear * 1000
  gear1            = scalar,  U16,    71,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; first gear * 1000
  gear2            = scalar,  U16,    73,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; second gear * 1000
  gear3            = scalar,  U16,    75,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; third gear * 1000
  gear4            = scalar,  U16,    77,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; fourth gear * 1000   
  gear5            = scalar,  U16,    79,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; first gear * 1000
  gear6            = scalar,  U16,    81,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; second gear * 1000
  gear7            = scalar,  U16,    83,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; third gear * 1000
  gear8            = scalar,  U16,    85,                     ":1",     0.00100,    0.00000,      0,      7,        3    ; fourth gear * 1000   
  CAN_enabled      = bits,    U08,    87,          [0:0],   "CAN disabled", "CAN enabled"
  load_type        = bits,    U08,    88,          [0:0],   "Use MAP", "Use TPS"
#if NOT_METRIC
  noTCC_temp       = scalar,  S16,    89,                   "degF",     0.10000,    0.00000,      0,    200,        1    ; no TCC lock below this temp (to aid warm-up)
#else
  noTCC_temp       = scalar,  S16,    89,                   "degC",     0.10000,    0.00000,      0,    200,        1    ; no TCC lock below this temp (to aid warm-up)
#endif
  minTCC_gear      = scalar,  S16,    91,                       "",     1.00000,    0.00000,      2,      4,        0    ; minimum gear (1-4) for TCC lock 
  noTCC_load       = scalar,  U16,    93,                    "kPa",     0.10000,    0.00000,      0,  10000,        1    ;
  LUF_taper        = scalar,  U08,    95,                    "sec",     0.10000,    0.00000,      0,    255,        1    ; Lock Up feel taper time (sec x10)
  PulseTol         = scalar,  U08,    96,                      "%",     1.00000,    0.00000,      0,    100,        0    ; % tolerance for next input pulse
  axle_ratio       = scalar,  U16,    97,                     ":1",     0.00100,    0.00000,      1,     10,        3    ; rear axle ratio * 1000
#if NOT_METRIC
  tire_diam        = scalar,  U16,    99,                 "inches",     0.01000,    0.00000,      5,     70,        2    ; tire diameter (inches*100)
#else
  tire_diam        = scalar,  U16,    99,                     "cm",     0.01000,    0.00000,     15,    180,        2    ; tire diameter (centimeters*100)
#endif
  under_rev_limit  = scalar,  U16,   101,                    "rpm",     1.00000,    0.00000,      0,  10000,        0    ; minimum resulting rpm for an upshift
  trans_type       = scalar,  U08,   103,                       "",     1.00000,    0.00000,      0,      1,        0    ; transmission type, 0=4L60E, 1=4R70W
  shift_mode       = scalar,  U08,   104,                       "",     1.00000,    0.00000,      1,      2,        0    ; Start-up mode 0=manual (disallowed), 1=auto (sequential shift), 2=auto (skip shift)
  Metric_Units     = bits,    U08,   105,          [0:0],   "Imperial", "Metric"
  error_check      = bits,    U08,   106,          [0:0],   "Ignore errors", "Report errors"  
  rpm_limit        = scalar,  U16,   107,                     "rpm",    1.00000,    0.00000,      0,  10000,        0    ; Max engine rpm for downshift
  debounce         = scalar,  U08,   109,                       "",     1.00000,    0.00000,     25,    255,        0    ; Threshold for switch manifold debounce
  num_teeth        = scalar,  U08,   110,                       "",     1.00000,    0.00000,      1,    255,        0    ; input VSS pulses (teeth/rev)
  TCC_PWM_Pd 	   = scalar,  U16,   111, 		            "msec",     0.00100,    0.00000,      0.427,  10.888,   3    ; TCC PWM period (usec) - keep between 0.427 and 10.888 msec (92 Hertz and 2340 Hertz)
  PC_PWM_Pd        = scalar,  U16,   113, 		            "msec",     0.00100,    0.00000,      0.427,  10.888,   3    ; PC PWM period (usec) - keep between 0.427 and 10.888 msec (92 Hertz and 2340 Hertz)
  SOL32_PWM_Pd     = scalar,  U16,   115, 		            "msec",     0.00100,    0.00000,  	  4,     21,        3    ; Sol32 PWM period (usec)
  BatFac           = scalar,  U08,   117,                    "%/V",    -0.10000,    0.00000,  -25.5,      0,        1    ; Battery PWM correction factor (%x10 per volt)
  ms2canID         = scalar,  U08,   118,                       "",     1.00000,    0.00000,      0,     16,        0    ; MS-II 'master' CAN ID
  ms2varBLK        = scalar,  U08,   119,                       "",     1.00000,    0.00000,      0,     16,        0    ; outpc block on MS-II 
  PCneutral        = scalar,  U08,   120,                      "%",    -1.00000,    -100.00,     40,    100,        0    ; pressure in neutral
  baud             = scalar,  U32,   121                        "",     1.00000,    0.00000, 115200, 115200,        0    ; baud rate
  board_type       = scalar,  U08,   125,                       "",     1.00000,    0.00000,      0,    255,        0    ; board type (1-255) of ith board;
  trans_can_id     = scalar,  U08,   126,                       "",     1.00000,    0.00000,      0,    255,        0    ; can_id (address) of this board (< MAX_CANBOARDS)
  can_var_rate     = scalar,  U16,   127,                       "",     1.00000,    0.00000,     20,   1000,        0    ; rate at which to get CAN variables
  auto_table       = array,   U08,   129,        [12x12],   "gear",     1.00000,    0.00000,      1,      8,        0    ; The target gear for each LOAD & MPH
  pc_table         = array,   U08,   273,        [12x12],      "%",    -1.00000,    -100.00,     40,    100,        0    ; The PWM% for PC solenoid by load and mph  
#if NOT_METRIC
  trans_temp_limit = scalar,  U16,   417,                   "degF",     0.10000,    0.00000,      0,    300,        1    ; Transmission temperature limit
#else
  trans_temp_limit = scalar,  U16,   417,                   "degC",     0.10000,    0.00000,      0,    300,        1    ; Transmission temperature limit
#endif
  pulse_mile       = scalar,  U16,   419,                       "",     1.00000,    0.00000,    100,  20000,        0    ; Pulse per mile for speedo output
  rpm_check        = bits,    U08,   421,          [0:0], "Do Not Enforce RPM Checks", "Enforce RPM Checks"
#if NOT_METRIC
  gear_hyst        = scalar,  U08,   422,                    "mph",     0.10000,    0.00000,      0,     10,        1    ; Gear Hysteresis, in mph x10
#else
  gear_hyst        = scalar,  U08,   422,                    "kph",     0.10000,    0.00000,      0,     10,        1    ; Gear Hysteresis, in mph x10
#endif
  kpa_hyst         = scalar,  U08,   423,                    "kPa",     1.0000,     0.00000,      0,    255,        0    ; Gear Hysteresis, in kPa x10
  max_shift_press  = scalar,  U08,   424,                      "%",    -1.00000,    -100.00,     40,     90,        0    ; Max pressure while shifting
  pressure_delay   = scalar,  U16,   425,                   "msec",     8.00000,    0.00000,     10,    500,        0    ; Line pressure delay for shifting
  shift_delay      = scalar,  U16,   427,                   "msec",     8.00000,    0.00000,     10,    500,        0    ; Shift solenoid - actual shift delay
  LOADshortcount   = scalar,  U16,   429,                       "",     1.00000,    0.00000,      1,   8000,        0    ; LOAD short term filtering factor
  LOADlongcount    = scalar,  U16,   431,                       "",     1.00000,    0.00000,      1,    600,        0    ; LOAD long term filtering factor
  LOADmult         = scalar,  S16,   433,               "kpa/volt",     0.01000,    0.00000,   -300,    300,        2    ; non-CAN LOAD multplier (slope)
  LOADzero         = scalar,  S16,   435             "kpa @ 0Volt",     0.01000,    0.00000,   -300,    300,        2    ; non-CAN LOAD at 0 volts (y-intercept)
#if NOT_METRIC
  minTCCspeed      = scalar,  U16,   437,                    "mph",     0.10000,    0.00000,     30,    300,        1    ; minimum TCC lock-up speed (imperial)
#else
  minTCCspeed      = scalar,  U16,   437,                    "kph",     0.10000,    0.00000,     50,    450,        1    ; minimum TCC lock-up speed (metric)
#endif
  PCtemp           = array,   S08,   439,         [10],        "%",    -0.10000,    0.00000,  -12.7,   12.7,        1    ; line pressure adjustment for temp (negative so higher values lower PC DC% = higher pressure)
  Output1          = scalar,  U16,   449,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for solA
  Out11            = bits,    U16,   449,        [0:0],    "off", "ON"; 
  Out12            = bits,    U16,   449,        [1:1],    "off", "ON";
  Out13            = bits,    U16,   449,        [2:2],    "off", "ON";
  Out14            = bits,    U16,   449,        [3:3],    "off", "ON";
  Out15            = bits,    U16,   449,        [4:4],    "off", "ON";
  Out16            = bits,    U16,   449,        [5:5],    "off", "ON";
  Out17            = bits,    U16,   449,        [6:6],    "off", "ON";
  Out18            = bits,    U16,   449,        [7:7],    "off", "ON";  
  Out19            = bits,    U16,   449,        [8:8],    "off", "ON"; 
  Out110           = bits,    U16,   449,        [9:9],    "off", "ON";
  Out111           = bits,    U16,   449,        [10:10],  "off", "ON";
  Out112           = bits,    U16,   449,        [11:11],  "off", "ON";
  Out113           = bits,    U16,   449,        [12:12],  "off", "ON";
  Out114           = bits,    U16,   449,        [13:13],  "off", "ON";
  Out115           = bits,    U16,   449,        [14:14],  "off", "ON";
  Out116           = bits,    U16,   449,        [15:15],  "off", "ON";  
  Output2          = scalar,  U16,   451,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for solB 
  Out21            = bits,    U16,   451,        [0:0],    "off", "ON"; 
  Out22            = bits,    U16,   451,        [1:1],    "off", "ON";
  Out23            = bits,    U16,   451,        [2:2],    "off", "ON";
  Out24            = bits,    U16,   451,        [3:3],    "off", "ON";
  Out25            = bits,    U16,   451,        [4:4],    "off", "ON";
  Out26            = bits,    U16,   451,        [5:5],    "off", "ON";
  Out27            = bits,    U16,   451,        [6:6],    "off", "ON";
  Out28            = bits,    U16,   451,        [7:7],    "off", "ON";
  Out29            = bits,    U16,   451,        [8:8],    "off", "ON"; 
  Out210           = bits,    U16,   451,        [9:9],    "off", "ON";
  Out211           = bits,    U16,   451,        [10:10],  "off", "ON";
  Out212           = bits,    U16,   451,        [11:11],  "off", "ON";
  Out213           = bits,    U16,   451,        [12:12],  "off", "ON";
  Out214           = bits,    U16,   451,        [13:13],  "off", "ON";
  Out215           = bits,    U16,   451,        [14:14],  "off", "ON";
  Out216           = bits,    U16,   451,        [15:15],  "off", "ON";  
  Output3          = scalar,  U16,   453,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for 3/2sol 
  Out31            = bits,    U16,   453,        [0:0],    "off", "ON"; 
  Out32            = bits,    U16,   453,        [1:1],    "off", "ON";
  Out33            = bits,    U16,   453,        [2:2],    "off", "ON";
  Out34            = bits,    U16,   453,        [3:3],    "off", "ON";
  Out35            = bits,    U16,   453,        [4:4],    "off", "ON";
  Out36            = bits,    U16,   453,        [5:5],    "off", "ON";
  Out37            = bits,    U16,   453,        [6:6],    "off", "ON";
  Out38            = bits,    U16,   453,        [7:7],    "off", "ON";
  Out39            = bits,    U16,   453,        [8:8],    "off", "ON"; 
  Out310           = bits,    U16,   453,        [9:9],    "off", "ON";
  Out311           = bits,    U16,   453,        [10:10],  "off", "ON";
  Out312           = bits,    U16,   453,        [11:11],  "off", "ON";
  Out313           = bits,    U16,   453,        [12:12],  "off", "ON";
  Out314           = bits,    U16,   453,        [13:13],  "off", "ON";
  Out315           = bits,    U16,   453,        [14:14],  "off", "ON";
  Out316           = bits,    U16,   453,        [15:15],  "off", "ON"; 
  Output4          = scalar,  U16,   455,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for 3/2sol 
  Out41            = bits,    U16,   455,        [0:0],    "off", "ON"; 
  Out42            = bits,    U16,   455,        [1:1],    "off", "ON";
  Out43            = bits,    U16,   455,        [2:2],    "off", "ON";
  Out44            = bits,    U16,   455,        [3:3],    "off", "ON";
  Out45            = bits,    U16,   455,        [4:4],    "off", "ON";
  Out46            = bits,    U16,   455,        [5:5],    "off", "ON";
  Out47            = bits,    U16,   455,        [6:6],    "off", "ON";
  Out48            = bits,    U16,   455,        [7:7],    "off", "ON";
  Out49            = bits,    U16,   455,        [8:8],    "off", "ON"; 
  Out410           = bits,    U16,   455,        [9:9],    "off", "ON";
  Out411           = bits,    U16,   455,        [10:10],  "off", "ON";
  Out412           = bits,    U16,   455,        [11:11],  "off", "ON";
  Out413           = bits,    U16,   455,        [12:12],  "off", "ON";
  Out414           = bits,    U16,   455,        [13:13],  "off", "ON";
  Out415           = bits,    U16,   455,        [14:14],  "off", "ON";
  Out416           = bits,    U16,   455,        [15:15],  "off", "ON"; 

  out3dc           = scalar,  U08,   457,                      "%",     1.00000,    0.00000,      0,    100,        0    ; output3 duty cycle percent when on
#if NOT_METRIC
  sp1speed         = scalar,  U16,   458,                    "mph",     0.10000,    0.00000,      0,    250,        1    ; spare port 1 speed threshold
  sp1speed_hyst    = scalar,  U16,   460,                    "mph",     0.10000,    0.00000,      0,    250,        1    ; spare port 1 speed threshold
#else
  sp1speed         = scalar,  U16,   458,                    "kph",     0.10000,    0.00000,      0,    300,        1    ; spare port 1 speed threshold
  sp1speed_hyst    = scalar,  U16,   460,                    "kph",     0.10000,    0.00000,      0,    300,        1    ; spare port 1 speed threshold
#endif
  sp1speed_cond    = bits,    U08,   462,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal", "INVALID" 
  sp1rpm           = scalar,  U16,   463,                    "rpm",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 rpm threshold
  sp1rpm_hyst      = scalar,  U16,   465,                    "rpm",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 rpm threshold
  sp1rpm_cond      = bits,    U08,   467,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal", "INVALID" 
  sp1load          = scalar,  U16,   468,                    "kPa",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 load threshold
  sp1load_hyst     = scalar,  U16,   470,                    "kPa",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 load threshold
  sp1load_cond     = bits,    U08,   472,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal", "INVALID" 
  sp1gear          = scalar,  U08,   473,                       "",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 gear threshold
  sp1gear_cond     = bits,    U08,   474,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal", "INVALID" 
#if NOT_METRIC 
  sp2speed         = scalar,  U16,   475,                    "mph",     0.10000,    0.00000,      0,    250,        1    ; spare port 1 speed threshold
  sp2speed_hyst    = scalar,  U16,   477,                    "mph",     0.10000,    0.00000,      0,    250,        1    ; spare port 1 speed threshold
#else
  sp2speed         = scalar,  U16,   475,                    "kph",     0.10000,    0.00000,      0,    300,        1    ; spare port 1 speed threshold
  sp2speed_hyst    = scalar,  U16,   477,                    "kph",     0.10000,    0.00000,      0,    300,        1    ; spare port 1 speed threshold
#endif
  sp2speed_cond    = bits,    U08,   479,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal", "INVALID"  
  sp2rpm           = scalar,  U16,   480,                    "rpm",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 rpm threshold
  sp2rpm_hyst      = scalar,  U16,   482,                    "rpm",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 rpm threshold
  sp2rpm_cond      = bits,    U08,   492,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal", "INVALID"  
  sp2load          = scalar,  U16,   485,                    "kPa",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 load threshold
  sp2load_hyst     = scalar,  U16,   487,                    "kPa",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 load threshold
  sp2load_cond     = bits,    U08,   489,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal" , "INVALID" 
  sp2gear          = scalar,  U08,   498,                       "",     1.00000,    0.00000,      0,  12000,        1    ; spare port 1 gear threshold
  sp2gear_cond     = bits,    U08,   491,       [0:1], "No Condition", ">= Greater Than or Equal", "<= Less Than or Equal" , "INVALID" 
  Input1           = scalar,  U16,   492,                       "",     1.00000,    0.00000,      0,    127,        0    ; input pattern for swA      
  In11             = bits,    U16,   492,       [0:0],    "low", "HIGH" 
  In12             = bits,    U16,   492,       [1:1],    "low", "HIGH"
  In13             = bits,    U16,   492,       [2:2],    "low", "HIGH"
  In14             = bits,    U16,   492,       [3:3],    "low", "HIGH"
  In15             = bits,    U16,   492,       [4:4],    "low", "HIGH"
  In16             = bits,    U16,   492,       [5:5],    "low", "HIGH"
  In17             = bits,    U16,   492,       [6:6],    "low", "HIGH"
  In18             = bits,    U16,   492,       [7:7],    "low", "HIGH" 
  In19             = bits,    U16,   492,       [8:8],    "low", "HIGH" 
  In110            = bits,    U16,   492,       [9:9],    "low", "HIGH"
  In111            = bits,    U16,   492,       [10:10],  "low", "HIGH" 
  In112            = bits,    U16,   492,       [11:11],  "low", "HIGH"
  In113            = bits,    U16,   492,       [12:12],  "low", "HIGH"  
  In114            = bits,    U16,   492,       [13:13],  "low", "HIGH"  
  In115            = bits,    U16,   492,       [14:14],  "low", "HIGH"
  In116            = bits,    U16,   492,       [15:15],  "low", "HIGH"
  Input2           = scalar,  U16,   494,                       "",     1.00000,    0.00000,      0,    127,        0    ; input pattern for swB 
  In21             = bits,    U16,   494,       [0:0],    "low", "HIGH"
  In22             = bits,    U16,   494,       [1:1],    "low", "HIGH"
  In23             = bits,    U16,   494,       [2:2],    "low", "HIGH"
  In24             = bits,    U16,   494,       [3:3],    "low", "HIGH"
  In25             = bits,    U16,   494,       [4:4],    "low", "HIGH"
  In26             = bits,    U16,   494,       [5:5],    "low", "HIGH"
  In27             = bits,    U16,   494,       [6:6],    "low", "HIGH"
  In28             = bits,    U16,   494,       [7:7],    "low", "HIGH" 
  In29             = bits,    U16,   494,       [8:8],    "low", "HIGH" 
  In210            = bits,    U16,   494,       [9:9],    "low", "HIGH" 
  In211            = bits,    U16,   494,       [10:10],  "low", "HIGH" 
  In212            = bits,    U16,   494,       [11:11],  "low", "HIGH" 
  In213            = bits,    U16,   494,       [12:12],  "low", "HIGH"   
  In214            = bits,    U16,   494,       [13:13],  "low", "HIGH"   
  In215            = bits,    U16,   494,       [14:14],  "low", "HIGH" 
  In216            = bits,    U16,   494,       [15:15],  "low", "HIGH" 
  Input3           = scalar,  U16,   496,                       "",     1.00000,    0.00000,      0,    127,        0    ; input pattern for swC 
  In31             = bits,    U16,   496,       [0:0],    "low", "HIGH" 
  In32             = bits,    U16,   496,       [1:1],    "low", "HIGH"
  In33             = bits,    U16,   496,       [2:2],    "low", "HIGH"
  In34             = bits,    U16,   496,       [3:3],    "low", "HIGH"
  In35             = bits,    U16,   496,       [4:4],    "low", "HIGH"
  In36             = bits,    U16,   496,       [5:5],    "low", "HIGH"
  In37             = bits,    U16,   496,       [6:6],    "low", "HIGH"
  In38             = bits,    U16,   496,       [7:7],    "low", "HIGH"   
  In39             = bits,    U16,   496,       [8:8],    "low", "HIGH" 
  In310            = bits,    U16,   496,       [9:9],    "low", "HIGH" 
  In311            = bits,    U16,   496,       [10:10],  "low", "HIGH" 
  In312            = bits,    U16,   496,       [11:11],  "low", "HIGH" 
  In313            = bits,    U16,   496,       [12:12],  "low", "HIGH"   
  In314            = bits,    U16,   496,       [13:13],  "low", "HIGH"   
  In315            = bits,    U16,   496,       [14:14],  "low", "HIGH" 
  In316            = bits,    U16,   496,       [15:15],  "low", "HIGH" 
  Input4           = scalar,  U16,   498,                       "",     1.00000,    0.00000,      0,    127,        0    ; input pattern for swC 
  In41             = bits,    U16,   498,       [0:0],    "low", "HIGH" 
  In42             = bits,    U16,   498,       [1:1],    "low", "HIGH"
  In43             = bits,    U16,   498,       [2:2],    "low", "HIGH"
  In44             = bits,    U16,   498,       [3:3],    "low", "HIGH"
  In45             = bits,    U16,   498,       [4:4],    "low", "HIGH"
  In46             = bits,    U16,   498,       [5:5],    "low", "HIGH"
  In47             = bits,    U16,   498,       [6:6],    "low", "HIGH"
  In48             = bits,    U16,   498,       [7:7],    "low", "HIGH"  
  In49             = bits,    U16,   498,       [8:8],    "low", "HIGH"  
  In410            = bits,    U16,   498,       [9:9],    "low", "HIGH" 
  In411            = bits,    U16,   498,       [10:10],  "low", "HIGH" 
  In412            = bits,    U16,   498,       [11:11],  "low", "HIGH" 
  In413            = bits,    U16,   498,       [12:12],  "low", "HIGH"   
  In414            = bits,    U16,   498,       [13:13],  "low", "HIGH"   
  In415            = bits,    U16,   498,       [14:14],  "low", "HIGH" 
  In416            = bits,    U16,   498,       [15:15],  "low", "HIGH"

  mlever_mode      = bits,    U08,   500,       [0:0], "digital switches (GM)", "Voltages (Ford)"
  mlever_vP        = scalar,  U16,   501,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for P (converted from ADC count)
  mlever_vR        = scalar,  U16,   503,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for R (converted from ADC count)
  mlever_vN        = scalar,  U16,   505,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for N (converted from ADC count)
  mlever_v4        = scalar,  U16,   507,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for 4 (converted from ADC count)
  mlever_v3        = scalar,  U16,   509,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for 3 (converted from ADC count)
  mlever_v2        = scalar,  U16,   511,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for 2 (converted from ADC count)
  mlever_v1        = scalar,  U16,   513,                   "volts",    0.00489,    0.00000,      0,    5.0,        2    ; Volts for 1 (converted from ADC count)
  
  swBDC_OD         = bits,    U08,   515,       [0:0], "Gear lever for 4th (OD)", "OD on swB (on GPI2/Amp6)"
  clutch_enable    = bits,    U08,   516,       [0:1], "Use Both Spare Ports", "Use Outputs during shifts only", "Use PT3/Amp32 for LUF and SPR2/PA0/VB2 for TCC", "INVALID" 
;  clutch1up        = scalar,  U08,   517,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for upshift spare port 1 in clutch mode
   clutch11u            = bits,    U08,   517,        [0:0],  "off", "ON"   ; 1-2
   clutch12u            = bits,    U08,   517,        [1:1],  "off", "ON"   ; 2-3
   clutch13u            = bits,    U08,   517,        [2:2],  "off", "ON"   ; 3-4
   clutch14u            = bits,    U08,   517,        [3:3],  "off", "ON"   ; 4-5
   clutch15u            = bits,    U08,   517,        [4:4],  "off", "ON"   ; 5-6
   clutch16u            = bits,    U08,   517,        [5:5],  "off", "ON"   ; 6-7
   clutch17u            = bits,    U08,   517,        [6:6],  "off", "ON"   ; 7-8
   clutch18u            = bits,    U08,   517,        [7:7],  "off", "ON"   ; not used
;  clutch2up        = scalar,  U08,   518,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for upshift spare port 2 in clutch mode
   clutch21u            = bits,    U08,   518,        [0:0],  "off", "ON"   ; 1-2
   clutch22u            = bits,    U08,   518,        [1:1],  "off", "ON"   ; 2-3
   clutch23u            = bits,    U08,   518,        [2:2],  "off", "ON"   ; 3-4
   clutch24u            = bits,    U08,   518,        [3:3],  "off", "ON"   ; 4-5
   clutch25u            = bits,    U08,   518,        [4:4],  "off", "ON"   ; 5-6
   clutch26u            = bits,    U08,   518,        [5:5],  "off", "ON"   ; 6-7
   clutch27u            = bits,    U08,   518,        [6:6],  "off", "ON"   ; 7-8
   clutch28u            = bits,    U08,   518,        [7:7],  "off", "ON"   ; not used
;  clutch1dwn        = scalar,  U08,   519,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for downshift spare port 1 in clutch mode   
   clutch11d            = bits,    U08,   519,        [0:0],  "off", "ON"   ; 2-1 
   clutch12d            = bits,    U08,   519,        [1:1],  "off", "ON"   ; 3-2
   clutch13d            = bits,    U08,   519,        [2:2],  "off", "ON"   ; 4-3
   clutch14d            = bits,    U08,   519,        [3:3],  "off", "ON"   ; 5-4
   clutch15d            = bits,    U08,   519,        [4:4],  "off", "ON"   ; 6-5
   clutch16d            = bits,    U08,   519,        [5:5],  "off", "ON"   ; 7-6
   clutch17d            = bits,    U08,   519,        [6:6],  "off", "ON"   ; 8-7
   clutch18d            = bits,    U08,   519,        [7:7],  "off", "ON"   ; not used
;  clutch2dwn        = scalar,  U08,   520,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for downshift spare port 2 in clutch mode   
   clutch21d            = bits,    U08,   520,        [0:0],  "off", "ON"   ; 2-1 
   clutch22d            = bits,    U08,   520,        [1:1],  "off", "ON"   ; 3-2
   clutch23d            = bits,    U08,   520,        [2:2],  "off", "ON"   ; 4-3
   clutch24d            = bits,    U08,   520,        [3:3],  "off", "ON"   ; 5-4
   clutch25d            = bits,    U08,   520,        [4:4],  "off", "ON"   ; 6-5
   clutch26d            = bits,    U08,   520,        [5:5],  "off", "ON"   ; 7-6
   clutch27d            = bits,    U08,   520,        [6:6],  "off", "ON"   ; 8-7
   clutch28d            = bits,    U08,   520,        [7:7],  "off", "ON"   ; not used

  FWD_factor            = scalar,  U16,   521,                 ":1",    0.00100,    0.00000,   1.960,  6.000,        3    ; Speedo correction factor in 4WD (PE1 grounded)
 
  upshift_retard        = scalar,  S16,   523,                "deg",      -0.10,    0.00000,     0.0,   25.5,        1    ; Upshift timing retard
  dwnshift_retard       = scalar,  S16,   525,                "deg",      -0.10,    0.00000,     0.0,   25.5,        1    ; Downshift timing retard     
  gear2_retard          = scalar,  S16,   527,                "deg",      -0.10,    0.00000,     0.0,   25.5,        1    ; 2nd gear timing retard
  gear3_retard          = scalar,  S16,   529,                "deg",      -0.10,    0.00000,     0.0,   25.5,        1    ; 3rd gear timing retard
  gear4_retard          = scalar,  S16,   531,                "deg",      -0.10,    0.00000,     0.0,   25.5,        1    ; 4th gear timing retard
  Tretard_load          = scalar,  U16,   533,                "kPa",       0.10,    0.00000,     0.0,  250.0,        1    ; timing retard only above load (kpax10) 

  LUF_off               = scalar,  U08,   535,                "%",         1.00,    0.00000,     0.0,  100.0,        0    ; Lock-Up feel solenoid off state (%)
  LUF_loLoad            = scalar,  U16,   536,                "kPa",       0.10,    0.00000,     0.0,  255.0,        1    ; Lock Up Feel soln. low load
  LUF_hiLoad            = scalar,  U16,   538,                "kPa",       0.10,    0.00000,     0.0,  255.0,        1    ; Lock Up Feel soln. high load
  LUF_loPWM             = scalar,  U08,   540,                "%",         1.00,    0.00000,     0.0,  100.0,        0    ; Lock-Up feel solenoid PWM% at low load (%)
  LUF_hiPWM             = scalar,  U08,   541,                "%",         1.00,    0.00000,     0.0,  100.0,        0    ; Lock-up feel solenoid PWM% at high load (%)

  digital_threshold     = scalar,  U16,   542,                "volts",     0.00489, 0.00000,     0.0,  5.000,        3    ; digital threshold for ADC count to on/off
  shftr_accum           = scalar,  U16,   544,                "",          0.10,    0.00000,    25.0,   1000,        1    ; shifter accumulator - buttin sensitivity (lower is more sensitive)
#if NOT_METRIC
  hyst_enable_speed     = scalar,  U16,   546,                "mph",       0.10,    0.00000,     0.0,  15.00,        1    ; no shift hysteresis below this speed
#else
  hyst_enable_speed     = scalar,  U16,   546,                "kph",       0.10,    0.00000,     0.0,  15.00,        1    ; no shift hysteresis below this speed
#endif
  vss_mask              = scalar,  U08,   548,                "%",         1.00,    0.00000,     0.0  200.00,        0    ; VSS interrupt mask (%)
  stdin_cfg             = scalar,  U08,   549,                "",          1.00,    0.00000,     0.0, 255.00,        0    ; configure standard inputs (temp and 2/4WD)
     FWD_cfg            = bits,    U08,   549,        [0:0],  "Log only", "Use to switch sepeedo"
     TMP_cfg            = bits,    U08,   549,        [1:1],  "Log only", "Use as trans temperature"
     TMP_adc            = bits,    U08,   549,        [2:2],  "Log ADC count", "Log temperature"
	 In4_cfg            = bits,    U08,   549,        [3:3],  "Speedo Switch/Logging", "Additional Lever Input"
  LUF_on                = scalar,  U08,   550,                "%",         1.00,    0.00000,     0.0,  100.0,        0    ; Lock-Up feel solenoid on state (%) - imperial
#if NOT_METRIC  
  min_speed             = scalar,  U08,   551,                "mph",       0.10,    0.00000,     0.0,  10.00,        1    ; mimimum speed for VSS filtering
#else
  min_speed             = scalar,  U08,   551,                "kph",       0.10,    0.00000,     0.0,  15.00,        1    ; mimimum speed for VSS filtering
#endif
  vss_error_max         = scalar,  U16,   552,                "",          1.00,    0.0000,      0.0, 50000.00,      0    ; 
  line_units            = bits,    U08,   554,        [0:1],  "Use pressure table", "Report ADC count"; ,"Use as Engine Brake Input",[INVALID]
  inj_flow              = scalar,  U16,   555,                "pph",       0.01,    0.0000,      0.0, 200.00,        2    ; injector flow rate (lb/hr)
  open_time             = scalar,  U08,   557,                "msec",      0.01,    0.0000,      0.0,   2.55,        2    ; injector open time
  fuel_density          = scalar,  U16,   558,                "lb/gal",    0.001,   0.0000,      0.0, 32.000,        3    ; fuel density in pounds per gallon
  nSquirts              = scalar,  U08,   560,                "",          1.00,    0.0000,      1.0, 16.000,        0    ; number of squirts (divide by 2 if alternating)
  refresh_int           = scalar,  U16,   561,                "msec",      1.00,    0.0000,       10,  20000,        0    ; the interval time (msec) between dithers for output1 and output2
  refresh_dur           = scalar,  U16,   563,                "msec",      1.00,    0.0000,        0,  10000,        0    ; the 100% duty cycle time for output1 and output2
  dither_intPC          = scalar,  U16,   565,                "msec",      1.00,    0.0000,       10,  20000,        0    ; the interval time (msec) between dithers for the pressure control output
  dither_durPC          = scalar,  U16,   567,                "msec",      1.00,    0.0000,        0,  10000,        0    ; the 100% duty cycle time for the pressure control output
  out12_pwm_off         = scalar,  U08,   569,                "msec",      0.128,   0.0000,        0,  32.64,        3    ; output1 and output2 off duration (in 0.128 clock tics)
  out12_pwm_on          = scalar,  U08,   570,                "msec",      0.128,   0.0000,    0.128,  32.64,        3    ; output1 and output2 off duration (in 0.128 clock tics)
  brake_ON_polarity     = bits,    U08,   571,        [0:0], "Low Volts is Brake ON", "High Volts (12V) is Brake ON"              
  WOT_tps_threshold     = scalar,  U16,   572,                "%",         0.0976,  0.0000,        50,   100,        1    ; TPS from MS-II over CAN   
  iss_mask              = scalar,  U08,   574,                "%",         1.00,    0.00000,     0.0  200.00,        0    ; ISS interrupt mask (%)
  ic2_usage             = bits,    U08,   575,        [0:1],  "Disable", "Input Shaft Speed", "Tach Input", "INVALID"
  ic2_edge              = bits,    U08,   575,        [7:7],  "Rising Edge", "Falling Edge"
  iss_divider           = scalar,  U08,   576,                "teeth/rev", 1.00,    0.0000,       1,    255,         0    ; ISS/tach divider (number of teeth/rev)   
  activate_xrate        = scalar,  U08,   577,                "",          1.00,    0.0000,       0,    255,         0    ; 8 bits, one for each CAN outmsg.  When bit m set to 1, message m will be auto xmitted at rate outmsg[m].xrate.
  num_gears             = scalar,  U08,   578,                "",          1.00,    0.0000,       1,      8,         0    ; number of forward gears
  gear5_retard          = scalar,  S16,   579,                "deg",      -0.10,    0.00000,      0.0, 25.5,         1    ; 5th gear timing retard
  gear6_retard          = scalar,  S16,   581,                "deg",      -0.10,    0.00000,      0.0, 25.5,         1    ; 6th gear timing retard  
  gear7_retard          = scalar,  S16,   583,                "deg",      -0.10,    0.00000,      0.0, 25.5,         1    ; 7th gear timing retard
  gear8_retard          = scalar,  S16,   585,                "deg",      -0.10,    0.00000,      0.0, 25.5,         1    ; 8th gear timing retard  
  mlever_v5             = scalar,  U16,   587,                "volts",  0.00489,    0.00000,      0,    5.0,         2    ; Volts for 5th (converted from ADC count)
  mlever_v6             = scalar,  U16,   589,                "volts",  0.00489,    0.00000,      0,    5.0,         2    ; Volts for 6th (converted from ADC count)
  mlever_v7             = scalar,  U16,   591,                "volts",  0.00489,    0.00000,      0,    5.0,         2    ; Volts for 7th (converted from ADC count)
  mlever_v8             = scalar,  U16,   593,                "volts",  0.00489,    0.00000,      0,    5.0,         2    ; Volts for 8th (converted from ADC count)
  Adj_blk               = scalar,  U08,   595,                "",          1.00,    0.00000,      0      16,         0    ; Fuel/Spark/Idle block on MS-II
  Adj_varoffset         = scalar,  U16,   596,                "",          1.00,    0.00000,      0     1024,        0    ; Fuel/Spark/Idle offset on MS-II
  stdout_cfg            = bits,    U08,   598,        [0:0], "SPR2/cluch output", "Shift Solenoid"
  LED11                 = bits,    U08,   599,        [0:0], "off", "ON"
  LED12                 = bits,    U08,   599,        [1:1], "off", "ON"
  LED13                 = bits,    U08,   599,        [2:2], "off", "ON"
  LED14                 = bits,    U08,   599,        [3:3], "off", "ON"
  LED15                 = bits,    U08,   599,        [4:4], "off", "ON"
  LED16                 = bits,    U08,   599,        [5:5], "off", "ON"  
  LED17                 = bits,    U08,   599,        [6:6], "off", "ON"  
  LED18                 = bits,    U08,   599,        [7:7], "off", "ON"
  LED21                 = bits,    U08,   600,        [0:0], "off", "ON"
  LED22                 = bits,    U08,   600,        [1:1], "off", "ON"
  LED23                 = bits,    U08,   600,        [2:2], "off", "ON"
  LED24                 = bits,    U08,   600,        [3:3], "off", "ON"
  LED25                 = bits,    U08,   600,        [4:4], "off", "ON"
  LED26                 = bits,    U08,   600,        [5:5], "off", "ON"  
  LED27                 = bits,    U08,   600,        [6:6], "off", "ON"  
  LED28                 = bits,    U08,   601,        [7:7], "off", "ON"
  LED31                 = bits,    U08,   601,        [0:0], "off", "ON"
  LED32                 = bits,    U08,   601,        [1:1], "off", "ON"
  LED33                 = bits,    U08,   601,        [2:2], "off", "ON"
  LED34                 = bits,    U08,   601,        [3:3], "off", "ON"
  LED35                 = bits,    U08,   601,        [4:4], "off", "ON"
  LED36                 = bits,    U08,   601,        [5:5], "off", "ON"  
  LED37                 = bits,    U08,   601,        [6:6], "off", "ON"  
  LED38                 = bits,    U08,   601,        [7:7], "off", "ON"
  LED41                 = bits,    U08,   602,        [0:0], "off", "ON"
  LED42                 = bits,    U08,   602,        [1:1], "off", "ON"
  LED43                 = bits,    U08,   602,        [2:2], "off", "ON"
  LED44                 = bits,    U08,   602,        [3:3], "off", "ON"
  LED45                 = bits,    U08,   602,        [4:4], "off", "ON"
  LED46                 = bits,    U08,   602,        [5:5], "off", "ON"  
  LED47                 = bits,    U08,   602,        [6:6], "off", "ON"  
  LED48                 = bits,    U08,   602,        [7:7], "off", "ON"
  LEDN1                 = bits,    U08,   603,        [0:0], "off", "ON"
  LEDN2                 = bits,    U08,   603,        [1:1], "off", "ON"
  LEDN3                 = bits,    U08,   603,        [2:2], "off", "ON"
  LEDN4                 = bits,    U08,   603,        [3:3], "off", "ON"
  LEDR1                 = bits,    U08,   604,        [0:0], "off", "ON"
  LEDR2                 = bits,    U08,   604,        [1:1], "off", "ON"
  LEDR3                 = bits,    U08,   604,        [2:2], "off", "ON"
  LEDR4                 = bits,    U08,   604,        [3:3], "off", "ON"
  LEDR1alt              = bits,    U08,   604,        [4:4], "off", "ON"
  LEDR2alt              = bits,    U08,   604,        [5:5], "off", "ON"
  LEDR3alt              = bits,    U08,   604,        [6:6], "off", "ON"
  LEDR4alt              = bits,    U08,   604,        [7:7], "off", "ON"  
  IACAdjngear           = scalar,  S16,   605,                "",         -1.00,    0.00000,     -25,      25,     0    ; Idle adjustment on MS-II  when gear == 1, tps == 0, speed == 0       
  AdvAdjngear           = scalar,  S16,   607,             "deg",          0.10,    0.00000,     0.0,    25.5,     1    ; Advance adjustment on MS-II  when gear == 1, tps == 0, speed == 0       
  idle_tps_adc          = scalar,  U16,   609,               "%",        0.0976,     0.0000,       2,      50,     1    ; TPS% (adc count/1024) below which is considered idle
  can_testout           = bits,    U08,   611,       [0:0], "Get all vars", "Get only required vars"
#if NOT_METRIC
  min_manual_speed      = scalar,  S16,   612,             "mph",          0.10,    0.00000,      -1,     150,     1    ; minimum speed in manual before switch to auto
#else
  min_manual_speed      = scalar,  S16,   612,             "kph",          0.10,    0.00000,      -1,     200,     1    ; minimum speed in manual before switch to auto
#endif
  shft_btn_polarity     = bits,    U08,   614,        [0:0], "active low", "active high"
  TCC_PWM               = bits,    U08,   615,        [0:0], "ON/OFF TCC", "Use PWM for TCC"
  spareInputs           = bits,    U08,   616,        [0:1], "use as ADCs", "use as Shift Outputs", "Input2 as Output5 - Input3 as ADC", "INVALID"
  Output5               = scalar,  U16,   617,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for 3/2sol 
       Out51            = bits,    U16,   617,        [0:0],    "off", "ON"; 
       Out52            = bits,    U16,   617,        [1:1],    "off", "ON";
       Out53            = bits,    U16,   617,        [2:2],    "off", "ON";
       Out54            = bits,    U16,   617,        [3:3],    "off", "ON";
       Out55            = bits,    U16,   617,        [4:4],    "off", "ON";
       Out56            = bits,    U16,   617,        [5:5],    "off", "ON";
       Out57            = bits,    U16,   617,        [6:6],    "off", "ON";
       Out58            = bits,    U16,   617,        [7:7],    "off", "ON";
       Out59            = bits,    U16,   617,        [8:8],    "off", "ON"; 
       Out510           = bits,    U16,   617,        [9:9],    "off", "ON";
       Out511           = bits,    U16,   617,        [10:10],  "off", "ON";
       Out512           = bits,    U16,   617,        [11:11],  "off", "ON";
       Out513           = bits,    U16,   617,        [12:12],  "off", "ON";
       Out514           = bits,    U16,   617,        [13:13],  "off", "ON";
       Out515           = bits,    U16,   617,        [14:14],  "off", "ON";
       Out516           = bits,    U16,   617,        [15:15],  "off", "ON"; 
  Output6               = scalar,  U16,   619,                       "",     1.00000,    0.00000,      0,    127,        0    ; output pattern for 3/2sol 
       Out61            = bits,    U16,   619,        [0:0],    "off", "ON"; 
       Out62            = bits,    U16,   619,        [1:1],    "off", "ON";
       Out63            = bits,    U16,   619,        [2:2],    "off", "ON";
       Out64            = bits,    U16,   619,        [3:3],    "off", "ON";
       Out65            = bits,    U16,   619,        [4:4],    "off", "ON";
       Out66            = bits,    U16,   619,        [5:5],    "off", "ON";
       Out67            = bits,    U16,   619,        [6:6],    "off", "ON";
       Out68            = bits,    U16,   619,        [7:7],    "off", "ON";
       Out69            = bits,    U16,   619,        [8:8],    "off", "ON"; 
       Out610           = bits,    U16,   619,        [9:9],    "off", "ON";
       Out611           = bits,    U16,   619,        [10:10],  "off", "ON";
       Out612           = bits,    U16,   619,        [11:11],  "off", "ON";
       Out613           = bits,    U16,   619,        [12:12],  "off", "ON";
       Out614           = bits,    U16,   619,        [13:13],  "off", "ON";
       Out615           = bits,    U16,   619,        [14:14],  "off", "ON";
       Out616           = bits,    U16,   619,        [15:15],  "off", "ON"; 
 PWM_enable             = scalar,  U08,   621,         "",   0,    1.00000,      0,     255,     0    ; PWM enable
      PWM_enable1       = bits,    U08,   621,        [0:0],    "on/off", "PWM";
      PWM_enable2       = bits,    U08,   621,        [1:1],    "on/off", "PWM";
      PWM_enable3       = bits,    U08,   621,        [2:2],    "on/off", "PWM";
      PWM_enable4       = bits,    U08,   621,        [3:3],    "on/off", "PWM";
      PWM_enable5       = bits,    U08,   621,        [4:4],    "on/off", "PWM";
      PWM_enable6       = bits,    U08,   621,        [5:5],    "on/off", "PWM";
#if NOT_METRIC
  maxSpeed              = scalar,  S16,   622,             "mph",          0.10,    0.00000,      100,     300,     1    ; maximum speed for VSS filtering
#else
  maxSpeed              = scalar,  S16,   622,             "kph",          0.10,    0.00000,      160,     400,     1    ; maximum speed for VSS filtering
#endif
  resetTime             = scalar,  U08,   624,             "sec",          0.10,    0.00000,        0,    25.5,     1    ; time to ignore fitering after reset   
  TCC_counter           = scalar,  U08,   625,             "sec",          0.10,    0.00000,        0,    25.5,     1    ; time (seconds x10) to disable TCC lock-up after unlocking  
  STCC_rpm              = scalar,  U16,   626,             "rpm",          1.00,    0.00000,     2200,    9000,     0    ; full time TCC lock up minimum rpm
  STCC_gear             = scalar,  U08,   628,                "",          1.00,    0.00000,        3,       8,     0    ; full time TCC lock up minimum gear
  STCC_ULrpm            = scalar,  U16,   629,             "rpm",          1.00,    0.00000,     2200,    9000,     0    ; full time TCC lock up minimum rpm
  VSSsmoothFactor       = scalar,  U08,   631,                "",          1.00,    0.00000,        2,      12,     0    ; VSS smoothing factor   
  WOT_dur               = scalar,  U08,   632,             "sec",          1.00,    0.00000,        0,      20,     0    ; WOT duration   
  ; ****************************************************************** end inpram *********************

;     pageSize =  632 + 1 = 633 bytes



   page = 2
; *************** in2ram ****************************************************************************
; not used at present, but put in place for future expansion
spare21            = scalar,   S16,    0,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare1 in in2ram
spare22            = scalar,   S16,    2,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare2 in in2ram
spare23            = scalar,   S16,    4,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare3 in in2ram
spare24            = scalar,   S16,    6,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare4 in in2ram
spare25            = scalar,   S16,    8,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare5 in in2ram
spare26            = scalar,   S16,   10,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare6 in in2ram
spare27            = scalar,   S16,   12,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare7 in in2ram
spare28            = scalar,   S16,   14,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare8 in in2ram
spare29            = scalar,   S16,   16,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare9 in in2ram
spare210           = scalar,   S16,   18,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare10 in in2ram
spare211           = scalar,   S16,   20,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare11 in in2ram
spare212           = scalar,   S16,   22,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare11 in in2ram
spare213           = scalar,   S16,   24,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare13 in in2ram
spare214           = scalar,   S16,   26,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare14 in in2ram
spare215           = scalar,   S16,   28,                        "",     1.00000,    0.00000,      0,  32000,        0    ; spare15 in in2ram
; ****************************************************************** end in2ram *********************
;     pageSize =  28 + 2 = 30

[Menu]

   ;----------------------------------------------------------------------------
   ;  There are five pre-defined values that may be used to define your menus.
   ;  The first four allow access to the "standard" dialog boxes, the last one
   ;  merely draws a separator (horizontal line) in the menu.
   ;
   ;     std_constants
   ;     std_enrichments
   ;     std_realtime
   ;     std_warmup
   ;     std_accel
   ;
   ;     std_separator
   ;
   ;  If you use any of the std_constants, std_enrichments or std_warmup
   ;  editors, they may be optionally suffixed with a page number (only
   ;  useful for multi-page code variants), which causes them to edit the
   ;  specified page.  If you leave off the page specifier, they edit logical
   ;  page one as specified in the Constants section.
   ;
   ;  There are four special menu names, which when used append to the standard
   ;  menus of the same name instead of creating a new one.  The menu names
   ;  are "File", "Communications", "Tools" and "Help".
   ;
   ;----------------------------------------------------------------------------

   menuDialog = main
      menu = "&General Settings"
         subMenu = revlimits,      "&Rev Limits"
         subMenu = gearRatios,     "&Gear Ratios" 
         subMenu = shiftFactors,   "&Shift Factors"
		 subMenu = throttleFactors,"T&hrottle Factors"
         subMenu = PWMSettings,    "Solenoid &PWM Setup"
		 subMenu = retards,        "Timing &Adjustments"
		 subMenu = idleAdj,        "I&dle-Up Adjustment"
         subMenu = VSSSettings,    "&VSS Setup"
		 subMenu = MPGSettings,    "&MPG Settings"	
         subMenu = stdIN,          "Standard &Inputs/Ouputs Configuration"
         subMenu = Dither,         "P&WM Refresh/Dither"
         subMenu = ISSSettings,    "ISS/&non-CAN Tach Setup"
         subMenu = noCANload,      "non-CAN &Load Calibration",      0,   { !CAN_enabled }
         subMenu = Units,          "&Units"
         subMenu = errorCheck,     "&Error Behavior"

   menuDialog = main
       menu = "Shift &Input Patterns"
	     subMenu = leverType,      "&Configure Lever Type"
         subMenu = std_separator   ;----------------------------------------------
		 subMenu = InPatternGP,    "&Input Pattern in Park",      0, {mlever_mode==0}
		 subMenu = InPatternGN,    "&Input Pattern in Neutral",   0, {mlever_mode==0}
		 subMenu = InPatternGR,    "&Input Pattern in Reverse",   0, {mlever_mode==0}
		 subMenu = InPatternG1,    "&Input Pattern in 1st",       0, {mlever_mode==0}
		 subMenu = InPatternG2,    "&Input Pattern in 2nd",       0, {mlever_mode==0}
         subMenu = InPatternG3,    "&Input Pattern in 3rd",       0, {mlever_mode==0}
		 subMenu = InPatternG4,    "&Input Pattern in 4th",       0, {mlever_mode==0}
		 subMenu = InPatternG5,    "&Input Pattern in 5th",       0, {mlever_mode==0 && num_gears > 4}
		 subMenu = InPatternG6,    "&Input Pattern in 6th",       0, {mlever_mode==0 && num_gears > 5}
		 subMenu = InPatternG7,    "&Input Pattern in 7th",       0, {mlever_mode==0 && num_gears > 6}
		 subMenu = InPatternG8,    "&Input Pattern in 8th",       0, {mlever_mode==0 && num_gears > 7}
         subMenu = InPattern1b,    "Configure I&nputs",           0, {mlever_mode==1}

	menuDialog = main
       menu = "S&hift Ouput Patterns"
         subMenu = outPatternGP, "Ouput Pattern in Park" 
		 subMenu = outPatternGN, "Ouput Pattern in Neutral"
		 subMenu = outPatternGR, "Ouput Pattern in Reverse"
		 subMenu = outPatternG1, "Ouput Pattern in 1st"
		 subMenu = outPatternG2, "Ouput Pattern in 2nd"
		 subMenu = outPatternG3, "Ouput Pattern in 3rd"
		 subMenu = outPatternG4, "Ouput Pattern in 4th"
		 subMenu = outPatternG5, "Ouput Pattern in 5th", 0, {num_gears > 4}
		 subMenu = outPatternG6, "Ouput Pattern in 6th", 0, {num_gears > 5}
		 subMenu = outPatternG7, "Ouput Pattern in 7th", 0, {num_gears > 6}
		 subMenu = outPatternG8, "Ouput Pattern in 8th", 0, {num_gears > 7}
         subMenu = std_separator   ;----------------------------------------------
         subMenu = clutch1,        "Clutc&h Pattern 1",  0, {clutch_enable==1}
         subMenu = clutch2,        "Clutch P&attern 2",  0, {clutch_enable==1}

   menuDialog = main
      menu = "TCC Setti&ngs"
         subMenu = TCCSettings,    "&TCC Control Limits"
         subMenu = LUFparams,      "T&CC LOAD/PWM% Parameters",  0, {(clutch_enable==2) || (TCC_PWM == 1)}  
		  
   menuDialog = main
      menu = "T&ables"
         subMenu = geartable,      "&Gear Auto-Shift Table"
         subMenu = pctable,        "&Pressure Control Table",         0

   menuDialog = main
      menu = "&Bins"
        subMenu = loadBins,        "Edit &MAP Bins"
        subMenu = mphBins,         "Edit &Speed Bins"
        subMenu = tempBins,        "Edit &Temperature Bins"
		
   menuDialog = main
      menu = "L&ED Patterns"
		subMenu = Gear1pattern,    "&1st LED Pattern"
		subMenu = Gear2pattern,    "&2nd LED Pattern"
		subMenu = Gear3pattern,    "&3rd LED Pattern"
		subMenu = Gear4pattern,    "&4th LED Pattern"
		subMenu = Gear5pattern,    "&5th LED Pattern", 0, {num_gears > 4}
		subMenu = Gear6pattern,    "&6th LED Pattern", 0, {num_gears > 5}
		subMenu = Gear7pattern,    "&7th LED Pattern", 0, {num_gears > 6}
		subMenu = Gear8pattern,    "&8th LED Pattern", 0, {num_gears > 7}
		subMenu = GearNpattern,    "&Neutral LED Pattern"
		subMenu = GearRpattern,    "&Reverse LED Pattern"
		
   menuDialog = main
      menu = "&Tuning"
         subMenu = gearmap,        "&Gear Shift Table"
         subMenu = pcmap,          "&Pressure Control Table",         0
         subMenu = PCtemp_adjust,  "&Line Pressure vs. Temp."

   menuDialog = main
      menu = "&Spare Ports"
         subMenu = spareport1,     "&Spare Port 1 (VB1)", 0, {clutch_enable==0 || clutch_enable==2}
         subMenu = spareport2,     "S&pare Port 2 (VB2)", 0, {clutch_enable==0  && !stdout_cfg}
	     subMenu = CltuchOut,      "&Clutch Outputs"

   menuDialog = main
      menu = "T&ools"
      subMenu = std_ms2gentherm,  "&Calibrate T&hermistor Table..."
      subMenu = canconfig,        "C&AN Configuration"

   menu = "&Help"
      subMenu = helpGeneral,      "&MegaShift/GPIO Info"

;-------------------------------------------------------------------------------


[UserDefined]

   dialog = revlimits, "Rev Limits"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gr"
      field = "#Rev Limits"
      field = "#(shift not allowed if it will"
      field = "#result in exceeding these limits)"
      field = "RPM Checking",             rpm_check
      field = "Lower Rev Limit",          under_rev_limit, { rpm_check }
      field = "Upper Rev Limit",          rpm_limit,       { rpm_check }

  dialog = errorCheck, "Error Behavior"
      topicHelp="http://www.msgpio.com/manuals/mshift/V2tune.html#ge"
      field = "On error",                 error_check
      field = "If set, errors are displayed in" 
	  field = "'Codes' indicator below,"
      field = "in the Error gauge, and datalog."
      field = "Otherwise they are ignored."

   dialog = VSSSettings, "VSS Settings"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gv"
	  field = "Number of VSS Teeth",     num_teeth
      field = "Input Capture Edge",      InputCaptureEdge
	  field = "VSS Input Masking",       vss_mask
	  field = "VSS Smoothing Factor",    VSSsmoothFactor
	  field = "Max. Vehicle Speed",      maxSpeed
	  field = "Min. Vehicle Speed",      min_speed
      field = "Max. Errors to Reset",    vss_error_max
	  field = "Reset filter off",        resetTime
      field = "Axle Ratio",              axle_ratio
      field = "Tire Diameter",           tire_diam
      field = "Output pulse/mile(km)",   pulse_mile
      field = "4WD Speedo Correction",   FWD_factor,    { FWD_cfg && !In4_cfg}
      field = "!Any changes to above require"
	  field = "!a restart to take effect"
	  
   dialog = MPGSettings, "MPG Settings"	  
      field = "Injector Flow Rate",       inj_flow
      field = "Injector Open Time",       open_time
      field = "Fuel Density",             fuel_density
      field = "Number of Squirts",        nSquirts
      field = "#divide by 2 if alternating"
	  
   dialog = ISSSettings, "ISS/non-CAN Tach Settings"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gn"
      field = "!ISS/Tach Input Usage",    ic2_usage
      field = "Pulses/Revolution",        iss_divider,       { ic2_usage > 0 }
      field = "Input Mask",               iss_mask,          { ic2_usage > 0 }
      field = "!Input Capture Edge",      ic2_edge,          { ic2_usage > 0 }

   dialog = retards, "Timing Adjustments"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#ga"
      field = "Retard only above",       Tretard_load,      { CAN_enabled }
      field = "Upshift Retard",          upshift_retard,    { CAN_enabled }
      field = "Downshift Retard",        dwnshift_retard,   { CAN_enabled }
      field = "2nd Gear Retard",         gear2_retard,      { CAN_enabled }
      field = "3rd Gear Retard",         gear3_retard,      { CAN_enabled }
      field = "4th Gear Retard",         gear4_retard,      { CAN_enabled }
	  field = "5th Gear Retard",         gear5_retard,      { CAN_enabled && num_gears > 4}
	  field = "6th Gear Retard",         gear6_retard,      { CAN_enabled && num_gears > 5}
	  field = "7th Gear Retard",         gear7_retard,      { CAN_enabled && num_gears > 6}
	  field = "8th Gear Retard",         gear8_retard,      { CAN_enabled && num_gears > 7}
	  
   dialog = idleAdj, "Idle-Up Adjustments"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gd"
	  field = "#Adjustments applied ONLY if"
	  field = "#stopped in 1st gear with TPS=0"
	  field = "Timing Adjustment",      AdvAdjngear
      field = "Idle Valve Adjustment",  IACAdjngear,       { CAN_enabled }
	  field = "in % if PWM Idle Valve, in steps if stepper IAC."
	  field = "Can be positive or negative."

   dialog = gearRatios, "Gear Ratios"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gg"
	  field = "Number of forward gears", num_gears
      field = "First Gear",              gear1
      field = "Second Gear",             gear2
      field = "Third Gear",              gear3
      field = "Fourth Gear",             gear4
	  field = "Fifth Gear",              gear5,          { num_gears > 4 }
	  field = "Sixth Gear",              gear6,          { num_gears > 5 }
	  field = "Seventh Gear",            gear7,          { num_gears > 6 }
	  field = "Eighth Gear",             gear8,          { num_gears > 7 }
      field ="#"
      field = "Reverse Gear",            gearR

   dialog = Dither, "PWM Refresh and Dithering"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gw"
      field = "PWM Refresh Interval",    refresh_int
      field = "PWM Refresh Duration",    refresh_dur
      field = "PC Dither Interval",      dither_intPC
      field = "PC Dither Duration",      dither_durPC

  dialog = outPatternGP, "Output Pattern in Park"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out11
	  field = "Output 2",   Out21
      field = "Output 3",   Out31
	  field = "Output 4",   Out41, { stdout_cfg > 0 }
	  field = "Output 5",   Out51, { spareInputs==1 || spareInputs==2}
	  field = "Output 6",   Out61, { spareInputs==1 }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."

   dialog = outPatternGN, "Output Pattern in Neutral"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out12
	  field = "Output 2",   Out22
      field = "Output 3",   Out32
	  field = "Output 4",   Out42, { stdout_cfg > 0 }
	  field = "Output 5",   Out52, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out62, { spareInputs==1 }
	  field = "Change only when off-line."
	  
   dialog = outPatternGR, "Output Pattern in Reverse"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out13
	  field = "Output 2",   Out23
      field = "Output 3",   Out33
	  field = "Output 4",   Out43, { stdout_cfg > 0 }
	  field = "Output 5",   Out53, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out63, { spareInputs==1 }
	  field = "Change only when off-line."
	  
   dialog = outPatternG1, "Output Pattern in 1st"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out14
	  field = "Output 2",   Out24
      field = "Output 3",   Out34
	  field = "Output 4",   Out44, { stdout_cfg > 0 }
	  field = "Output 5",   Out54, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out64, { spareInputs==1 }
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
   dialog = outPatternG2, "Output Pattern in 2nd"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out15
	  field = "Output 2",   Out25
      field = "Output 3",   Out35
	  field = "Output 4",   Out45, { stdout_cfg > 0 }
	  field = "Output 5",   Out55, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out65, { spareInputs==1 }
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
   dialog = outPatternG3, "Output Pattern in 3rd"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out16
	  field = "Output 2",   Out26
      field = "Output 3",   Out36
	  field = "Output 4",   Out46, { stdout_cfg > 0 }
	  field = "Output 5",   Out56, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out66, { spareInputs==1 }
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
   dialog = outPatternG4, "Output Pattern in 4th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out17
	  field = "Output 2",   Out27
      field = "Output 3",   Out37
	  field = "Output 4",   Out47, { stdout_cfg > 0 }
      field = "Output 5",   Out57, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out67, { spareInputs==1 }	  
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
   dialog = outPatternG5, "Output Pattern in 5th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out18
	  field = "Output 2",   Out28
      field = "Output 3",   Out38
	  field = "Output 4",   Out48, { stdout_cfg > 0 }
	  field = "Output 5",   Out58, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out68, { spareInputs==1 }
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
  dialog = outPatternG6, "Output Pattern in 6th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out19
	  field = "Output 2",   Out29
      field = "Output 3",   Out39
	  field = "Output 4",   Out49, { stdout_cfg > 0 }
      field = "Output 5",   Out59, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out69, { spareInputs==1 }	  
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
  dialog = outPatternG7, "Output Pattern in 7th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out110
	  field = "Output 2",   Out210
      field = "Output 3",   Out310
	  field = "Output 4",   Out410, { stdout_cfg > 0 }
      field = "Output 5",   Out510, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out610, { spareInputs==1 }	  
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
  dialog = outPatternG8, "Output Pattern in 8th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#h"
	  field = "Output 1",   Out111
	  field = "Output 2",   Out211
      field = "Output 3",   Out311
	  field = "Output 4",   Out411, { stdout_cfg > 0 }
	  field = "Output 5",   Out511, { spareInputs==1 || spareInputs==2 }
	  field = "Output 6",   Out611, { spareInputs==1 }
	  field = "Must be unique for each forward gear."
	  field = "Change only when off-line."
	  
  dialog = Gear1pattern, "1st Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED11
      field = "LED2",    LED21
      field = "LED3",    LED31
      field = "LED4",    LED41

  dialog = Gear2pattern, "2nd Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED12
      field = "LED2",    LED22
      field = "LED3",    LED32
      field = "LED4",    LED42
	  
  dialog = Gear3pattern, "3rd Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED13
      field = "LED2",    LED23
      field = "LED3",    LED33
      field = "LED4",    LED43
	  
  dialog = Gear4pattern, "4th Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED14
      field = "LED2",    LED24
      field = "LED3",    LED34
      field = "LED4",    LED44
	  
  dialog = Gear5pattern, "5th Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED15
      field = "LED2",    LED25
      field = "LED3",    LED35
      field = "LED4",    LED45
	  
  dialog = Gear6pattern, "6th Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED16
      field = "LED2",    LED26
      field = "LED3",    LED36
      field = "LED4",    LED46
	  
  dialog = Gear7pattern, "7th Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED17
      field = "LED2",    LED27
      field = "LED3",    LED37
      field = "LED4",    LED47
	  
  dialog = Gear8pattern, "8th Gear LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LED18
      field = "LED2",    LED28
      field = "LED3",    LED38
      field = "LED4",    LED48
	  
  dialog = GearNpattern, "Neutral LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LEDN1
      field = "LED2",    LEDN2
      field = "LED3",    LEDN3
      field = "LED4",    LEDN4
	  
  dialog = GearRpattern, "Reverse LED Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#e"
      field = "LED1",    LEDR1
      field = "LED2",    LEDR2
      field = "LED3",    LEDR3
      field = "LED4",    LEDR4
	  field = "alternating pattern (can be the same)"
      field = "LED1",    LEDR1alt
      field = "LED2",    LEDR2alt
      field = "LED3",    LEDR3alt
      field = "LED4",    LEDR4alt

   dialog = leverType, "Manual Lever Type"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#li"
      field = "#Input 1 = PAD00/EGT4/Amp26"
	  field = "#Input 2 = PAD01/GPI2/Amp6"
      field = "#Input 3 = PAD03/EGT3/Amp25"
      field = "Manual Lever Mode",          mlever_mode
      field = "Digital Voltage Threshold",  digital_threshold, {mlever_mode==0}
      field = "Overdrive (4th) Selector",   swBDC_OD, {mlever_mode==1}
	  
   dialog =   CltuchOut, "Configure Clutch Outputs"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#sc"
      field = "#SP1 = PT7/VB1/Amp11, SP2 = PA0/VB2/Amp12"
      field = "!Spare Port Usage",          clutch_enable,  {!stdout_cfg}

   dialog = clutch1, "Clutch Output1 Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#lp"
      field = "#Spare Output 1 - VB1/Amp11"
      field = "UPSHIFTS"
      field = "SP1 on 1 to 2", clutch11u,  {clutch_enable==1}
      field = "SP1 on 2 to 3", clutch12u,  {clutch_enable==1}	  
      field = "SP1 on 3 to 4", clutch13u,  {clutch_enable==1}
      field = "SP1 on 4 to 5", clutch14u,  {clutch_enable==1 && num_gears > 4}
	  field = "SP1 on 5 to 6", clutch15u,  {clutch_enable==1 && num_gears > 5}	  
      field = "SP1 on 6 to 7", clutch16u,  {clutch_enable==1 && num_gears > 6}
      field = "SP1 on 7 to 8", clutch17u,  {clutch_enable==1 && num_gears > 7}
      field = "DOWNSHIFTS"
      field = "SP1 on 2 to 1", clutch11d,  {clutch_enable==1}
      field = "SP1 on 3 to 2", clutch12d,  {clutch_enable==1}
      field = "SP1 on 4 to 3", clutch13d,  {clutch_enable==1}
      field = "SP1 on 5 to 4", clutch14d,  {clutch_enable==1 && num_gears > 4}
      field = "SP1 on 6 to 5", clutch15d,  {clutch_enable==1 && num_gears > 5}
      field = "SP1 on 7 to 6", clutch16d,  {clutch_enable==1 && num_gears > 6}
      field = "SP1 on 8 to 7", clutch17d,  {clutch_enable==1 && num_gears > 7}
	  
   dialog = clutch2, "Clutch Output2 Pattern"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#lp"
      field = "#Spare Output 1 - VB2/Amp12"
      field = "UPSHIFTS"
	  field = "SP2 on 1 to 2", clutch21u,  {clutch_enable==1 && !stdout_cfg}
      field = "SP2 on 2 to 3", clutch22u,  {clutch_enable==1 && !stdout_cfg}	  
      field = "SP2 on 3 to 4", clutch23u,  {clutch_enable==1 && !stdout_cfg}
      field = "SP2 on 4 to 5", clutch24u,  {clutch_enable==1 && !stdout_cfg && num_gears > 4}
	  field = "SP2 on 5 to 6", clutch25u,  {clutch_enable==1 && !stdout_cfg && num_gears > 5}	  
      field = "SP2 on 6 to 7", clutch26u,  {clutch_enable==1 && !stdout_cfg && num_gears > 6}
      field = "SP2 on 7 to 8", clutch27u,  {clutch_enable==1 && !stdout_cfg && num_gears > 7}
      field = "DOWNSHIFTS"
	  field = "SP2 on 2 to 1", clutch21d,  {clutch_enable==1 && !stdout_cfg}
      field = "SP2 on 3 to 2", clutch22d,  {clutch_enable==1 && !stdout_cfg}
      field = "SP2 on 4 to 3", clutch23d,  {clutch_enable==1 && !stdout_cfg}
      field = "SP2 on 5 to 4", clutch24d,  {clutch_enable==1 && !stdout_cfg && num_gears > 4}
      field = "SP2 on 6 to 5", clutch25d,  {clutch_enable==1 && !stdout_cfg && num_gears > 5}
      field = "SP2 on 7 to 6", clutch26d,  {clutch_enable==1 && !stdout_cfg && num_gears > 6}
      field = "SP2 on 8 to 7", clutch27d,  {clutch_enable==1 && !stdout_cfg && num_gears > 7}

  dialog = InPatternGP, "Input Pattern in Park"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In11
	  field = "Input 2",   In21
      field = "Input 3",   In31
	  field = "Input 4",   In41, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  
  dialog = InPatternGN, "Input Pattern in Neutral"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In12
	  field = "Input 2",   In22
      field = "Input 3",   In32
	  field = "Input 4",   In42, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
  dialog = InPatternGR, "Input Pattern in Reverse"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In13
	  field = "Input 2",   In23
      field = "Input 3",   In33
	  field = "Input 4",   In43, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
   dialog = InPatternG1, "Input Pattern in 1st"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In14
	  field = "Input 2",   In24
      field = "Input 3",   In34
	  field = "Input 4",   In44, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
  dialog = InPatternG2, "Input Pattern in 2nd"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In15
	  field = "Input 2",   In25
      field = "Input 3",   In35
	  field = "Input 4",   In45, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
  dialog = InPatternG3, "Input Pattern in 3rd"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In16
	  field = "Input 2",   In26
      field = "Input 3",   In36
	  field = "Input 4",   In46, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
  dialog = InPatternG4, "Input Pattern in 4th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In17
	  field = "Input 2",   In27
      field = "Input 3",   In37
	  field = "Input 4",   In47, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
  dialog = InPatternG5, "Input Pattern in 5th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In18
	  field = "Input 2",   In28
      field = "Input 3",   In38
	  field = "Input 4",   In48, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  
  dialog = InPatternG6, "Input Pattern in 6th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In19
	  field = "Input 2",   In29
      field = "Input 3",   In39
	  field = "Input 4",   In49, { In4_cfg }
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  
  dialog = InPatternG7, "Input Pattern in 7th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In110
	  field = "Input 2",   In210
      field = "Input 3",   In310
	  field = "Input 4",   In410, { In4_cfg }	  
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  	  
  dialog = InPatternG8, "Input Pattern in 8th"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
	  field = "Input 1",   In111
	  field = "Input 2",   In211
      field = "Input 3",   In311
	  field = "Input 4",   In411, { In4_cfg }	
	  field = "Must be unique for each gear."
	  field = "Change only when off-line."
	  
   dialog = InPattern1b, "Input 1 Voltages"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#i"
      field = "#Input 1 - PAD00/GPI1/Amp5"
      field = "Park",          mlever_vP, {mlever_mode==1}
      field = "Reverse",       mlever_vR, {mlever_mode==1}
      field = "Neutral",       mlever_vN, {mlever_mode==1}
	  field = "1st",           mlever_v1, {mlever_mode==1}
	  field = "2nd",           mlever_v2, {mlever_mode==1}
      field = "3rd",           mlever_v3, {mlever_mode==1}
      field = "4th",           mlever_v4, {mlever_mode==1}
      field = "5th",           mlever_v5, {mlever_mode==1 && num_gears > 4}
      field = "6th",           mlever_v6, {mlever_mode==1 && num_gears > 5}
      field = "7th",           mlever_v7, {mlever_mode==1 && num_gears > 6}
      field = "8th",           mlever_v8, {mlever_mode==1 && num_gears > 7}
      field = "#Input2 &Input3"
      field = "!Input2 and Input3 Usage",   spareInputs	 
      field = "Using Inputs as shift solenoid outputs requires circuit modifications "
	  field = "with external ciomponents. See the manual for details"  

   dialog = shiftFactors, "Shift factors"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gs"
      field = "Auto Shift Mode",          shift_mode, {clutch_enable==0}
      field = "#1=sequential, 2=skip shift"
      field = "#(always used at start-up)"
      field = "Minimum Manual Speed" , min_manual_speed
	  field = "#min. man. speed = -1 to disable"
      field = "Shift Button Duration",    shftr_accum
	  field = "Digital Switch Debounce",  debounce, {mlever_mode==0}
      field = "LOAD Smoothing Factor",    LOADshortcount
;      field = "LOAD Long Term Filter Factor",       LOADlongcount -- implemented, but result not used, so not exposed
      field = "Max. Shift Line Pressure", max_shift_press
      field = "Shift Pressure Adjustment Delay", pressure_delay 
      field = "Shift Completion Delay",   shift_delay 
      field = "Shift Speed Hysteresis",   gear_hyst
      field = "Shift Load Hysteresis",    kpa_hyst
      field = "Hysteresis Enable Speed",  hyst_enable_speed
      field = "Line pressure in neutral", PCneutral

   dialog = throttleFactors, "Throttle factors"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gh"
      field = "WOT TPS Threshold",        WOT_tps_threshold
	  field = "Idle TPS Threshold",       idle_tps_adc
	  field = "WOT Duration",             WOT_dur

   dialog = PWMSettings, "Solenoid PWM Setup"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gp"
      field = "PC PWM Period",            PC_PWM_Pd
      field = "PC Voltage Correction",    BatFac
	  field = "#Ouput3 PWM Parameters"
      field = "Output3 PWM Period",       SOL32_PWM_Pd
      field = "Output3 DC when on",       out3dc
      field = "#Ouput1/2/4/5/6 PWM Parameters"
      field = "Output1/2/4/5/6 ON Period",    out12_pwm_on, { out12_pwm_off }
      field = "Output1/2/4/5/6 OFF Period",   out12_pwm_off
      field = "#Freq=1000/(ONperiod+OFFperiod), %=(ON Period/OFF Period)*100"
      field = "PWM Usage Output1",  PWM_enable1
	  field = "PWM Usage Output2",  PWM_enable2
	  field = "PWM Usage Output3",  PWM_enable3
	  field = "PWM Usage Output4",  PWM_enable4, { stdout_cfg > 0 }
	  field = "PWM Usage Output5",  PWM_enable5, { (mlever_mode == 1) && (spareInputs > 0) }
	  field = "PWM Usage Output6",  PWM_enable6, { (mlever_mode == 1) && (spareInputs == 2) }

   dialog = TCCSettings, "Torque Control Limits"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#nt"
      field = "Min. Gear for TCC Lock",   minTCC_gear
      field = "Min. TCC Lock-Up Speed",   minTCCspeed
      field = "Min. Temp. for TCC Lock",  noTCC_temp
      field = "Lock TCC Above Temperature", trans_temp_limit,  { TMP_cfg }
      field = "Max. TCC Load",            noTCC_load
	  field = "TCC Hysteresis Time",      TCC_counter
	  field = "TCC PWM Mode",             TCC_PWM
	  field = "Set TCC PWM parameters under"
	  field = "TCC LOAD/PWM% Parameters"
	  field = "and Solenoid PWM Setup"
	  field = "#Full-Time Lock Up"
	  field = "Lock At or Above RPM",     STCC_rpm
	  field = "Unlock At RPM",            STCC_ULrpm
	  field = "At or Above Gear",         STCC_gear	  
	  
   dialog = LUFparams, "TCC LOAD/PWM% Parameters"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#nc"
	  field = "TCC PWM Period",           TCC_PWM_Pd, {(clutch_enable==2) || (TCC_PWM == 1)} 
      field = "PWM% when TCC Unlocked",   LUF_off,    {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
	  field = "PWM% when TCC Locked",     LUF_on,     {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
	  field = "TCC PWM Taper Start Values"
      field = "# PWM Low Load:"
      field = "Low Load Value",           LUF_loLoad, {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
      field = "PWM% at Low Load",         LUF_loPWM,  {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
      field = "# PWM High Load:"
      field = "High Load Value",          LUF_hiLoad, {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
      field = "PWM% at High Load",        LUF_hiPWM,  {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
      field = "PWM Taper Time",           LUF_taper,  {(clutch_enable==2 && !stdout_cfg) || (TCC_PWM ==1)}
	  
   dialog = noCANload, "Non-CAN Load Settings"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gl"
      field = "Multiplier",               LOADmult,      { !CAN_enabled }
      field = "Load at 0 volts",          LOADzero,      { !CAN_enabled }
      field ="#Load is Voltage on pin 24"
      field ="#times Multiplier," 
      field ="#plus Load @ 0 volts"

   dialog = stdIN, "Standard Inputs/Outputs Configuration"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gi"	  
      field = "Temperature Sensor Usage",    TMP_cfg 
      field = "Temperature Sensor Logging",  TMP_adc,     { !TMP_cfg }
	  field = ""
      field = "Line Pressure Input",         line_units
	  field = "Shift Button polarity",       shft_btn_polarity
      field = "Brake Signal Polarity",       brake_ON_polarity
	  field = ""
	  field = "#GPI1/Amp5 INPUT Usage"
	  field = "Additional gear lever input", In4_cfg
      field = "2/4WD input usage",           FWD_cfg,     { !In4_cfg }  
      field = ""

   dialog = spareport1, "Spare Port 1 (PT7/VB1/Amp11)"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#ss"
      field = "Speed threshold",   sp1speed,          {clutch_enable==0 || clutch_enable==2}
      field = "Speed condition",   sp1speed_cond,     {clutch_enable==0 || clutch_enable==2}
      field = "Speed hysteresis",  sp1speed_hyst,     {clutch_enable==0 || clutch_enable==2}
      field = "#AND"
      field = "RPM threshold",     sp1rpm,            {clutch_enable==0 || clutch_enable==2}
      field = "RPM condition",     sp1rpm_cond,       {clutch_enable==0 || clutch_enable==2}
      field = "RPM hysteresis",    sp1rpm_hyst,       {clutch_enable==0 || clutch_enable==2}
      field = "#AND"
      field = "Load threshold",    sp1load,           {clutch_enable==0 || clutch_enable==2}
      field = "Load condition",    sp1load_cond,      {clutch_enable==0 || clutch_enable==2}
      field = "Load hysteresis",   sp1load_hyst,      {clutch_enable==0 || clutch_enable==2}
      field = "#AND"
      field = "Gear threshold",    sp1gear,           {clutch_enable==0 || clutch_enable==2}
      field = "Gear condition",    sp1gear_cond,      {clutch_enable==0 || clutch_enable==2}

   dialog = spareport2, "Spare Port 2 (PA0/VB2/Amp12)"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#sp"
	  field = "SparePort2/Shift Solenoid",   stdout_cfg 
	  field = "# "
      field = "Speed threshold",   sp2speed,          {clutch_enable==0}
      field = "Speed condition",   sp2speed_cond,     {clutch_enable==0}
      field = "Speed hysteresis",  sp2speed_hyst,     {clutch_enable==0}
      field = "#AND"
      field = "RPM threshold",     sp2rpm,            {clutch_enable==0}
      field = "RPM condition",     sp2rpm_cond,       {clutch_enable==0}
      field = "RPM hysteresis",    sp2rpm_hyst,       {clutch_enable==0}
      field = "#AND"
      field = "Load threshold",    sp2load,           {clutch_enable==0}
      field = "Load condition",    sp2load_cond,      {clutch_enable==0}
      field = "Load hysteresis",   sp2load_hyst,      {clutch_enable==0}
      field = "#AND"
      field = "Gear threshold",    sp2gear,           {clutch_enable==0}
      field = "Gear condition",    sp2gear_cond,      {clutch_enable==0}	
	
   dialog = canconfig, "CAN Configuration"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#oa"
      field = "#Controller Area Network set-up"
      field = "!CAN Usage",                CAN_enabled
      field = "!CAN ID (GPIO)",            trans_can_id,   { CAN_enabled }
	  field = "!CAN Fetch Rate",           can_var_rate,   { CAN_enabled }
      field = "CAN Load Variable",         load_type,      { CAN_enabled }
;      field = "!Board Type",               board_type,     { CAN_enabled }
      field = "!MS-II CAN ID",             ms2canID,       { 0 }           ; change to { 1 } to make editable
      field = "!MS-II outpc block",        ms2varBLK,      { 0 }           ; change to { 1 } to make editable
	  field = "!Outpc CAN message format", can_testout,    { CAN_enabled }
	  field = "Spark/Fuel/Idle Adjustments"
	  field = "!MS-II in2ram block",       Adj_blk,        { 0 }           ; change to { 1 } to make editable
	  field = "!MS-II variable offset",    Adj_varoffset,  { 0 }           ; change to { 1 } to make editable
	  field = ""
      field = "If CAN is disabled, load is determined"
      field = "from 0-5V auxillary input on AMP pin 24"
	  field = "See 'General Settings/Non-CAN Load Settings'"

   dialog = Units, "Units"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#gu"
      field = "!Metric/Imperial Units",   Metric_Units
      field = "This changes the values for the controller's internal" 
      field = "calculations, and the values returned to MegaTune."
      field = "To change the units displayed in MegaTune"
      field = "(ex. from mph to kph on the gauges),"
      field = "'deactivate' NOT_METRIC under"
      field = "Project/Project Properties."

   dialog = mphBins, "Edit Speed Bins"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#bm"
      field = "#Speed Bins for all Tables"
      array1D   = "", "Vehicle Speed %INDEX% ", vss_table

   dialog = loadBins, "Edit MAP Bins"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#bs"
      field = "#MAP Bins for all Tables"
      array1D   = "", "Load %INDEX% ",   LOAD_table

   dialog = tempBins, "Edit Temperature Table Values"
      topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#bt"
      field = "#Temperature Bins for Warmup, etc."
      array1D   = "", "Temperature %INDEX% ", temp_table

   help = sensorHelp, "Sensor Calibration"
      webHelp = "http://www.megamanual.com/megatune.htm#os"
      text = "MAP Sensor Calibration<br>"
      text = "<br>"
      text = "For the\tMPX4115   use\t10.6 and \t121.7<br>"
      text = "\tMPX4250\t\t10.0\t260.0<br>"
      text = "\tMPXH6300\t1.1\t315.5<br>"
      text = "\tGM 3-BAR\t1.1\t315.5<br>"
      text = "\tMPXH6400\t3.5\t416.5<br>"
      text = "<br>"
      text = "(GM 3-bar data from Dave Hartnell, http://www.not2fast.com/electronics/component_docs/MAP_12223861.pdf)<br>"
      text = "<br>"
      text = "\tSensor type\tvLo\tpLo\tvHi\tpHi\tvRef<br>"
      text = "\tMPX4115 \t0.204 v\t15 kPa\t4.794 v\t115 kPa\t5.100 v<br>"
      text = "\tMPX4250 \t0.204 v\t20 kPa\t4.896 v\t250 kPa\t5.100 v<br>"
      text = "\tMPXH6300\t0.306 v\t20 kPa\t4.913 v\t304 kPa\t5.100 v<br>"
      text = "\tGM 3-BAR\t0.631 v\t40 kPa\t4.914 v\t304 kPa\t5.100 v<br>"
      text = "\tMPXH6400\t0.200 v\t20 kPa\t4.800 v\t400 kPa\t5.000 v<br>"
      text = "<br>"
      text = "In general, use values derived from these equations:<br>"
      text = "<br>"
      text = "\tm = (pHi-pLo)/(vHi-vLo)<br>"
      text = "\tpv1 = pLo - m * vLo<br>"
      text = "\tpv2 = pv1 + m * vRef<br>"
      text = "<br>"
      text = "References:<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPX4115A.pdf<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPX4250A.pdf<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPXH6300A.pdf<br>"
      text = "\thttp://www.freescale.com/files/sensors/doc/data_sheet/MPXH6400A.pdf<br>"

   help = helpGeneral, "GPIO/4L60E General Help"
      webHelp = "http://www.megamanual.com/gpio/mshift/"
      text = "Al Grippo and Bruce Bowling have created the GPIO (general purpose"
      text = "input/output) board, which is an 'intelligent' input/output" 
      text = "expansion board that communicates with MegaSquirt-II(tm) via"
      text = "a CAN (controller area network)."
      text = "<br>"
      text = "The embedded code for the GPIO MegaShift(tm) trans controller is written"
      text = "in C, rather than assembly language, so it should be more accessible"
      text = "to more beginning programmers<br>"
      text = "<br>"
      text = "For the full manual, see: www.msgpio.com/manuals/mshift/"
      text = "<br>"
      text = "For current documentation, click the Web Help button below, or for"
      text = "support questions visit www.msgpio.com/forum/"

;-------------------------------------------------------------------------------

[CurveEditor]
   curve = PCtemp_adjust, "Temperature v. Line Pressure Adjustments"
      topicHelp   = "http://www.msgpio.com/manuals/mshift/V2tune.html#"
      columnLabel = "Temp.", "PC%"
      xAxis       = -40, 220, 9
      yAxis       =  -100,  100, 5
      xBins       = temp_table, clt
      yBins       = PCtemp
      gauge       = line_pressure

[TableEditor]
   ;       table_id,    map3d_id,    "title",      page
   table = geartable, gearmap, "Gear Shift Table", 2
      ;             constant,   variable
	  topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#ag"
      xBins       = vss_table, speedo, readonly
      yBins       = LOAD_table, LOAD, readonly
      zBins       = auto_table
      upDownLabel = "UP", "DOWN"
      gridHeight  = 0.7
      gridOrient  = 230,  0, 340 ; Space 123 rotation of grid in degrees.

   table = pctable, pcmap, "Pressure Control Table", 2
   	  topicHelp = "http://www.msgpio.com/manuals/mshift/V2tune.html#ap"
      xBins       = vss_table, speedo, readonly
      yBins       = LOAD_table, LOAD, readonly
      zBins       = pc_table
      upDownLabel = "+", "-"
      gridHeight  = 0.7
      gridOrient  = 220,   0, 340



;-------------------------------------------------------------------------------

[GaugeConfigurations]

   ;-------------------------------------------------------------------------------
   ;  Notes on some of the gauges.
   ;-------------------------------------------------------------------------------
   ; Define a gauge's characteristics here, then go to a specific layout
   ; block (Tuning or FrontPage) and use the name you've defined here to
   ; display that gauge in a particular position.
   ;
   ; Name  = Case-sensitive, user-defined name for this gauge configuration.
   ; Var   = Case-sensitive name of variable to be displayed, see the
   ;         OutputChannels block in this file for possible values.
   ; Title = Title displayed at the top of the gauge.
   ; Units = Units displayed below value on gauge.
   ; Lo    = Lower scale limit of gauge.
   ; Hi    = Upper scale limit of gauge.
   ; LoD   = Lower limit at which danger color is used for gauge background.
   ; LoW   = Lower limit at which warning color is used.
   ; HiW   = Upper limit at which warning color is used.
   ; HiD   = Upper limit at which danger color is used.
   ; vd    = Decimal places in displayed value
   ; ld    = Label decimal places for display of Lo and Hi, above.

   ;Name                 Var             Title                   Units     Lo     Hi     LoD    LoW   HiW   HiD vd ld

   auxVolts            = aux_volts,     "Aux. Channel Volts",  "Volts",     0,     5,     0,      0,    5,    5, 3, 0
   clock               = second2,       "Clock",             "seconds",     0,   255,     0,      0,  253,  255, 0, 0
   Converter_slip      = converter_slip,"Conv. Slip",              "%",     0,   200,    -1,     -1,  200,  200, 0, 0
   TCC                 = lock_TCC,      "TCC PWM%"                 "%",     0,   100,    -1,     -1,  255,  255, 0, 0
   DShaft_RPM          = os_rpm,        "Driveshaft RPM",           "",     0,  6000,    -1,     -1,  5000, 5500, 0, 0
   Error               = error,         "Status",                   "",     0,   255,    -1,     -1,  255,  255, 0, 0
   Input_Shaft_RPM     = is_rpm,        "Input Shaft RPM",          "",     0,  9000,    -1,     -1,  6000, 6500, 0, 0
   Manual_gear         = manual_gear,   "Manual Gear",              "",    -1,     4,    -1,     -1,    5,    5, 0, 0
   Target_gear         = target_gear,   "Target Gear",              "",     1,     4,    -1,     -1,    5,    5, 0, 0
   FuelEfficiency      = mileage,       "Fuel Efficiency",       "mpg",     0,    50,     5,     10,   99,   99, 2, 2
   FuelConsumption     = kmileage,      "Fuel EConsumpt.",   "l/100km",     0,    25,     2,     3,    20,   24, 2, 2
   VSS_Hertz           = VSS_Hz,        "VSS Frequency"           "Hz",     0, 20000,    -1,     -1,20001,20001, 0, 0
   current_gear        = current_gear,  "Current Gear",             "",    -1,     4,    -1,     -1,    5,    5,  0, 0
   load                = LOAD,          "Load",                  "kpa",     0,   200,    -1,     -1,  250,  250,  1, 0
   line_pressure       = linepressure,  "Line Pressure",         "psi",     0,   500,    50,    100,  400,  480,  0, 0
   odometer            = odometer,      "Trip Odometer",       "miles",     0,   100,    -1,     -1,  255,  255,  2, 0
   Output_Shaft_RPM    = os_rpm,        "Output Shaft RPM",         "",     0,  6000,    -1,     -1,  3000, 4500, 0, 0
   pcsol               = PC_duty,       "Pressure Control", "100-PWM%",     0,   100,    -1,     -1,  101,  101,  0, 0
   Input1              = swADC,         "Input1",              "volts",     0,     5,     0,      0,    5,    5,  3, 0
   Input2              = swBDC,         "Input2",              "volts",     0,     5,     0,      0,    5,    5,  3, 0
   Input3              = swCDC,         "Input3",              "volts",     0,     5,     0,      0,    5,    5,  3, 0
#if NOT_METRIC
   speedo              = speedo,        "Speed",                 "mph",     0,   200,    -1,     -1,  160,  180,  0, 0
#else
   speedo              = speedo,        "Speed",                 "kph",     0,   300,    -1,     -1,  200,  270, 0, 0
#endif
   tach                = engine_rpm,    "Tach",                  "rpm",     0,  8000,    -1,     -1, 6000, 6500,  0, 0
#if NOT_METRIC
   trans_temp          = clt,           "Trans. Temp."          "degF",   -40,   220,   -20,    -10,  200,  210,  1, 0
#else   
   trans_temp          = clt,           "Trans. Temp."          "degC",   -40,   220,   -20,    -10,  200,  210,  1, 0
#endif  
   solst               = solst,         "Solenoids",                "",     0,     4,    -1,     -1,   10,   10,  0, 0
   ic1_per_avg         = ic1_period,    "VSS Period"      "msec/tooth",     0,    20,    -1,     -1,   20,   20, 3, 3
   ic2_per_avg         = ic2_period,    "ISS Period"      "msec/tooth",     0,    20,    -1,     -1,   20,   20, 3, 3
   VSS_errors          = dbug,          "VSS Errors",               "",     0,  1000,     0,     -1,  1000, 1000, 0, 0
   load_short          = LOAD_short,    "Short Load",            "kpa",     0,   200,    -1,     -1,   250,  250, 1, 0

;  - Regardless of the order shown here, the gauges are listed in the drop-down menu in capital/uppercase 
;    alphabetical order, then lowercase/alphabetical order (i.e., by ASCII numbering).

;-------------------------------------------------------------------------------

[FrontPage]

   ; Gauges are numbered left to right, top to bottom.
   ;
   ;    1  2  3  4
   ;    5  6  7  8

   gauge1 = speedo
   gauge2 = odometer
   gauge3 = tach
   gauge4 = FuelEfficiency
   gauge5 = current_gear
   gauge7 = trans_temp
   gauge6 = pcsol
   gauge8 = load

   ;----------------------------------------------------------------------------
   ; Indicators
   ;               expr         off-label          on-label, off-bg, off-fg, on-bg, on-fg
   ;   indicator = { tpsaen }, "Not Accelerating", "AE",     cyan,   white,  red,   black
   ;

   indicator = { downbutton          }, "dwn",     "DownShift Pressed",    white,   white,    green,   blue;
   indicator = { upbutton            }, "up",        "UpShift Pressed",    white,   white,    green,   blue;
   indicator = { brake               }, "Brakes OFF",      "Brakes ON",    green,   black,      red,   white;
   indicator = { lock_TCC            }, "TCC Off",       "TCC Applied",    green,   black,   white,   blue;
;   indicator = { (current_gear > 0)  }, "PNR",              "In Drive",    white,   black,    blue,   black;
   indicator = { (current_gear < 0)  }, "PND",               "Reverse",    white,   black,     red,   black;
   indicator = { auto_mode           }, "MANUAL Mode",     "AUTO Mode",    green,   black,   blue,   white;
   indicator = { sp1                 }, "Spare1 OFF",      "Spare1 ON",   white,   black,    green,   white;
   indicator = { sp2                 }, "Spare2 OFF",      "Spare2 ON",   white,   black,    green,   white;
;   indicator = { FWD                 }, "4WD",                   "2WD",   white,   black,    green,   blue;
   indicator = { flashBurn           }, "Burned",         "Flash Burn",    white,   green,      red,   black;
;   indicator = { error > 1           }, "No Codes",            "Codes",    white,   black,      red,   black;
   indicator = { swA                 }, "Input1 LOW",          "Input1 HIGH",    cyan,   red,    red,   white;
   indicator = { swB                 }, "Input2 LOW",          "Input2 HIGH",    cyan,   red,    red,   white;
   indicator = { swC                 }, "Input3 LOW",          "Input3 HIGH",    cyan,   red,    red,   white;
   indicator = { swD                 }, "Input4 LOW",          "Input4 HIGH",    cyan,   red,    red,   white;
   
;-------------------------------------------------------------------------------

[RunTime]
;   barHysteresis = 2.5 ; Seconds

;-------------------------------------------------------------------------------

[Tuning]

;  font            = "Lucida Console", 12
;  font            = "Courier", 14
   spotDepth       =   2 ; 0 = no indicators, 1 = Z only, 2 = XYZ indicators.
   cursorDepth     =   2 ; Same as spot depth.

   ; The four radio buttons on the tuning screen select a "page" of six
   ; gauges.  The gauge numbering is the same as the front page, across
   ; then down.
   ;             1  2
   ;             3  4
   ;             5  6
   ;
   ; gaugeColumns allows you to hide or show gauges in column 2 (i.e.,
   ; gauges 2, 4 and 6).

   gaugeColumns = 2 ; Only 1 or 2 are valid.

   ;              Page 1            Page 2             Page 3            Page 4
   pageButtons  = "&page1",         "p&age2",           "pa&ge3",         "pag&e4"
   gauge1       = tach,             tach,               tach,             tach
   gauge2       = speedo,           speedo,             speedo,           speedo
   gauge4       = load,             load,               load,             load
   gauge5       = current_gear,     current_gear,       current_gear,     current_gear
   gauge6       = pcsol,            pcsol,              pcsol,            pcsol

;-------------------------------------------------------------------------------

[AccelerationWizard]
; not used for trans control

;-------------------------------------------------------------------------------

[BurstMode]
   getCommand       = "a\x00\x06"

[OutputChannels]
; These are from the outpc. structure in the main.c file of the source code
; the size and format are the same as above

   deadValue        = { 0 } ; Convenient unchanging value.

   ochBlockSize     = 61
   
 #if CAN_COMMANDS
;full version that works anywhere
   ochGetCommand    = "r\x01\x07%2o%2c"
#else
   ochGetCommand       = "a\x00\x06"
#endif   
  seconds           = scalar, U16,    0,     "sec",      1.000, 0.0 
#if NOT_METRIC
  speedo            = scalar, U16,    2,     "mph",      0.100, 0.0
  odometer          = scalar, U32,    4,   "miles",      0.001, 0.0 
#else
  speedo            = scalar, U16,    2,     "kph",      0.100, 0.0
  odometer          = scalar, U32,    4,      "km",      0.001, 0.0 
#endif 
  auto_mode         = scalar, U08,    8,        "",      1.000, 0.0 
  upshift_request   = scalar, U08,    9,        "",      1.000, 0.0 
  downshift_request = scalar, U08,   10,        "",      1.000, 0.0
  manual_gear       = scalar, S08,   11,        "",      1.000, 0.0
  current_gear      = scalar, S08,   12,        "",      1.000, 0.0
  target_gear       = scalar, S08,   13,        "",      1.000, 0.0
  engine_rpm        = scalar, U16,   14,     "rpm",      1.000, 0.0
  error             = scalar, U08,   16,        "",      1.000, 0.0
  LOAD              = scalar, S16,   17,     "kpa",      0.100, 0.0
#if NOT_METRIC
  clt               = scalar, S16,   19,    "degF",      0.100, 0.0
#else
  clt               = scalar, S16,   19,    "degC",      0.100, 0.0
#endif
  linepressure      = scalar, U16,   21,     "psi",      1.000, 0.0
  lock_TCC          = scalar, U08,   23,        "",      1.000, 0.0
  brake             = scalar, U08,   24,        "",      1.000, 0.0
  LOAD_short        = scalar, U16,   25,     "kpa",      0.100, 0.0
  aux_volts         = scalar, U16,   27,       "V",      0.001, 0.0
  PC_duty           = scalar, U08,   29,       "%",      1.000, 0.0
  converter_slip    = scalar, U08,   30,       "%",      1.000, 0.0
  dbug              = scalar, U16,   31,        "",      1.000, 0.0
  upbutton          = scalar, U08,   33,        "",      1.000, 0.0
  downbutton        = scalar, U08,   34,        "",      1.000, 0.0  
  sp1               = scalar, U08,   35,        "",      1.000, 0.0  
  sp2               = scalar, U08,   36,        "",      1.000, 0.0
  swADC             = scalar, U16,   37,   "volts",      0.00488, 0.0
  swBDC             = scalar, U16,   39,   "volts",      0.00488, 0.0
  swCDC             = scalar, U16,   41,   "volts",      0.00488, 0.0
  FWD               = scalar, U08,   43,     "4WD",      1.000, 0.0   
  solst             = scalar, U08,   44,        "",      1.000, 0.0
  Output1           = bits,   U08,   44  [0:0]
  Output2           = bits,   U08,   44  [1:1]
  Output3           = bits,   U08,   44  [2:2]
  Output4           = bits,   U08,   44  [3:3]		   
  mileage           = scalar, U16,   45,     "mpg",      0.010, 0.0       
  cksum             = scalar, U08,   47,        "",      1.000, 0.0
  FuelAdj           = scalar, S16,   48,       "%",      0.100, 0.0
  SpkAdj            = scalar, S16,   50,       "°",      0.100, 0.0
  IdleAdj           = scalar, S16,   52,        "",      1.000, 0.0
  SprAdj            = scalar, S16,   54,        "",      1.000, 0.0
  swA               = bits,   U08,   56, [0:0]
  swB               = bits,   U08,   56, [1:1]
  swC               = bits,   U08,   56, [2:2]
  swD               = bits,   U08,   56, [3:3]
  flashBurn         = bits,   U08,   57, [0:0]
  is_rpm            = scalar, U16,   58,    "rpm",       1.000, 0.0
  WOT_flag          = scalar, U08,   60,       "",       1.000, 0.0
  
;     pageSize =  60 + 1 = 61

; Derived Values
   secl             = {(timeNow % 256) - (timeNow % 1)                 }, "sec" ; to keep TS happy despite CAN delays
   second2          = { seconds % 256                                  }, "sec" ; for clock gauge to see resets 
   time             = { timeNow                                        }, "sec" ; system time from PC
   kmileage         = { 235.2/mileage                                  }, "l/100km"
#if NOT_METRIC
   os_rpm = { ((speedo*1.467)/((tire_diam/12)*3.1416)) * 60 * axle_ratio }, "";
#else
   os_rpm = { ((speedo*0.893)/(((tire_diam/2.54)/12)*3.1416)) * 60 * axle_ratio }, "";
#endif
   VSS_Hz = { (os_rpm * num_teeth)/60  }, "Hz";
   ic1_period = { 1/VSS_Hz }, "";
   ic2_period = { 60/(is_rpm * iss_divider ) }, "";
 
;-------------------------------------------------------------------------------
;--  The entries are saved in the datalog file in the order in which they     --
;--  appear in the list below.                                                --
;--                                                                           --
;--   Channel - Case sensitive name of output channel to be logged.           --
;--   Label   - String written to header line of log.                         --
;--   Type    - Data type of output, converted before writing.                --
;--   Format  - C-style output format of data.                                --

[Datalog]
   ;       Channel            Label          Type    Format
   ;       --------------     ----------     -----   ------
   entry = time,              "Time",         float,   "%.3f"
   entry = seconds,           "Seconds",      int,     "%d"
   entry = auto_mode,         "Mode",         int,     "%d"
   entry = speedo,            "Speed",        float,   "%.1f"
   entry = engine_rpm,        "RPM",          int,     "%d"
#if NOT_METRIC
   entry = odometer,          "miles",        float,   "%.3f"
#else
   entry = odometer,          "kms",          float,   "%.3f"
#endif
   entry = LOAD,              "load",         float,   "%.1f"
   entry = WOT_flag,          "WOT",          int,     "%d"
   entry = mileage,           "mpg",          float,   "%.2f"
   entry = swADC,             "swADC",        float,   "%.3f"
   entry = swBDC,             "swBDC",        float,   "%.3f"
   entry = swCDC,             "swCDC",        float,   "%.3f"
   entry = swD,               "swD",          int,     "%d"
   entry = solst,             "soln",         int,     "%d"
   entry = upbutton,          "UP",           int,     "%d"
   entry = downbutton,        "DWN",          int,     "%d"   
   entry = current_gear,      "cGear",        int,     "%d"
   entry = target_gear,       "tGear",        int,     "%d"
   entry = manual_gear,       "mGear",        int,     "%d"
   entry = lock_TCC,          "TCC",          int,     "%d"
   entry = brake,             "Brake",        int,     "%d"
   entry = os_rpm,            "OS",           int,     "%d"
   entry = is_rpm,            "IS",           int,     "%d"
   entry = converter_slip,    "slip",         int,     "%d"
#if NOT_METRIC
   entry = clt,               "degF",         float,   "%.1f"
#else   
   entry = clt,               "degC",         float,   "%.1f"
#endif   
   entry = linepressure,      "line",         int,     "%d"
   entry = aux_volts,         "auxCH",        float,   "%.3f"
   entry = error,             "Error",        int,     "%d"
   entry = PC_duty,           "PC%",          int,     "%d"
   entry = sp1,               "Sp1",          int,     "%d"
   entry = sp2,               "Sp2",          int,     "%d"
   entry = LOAD_short,        "sLoad",        float,   "%.1f"
   entry = dbug,              "dbug",         int,     "%d"
   entry = flashBurn,         "burn",         int,     "%d"
   entry = FWD,               "4WD",          int,     "%d"

; -----------------------------------------------------------
